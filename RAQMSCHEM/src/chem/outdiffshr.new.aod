Only in shr: addgsidata
Binary files shr/calcdxdy.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/calcdxdy.mod differ
Binary files shr/calcvort_dgrid_mod.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/calcvort_dgrid_mod.mod differ
Binary files shr/calcvort_mod.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/calcvort_mod.mod differ
Binary files shr/libshr.a and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/libshr.a differ
Binary files shr/libshr_a-calcdxdy.o and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/libshr_a-calcdxdy.o differ
Binary files shr/libshr_a-calcvort-dgrid_mod.o and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/libshr_a-calcvort-dgrid_mod.o differ
Binary files shr/libshr_a-calcvort_mod.o and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/libshr_a-calcvort_mod.o differ
Binary files shr/libshr_a-raqmschem_comm_mod.o and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/libshr_a-raqmschem_comm_mod.o differ
Binary files shr/libshr_a-raqmschemcomm_mod.o and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/libshr_a-raqmschemcomm_mod.o differ
Binary files shr/libshr_a-raqmschem_iodata_mod.o and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/libshr_a-raqmschem_iodata_mod.o differ
Binary files shr/libshr_a-raqmschem_io_mod.o and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/libshr_a-raqmschem_io_mod.o differ
Binary files shr/libshr_a-raqmschem_map_mod.o and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/libshr_a-raqmschem_map_mod.o differ
Binary files shr/libshr_a-raqmschem_model_mod.o and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/libshr_a-raqmschem_model_mod.o differ
Binary files shr/libshr_a-raqmschem_pmgrid_mod.o and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/libshr_a-raqmschem_pmgrid_mod.o differ
diff -Bbw shr/Makefile /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/Makefile
209c209
< ACLOCAL = ${SHELL} /home/lenzen/EMC_FV3/v91/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/missing aclocal-1.15
---
> ACLOCAL = ${SHELL} /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/missing aclocal-1.15
212,214c212,214
< AUTOCONF = ${SHELL} /home/lenzen/EMC_FV3/v91/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/missing autoconf
< AUTOHEADER = ${SHELL} /home/lenzen/EMC_FV3/v91/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/missing autoheader
< AUTOMAKE = ${SHELL} /home/lenzen/EMC_FV3/v91/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/missing automake-1.15
---
> AUTOCONF = ${SHELL} /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/missing autoconf
> AUTOHEADER = ${SHELL} /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/missing autoheader
> AUTOMAKE = ${SHELL} /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/missing automake-1.15
233c233
< FCFLAGS = -traceback -ftz -align array64byte -axavx -O2 -qno-opt-dynamic-align -fno-alias -nowarn -safe-cray-ptr -fp-model source  -O2 -fPIC -assume realloc_lhs -m64 -mcmodel=small -threads -I/home/lenzen/ESMF.8.0.0.BS47.S4/esmf//mod/modO/Linux.intel.64.intelmpi.default -I/home/lenzen/ESMF.8.0.0.BS47.S4/esmf//src/include -I/opt/netcdf4/4.6.2-intel-18.0.3/include -DESMF_NO_INTEGER_1_BYTE -DESMF_NO_INTEGER_2_BYTE -DESMFVERSIONGIT='ESMF_8_0_0_beta_snapshot_47' -DESMF_LAPACK=1 -DESMF_LAPACK_INTERNAL=1 -DESMF_MOAB=1 -DESMF_NO_ACC_SOFTWARE_STACK=1 -DESMF_NETCDF=1 -DESMF_PIO=1 -DESMF_MPIIO -DESMF_NO_OPENMP -DESMF_NO_OPENACC -DESMF_BOPT_O -DESMF_TESTCOMPTUNNEL -DSx86_64_small=1 -DESMF_OS_Linux=1 -DESMF_COMM=intelmpi -DESMF_DIR=/home/lenzen/ESMF.8.0.0.BS47.S4/esmf/
---
> FCFLAGS = -traceback -ftz -align array64byte -qno-opt-dynamic-align -fno-alias -nowarn -safe-cray-ptr -fp-model source  -O2 -fPIC -assume realloc_lhs -m64 -mcmodel=small -threads -I/home/lenzen/ESMF.8.0.0.BS47.S4/esmf//mod/modO/Linux.intel.64.intelmpi.default -I/home/lenzen/ESMF.8.0.0.BS47.S4/esmf//src/include -I/opt/netcdf4/4.6.2-intel-18.0.3/include -DESMF_NO_INTEGER_1_BYTE -DESMF_NO_INTEGER_2_BYTE -DESMFVERSIONGIT='ESMF_8_0_0_beta_snapshot_47' -DESMF_LAPACK=1 -DESMF_LAPACK_INTERNAL=1 -DESMF_MOAB=1 -DESMF_NO_ACC_SOFTWARE_STACK=1 -DESMF_NETCDF=1 -DESMF_PIO=1 -DESMF_MPIIO -DESMF_NO_OPENMP -DESMF_NO_OPENACC -DESMF_BOPT_O -DESMF_TESTCOMPTUNNEL -DSx86_64_small=1 -DESMF_OS_Linux=1 -DESMF_COMM=intelmpi -DESMF_DIR=/home/lenzen/ESMF.8.0.0.BS47.S4/esmf/
246c246
< MAKEINFO = ${SHELL} /home/lenzen/EMC_FV3/v91/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/missing makeinfo
---
> MAKEINFO = ${SHELL} /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/missing makeinfo
263,266c263,266
< abs_builddir = /home/lenzen/EMC_FV3/v91/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr
< abs_srcdir = /home/lenzen/EMC_FV3/v91/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr
< abs_top_builddir = /home/lenzen/EMC_FV3/v91/EMC_FV3GFS-GSDCHEM/RAQMSCHEM
< abs_top_srcdir = /home/lenzen/EMC_FV3/v91/EMC_FV3GFS-GSDCHEM/RAQMSCHEM
---
> abs_builddir = /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr
> abs_srcdir = /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr
> abs_top_builddir = /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM
> abs_top_srcdir = /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM
279c279
< datarootdir = /home/lenzen/EMC_FV3/v91/EMC_FV3GFS-GSDCHEM/RAQMSCHEM_INSTALL
---
> datarootdir = /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM_INSTALL
287,288c287,288
< install_sh = ${SHELL} /home/lenzen/EMC_FV3/v91/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/install-sh
< libdir = /home/lenzen/EMC_FV3/v91/EMC_FV3GFS-GSDCHEM/RAQMSCHEM_INSTALL
---
> install_sh = ${SHELL} /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/install-sh
> libdir = /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM_INSTALL
296c296
< prefix = /home/lenzen/EMC_FV3/v91/EMC_FV3GFS-GSDCHEM/RAQMSCHEM_INSTALL
---
> prefix = /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM_INSTALL
Binary files shr/mpishorthand.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/mpishorthand.mod differ
Only in shr: nrseach.F90
Only in shr: outdiffiodata
diff -Bbw shr/outpwd /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/outpwd
1c1
< /home/lenzen/FV3GFS-GSDCHEM.0.9.0.CHEMGSI/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr
---
> /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr
Only in shr: print2
Only in shr: printaodfcst
Only in shr: printchemwrite
Only in shr: printchemwrite4
Only in shr: printgsivar
Only in shr: printgsivar2
Only in shr: printgsiwrite
Only in shr: printgsi_write
Only in shr: printreadchem_gsiinc
Only in shr: printwrite2
diff -Bbw shr/raqmschemcomm_mod.F90 /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschemcomm_mod.F90
20,21c20
<   real(CHEM_KIND_R4), allocatable, dimension(:,:) :: ptropraq,ztropraq
<   real(CHEM_KIND_R4), allocatable, dimension(:,:) :: ptropgsi,ztropgsi
---
>   real(CHEM_KIND_R4), allocatable, dimension(:,:) :: ptrop,ztrop
Binary files shr/raqmschem_comm_mod.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschem_comm_mod.mod differ
Binary files shr/raqmschemcomm_mod.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschemcomm_mod.mod differ
Binary files shr/raqmschem_config_mod.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschem_config_mod.mod differ
Binary files shr/raqmschem_const_mod.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschem_const_mod.mod differ
Binary files shr/raqmschem_data_mod.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschem_data_mod.mod differ
diff -Bbw shr/raqmschem_iodata_mod.F90 /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschem_iodata_mod.F90
23d22
<   public :: raqmschem_chem_write_aodfcst
30d28
<   public :: flipz
888,890c886
< !    use raqmschem_pmgrid_mod,only : iam,cdatestr,gsivar,numgsicem,gsicem,loccem
<     use raqmschem_pmgrid_mod,only : iam,cdatestr,gsivar,numgsicem
<     use raqmschem_pmgrid_mod,only : gsidatatype,gsiarray,gsivarr
---
>     use raqmschem_pmgrid_mod,only : iam,cdatestr,gsivar,numgsicem,gsicem,loccem
918c914
<     integer :: de, deCount, localpe, tile ,m,k,kk,nl,ii
---
>     integer :: de, deCount, localpe, tile ,m,k,kk,nl
924,925d919
<     character*8,pointer,dimension(:) :: gsicem
<     integer,pointer,dimension(:) :: loccem
1000,1005d993
<         endif
< !        write(6,*)'gsi_write numgsicem',numgsicem
<         do ii=1,numgsicem
<           gsicem=>gsiarray(ii)%gsicem
<           loccem=>gsiarray(ii)%loccem
<           if(gsivarr(ii)=='AOD')then
1023,1027c1011,1012
<             if(iam==0)then
<               write(6,*)'ii=',ii,'nsigvar',gsiarray(ii)%ngsivar,gsivarr(ii)
<              endif
<           do i=1,gsiarray(ii)%ngsivar
<              if(gsivarr(ii).eq.'o3vmr')then
---
>         do i=1,numgsicem
>           if(gsicem(i).eq.'o3vmr')then
1029,1030c1014,1016
<               units='ppv'
<             elseif(gsivarr(ii)=='AOD')then
---
>           else
>             traceout=tr3d(:,:,:,loccem(i))
>           endif
1031a1018,1022
>           if(gsicem(i)(1:2).eq.'bc'.or.gsicem(i)(1:3).eq.'oc1'.or. &
>             gsicem(i)(1:3).eq.'oc2'.or.                               &
>             gsicem(i)(1:3).eq.'dus'.or.gsicem(i)(1:3).eq.'sea'.or. &
> !           gsicem(i)(1:3).eq.'so2'.or.gsicem(i)(1:4).eq.'sulf')then
>             gsicem(i)(1:4).eq.'sulf')then
1033,1034d1023
< !              write(6,*)'gsicem',i,gsicem(i),'loccem',loccem(i)
<               traceout=tr3d(:,:,:,loccem(i))
1036,1037d1024
< !             write(6,*)'gsi_write',i,'loccem',loccem(i),'gsicem',gsicem(i)
<               traceout=tr3d(:,:,:,loccem(i))
1040,1042c1027,1034
<             if(iam==0)then
<               write(6,*)'output i',i,'ii',ii,gsicem(i),'loccem',loccem(i)
<             endif
---
> !          if(iam.eq.0)then
> !          write(6,*)'writegsi',mype,i,gsicem(i),units
> !          call flush(6)
> !          endif
> !          if(iam.eq.iamprn)then
> !            write(6,*)'tracer gsi write',gsicem(i),iprn,jprn,traceout(iprn,jprn,1)
> !            flush(6)
> !          endif
1048c1040
<             if(gsivarr(ii)=='o3vmr')then
---
>           if(gsicem(i)=='o3vmr')then
1055d1046
<         end do
1066c1057
<         varname='aodgsi',units=' ',rc=localrc)
---
>         varname='ptrop',units='pa',rc=localrc)
1120c1111
<     use raqmschemcomm_mod, only : cprate,lprate,ncplprate
---
>     use raqmschemcomm_mod, only : cprate,lprate,ncplprate,gsiinc
1123,1125c1114
< !    use raqmschem_pmgrid_mod,only : iam,cdatestr,gsivar,numgsicem,gsicem,loccem,ompsgsi
<     use raqmschem_pmgrid_mod,only : iam,cdatestr,gsivar,numgsicem,ompsgsi
<     use raqmschem_pmgrid_mod,only : gsiarray,gsivarr
---
>     use raqmschem_pmgrid_mod,only : iam,cdatestr,gsivar,numgsicem,gsicem,loccem,ompsgsi
1154c1143
<     integer :: de, deCount, localpe, tile ,m,k,kk,nl,mm
---
>     integer :: de, deCount, localpe, tile ,m,k,kk,nl
1161,1163d1149
<     integer,pointer,dimension(:) :: loccem
<     character *8,pointer,dimension(:) :: gsicem
<     real*4,pointer,dimension(:,:,:,:) :: gsiinc
1243c1229,1230
< !      if(allocated(gsiinc))then
---
>       if(allocated(gsiinc))then
>         gsitotinc=0.0
1254c1241
< !      endif
---
>       endif
1262,1263c1249,1251
< !        if(allocated(gsiinc))then
< !        endif
---
>         if(allocated(gsiinc))then
>           gsitotinc(:,:)=gsitotinc(:,:)+dpm(:,:,k)*gsiinc(:,:,k,1)
>         endif
1287,1288c1275,1278
< !      if(allocated(gsiinc))then
< !      endif
---
>       if(allocated(gsiinc))then
>         gsitotinc=gsitotinc*avgro/airmw*10./grvity*1.e-18
>         pergsiinc=gsitotinc/cotot
>       endif
1362c1352
<         traceout=dpm *100.
---
>         traceout=dpm
1364c1354
<         varname='dpm',units='Pa',rc=localrc)
---
>         varname='dpm',units='mb',rc=localrc)
1387,1394d1376
<         if(allocated(ptropgsi))then
<           call chem_io_writenc(trim(fileout),ptropgsi,path=trim(config%emi_outname),de=de,time=itime, &
<           varname='ptrop',units='Pa',attribute='using gsi code to calc ptrop',rc=localrc)
<         endif
<         if(allocated(ztropgsi))then
<           call chem_io_writenc(trim(fileout),ztropgsi,path=trim(config%emi_outname),de=de,time=itime, &
<           varname='ztrop',units='m',attribute='using gsi code to calc ztrop',rc=localrc)
<         endif
1405d1386
< !        write(200+iam,*)'allocated adoincgsi',allocated(data%aodincgsi)
1408d1388
< !          write(200+iam,*)'aodincgsi out ',maxval(trace2dout),minval(trace2dout)
1411c1391
<           data%aodincgsi=0.0
---
>           data%aodincgsi=0.0 ! added 8/20/2022 12:25PM
1576c1556
< !        if(allocated(gsiinc))then
---
>         if(allocated(gsiinc))then
1581,1593c1561
<         do mm=1,numgsicem
<           if(allocated(gsiarray(mm)%gsiinc))then
<             gsiinc=>gsiarray(mm)%gsiinc
<             if(gsiarray(mm)%ngsivar==1)then
< !             ajl check on this find
<               gsitotinc=0.0
<               do k=1,nl
<                 gsitotinc(:,:)=gsitotinc(:,:)+dpm(:,:,k)*gsiinc(:,:,k,1)
<               end do
<               gsitotinc=gsitotinc*avgro/airmw*10./grvity*1.e-18
<             endif
<             do m=1,gsiarray(mm)%ngsivar
<        
---
>           do m=1,numgsicem
1597c1565
<               if(gsivarr(mm)=='AOD')then
---
>             if(numgsicem>=14)then
1600c1568
<                 varname='inc'//trim(gsiarray(mm)%gsicem(m)),units='units',rc=localrc)
---
>               varname='inc'//trim(gsicem(m)),units='units',rc=localrc)
1603c1571
<                 varname='inc'//trim(gsiarray(mm)%gsicem(m)),units='ppv',rc=localrc)
---
>               varname='inc'//trim(gsicem(m)),units='ppv',rc=localrc)
1604a1573,1584
> !          traceout=gsiinc(:,:,:,1)/tr3d(:,:,:,p_co)*100.
> #if 0
>             traceout=pergsiv(:,:,:,m)
>             call chem_io_writenc(trim(fileout),traceout,path=trim(config%emi_outname),de=de,time=itime, &
>             varname='per'//trim(gsicem(m)),units='fraction',rc=localrc)
> !            call chem_io_writenc(trim(fileout),perco,path=trim(config%emi_outname),de=de,time=itime, &
> !          varname='perco',units='fraction',rc=localrc)
>             traceout=colgsiinc(:,:,:,m)
>             call chem_io_writenc(trim(fileout),traceout,path=trim(config%emi_outname),de=de,time=itime, &
>             varname='int'//trim(gsicem(m)),units='sum',rc=localrc)
> #endif
> 
1606,1608c1586,1587
<             end do ! m
<           endif ! gsiarray%gsiinc
<           if(gsivarr(mm).eq.'o3vmr')then
---
>           end do
>           if(gsicem(1).eq.'o3vmr')then
1610c1589
< !            write(6,*)'ompsgsi',ompsgsi,'incLP',maxval(traceout),minval(traceout)
---
>             write(6,*)'ompsgsi',ompsgsi,'incLP',maxval(traceout),minval(traceout)
1640,1642c1619,1621
<           endif ! o3vmr
<           if(gsivarr(mm).eq.'co')then
<             if(allocated(incNUCAPSco3d))then
---
>           endif
>           if(gsicem(1).eq.'co')then
>             if(allocated(incnucapsco3d))then
1645c1624
< !              write(6,*)'cogsi','incNUCAPS',maxval(traceout),minval(traceout)
---
>               write(6,*)'cogsi','incNUCAPS',maxval(traceout),minval(traceout)
1652c1631
<             if(allocated(incTROPOMIco3d))then
---
>             if(allocated(inctropomico3d))then
1661,1677d1639
<           endif ! co
< !          write(6,*)'gsiarray mm ngsivar ',mm,gsiarray(mm)%ngsivar
< !          call flush(6)
<           if(gsiarray(mm)%ngsivar==1)then
< !            write(6,*)'mm',mm,'gsicem',gsiarray(mm)%gsicem(1)
< !            call flush(6)
< !            write(6,*)'gsitotinc',maxval(gsitotinc)
< !            call flush(6)
<             call chem_io_writenc(trim(fileout),gsitotinc,path=trim(config%emi_outname),de=de,time=itime, &
<             varname=trim(gsiarray(mm)%gsicem(1))//'totinc',units='10**18 molec/cm2',rc=localrc)
< !            write(6,*)'did iowriet'
< !            call flush(6)
<             if(gsiarray(mm)%gsicem(1)=='co')then
<               pergsiinc=gsitotinc/cotot
<               call chem_io_writenc(trim(fileout),pergsiinc,path=trim(config%emi_outname),de=de,time=itime, &
<               varname='per'//trim(gsiarray(mm)%gsicem(1))//'inc',units='percent',rc=localrc)
<             endif
1679d1640
<         end do ! mm findhere
1685a1647,1650
>           call chem_io_writenc(trim(fileout),gsitotinc,path=trim(config%emi_outname),de=de,time=itime, &
>           varname=trim(gsicem(1))//'totinc',units='10**18 molec/cm2',rc=localrc)
>           call chem_io_writenc(trim(fileout),pergsiinc,path=trim(config%emi_outname),de=de,time=itime, &
>           varname='per'//trim(gsicem(1))//'inc',units='percent',rc=localrc)
1687c1652
< !        endif
---
>         endif
1712c1677
<         traceout=dpm*100.
---
>         traceout=dpm
1714c1679
<         varname='dpm',units='Pa',rc=localrc)
---
>         varname='dpm',units='mb',rc=localrc)
1717c1682
<         varname='pdash',units='Pa',rc=localrc)
---
>         varname='pdash',units='mb',rc=localrc)
1826,1828c1791,1792
<         trace2dout=sfcp*100.
<         call chem_io_writenc(trim(fileout),trace2dout,path=trim(config%emi_outname),de=de,time=itime, &
<         varname='sfcp',units='Pa',rc=localrc)
---
>         call chem_io_writenc(trim(fileout),sfcp,path=trim(config%emi_outname),de=de,time=itime, &
>         varname='sfcp',units='mb',rc=localrc)
1855,1857c1819,1820
<         trace2dout=sfcp*100.
<         call chem_io_writenc(trim(fileout),trace2dout,path=trim(config%emi_outname),time=1,de=de, &
<         varname='sfcp',units='Pa',rc=localrc)
---
>         call chem_io_writenc(trim(fileout),sfcp,path=trim(config%emi_outname),time=1,de=de, &
>         varname='sfcp',units='mb',rc=localrc)
1962,2300d1924
< 
<     subroutine raqmschem_chem_write_aodfcst(tr3d,data,statein,dims,itime,cdate,filename,rc)
<     use raqmschem_species_mod
<     use raqmschemcomm_mod, only : thgrd,tcmw,idbc1,idbc2,idoc1,idoc2,idso4,pgrd
<     use raqmschemcomm_mod, only : cprate,lprate,ncplprate
<     use raqmschem_pmgrid_mod,only : iam,cdatestr,gsivar,numgsicem,ompsgsi
<     use raqmschem_pmgrid_mod,only : gsiarray,gsivarr,cemaod
<     use raqmschem_const_mod, only : mw_so4_aer,avgro,mw_co,grvity
<     use raqmschem_state_mod
<     implicit none
<     integer dims(3),i,j
<     integer,optional :: itime
<     character*10, optional, intent(in) :: cdate
<     character*100 fileout
<     character *(*), optional, intent(in) :: filename
<     character*100 :: aodatt='using aod coeff defived from geos-5 crtm coefficients'
<     integer, optional, intent(out) :: rc
<     type(chem_data_type) :: data
<     
<     real(CHEM_KIND_R8),dimension(:,:,:,:) :: tr3d
<     real(CHEM_KIND_R4),dimension(dims(1),dims(2),dims(3)) :: traceout
<     real(chem_kind_r4),dimension(dims(1),dims(2),dims(3)) :: dpm,dz
<     real(chem_kind_r4),dimension(dims(1),dims(2)) :: sfcp,trace2dout
<     real(chem_kind_r4),dimension(dims(1),dims(2),dims(3)) :: ext_bcoc,ext_dust,ext_seasalt
<     real(chem_kind_r4),dimension(dims(1),dims(2),dims(3)) :: ext_tot,ext_bc,ext_oc,ext_dust1
<     real(chem_kind_r4),dimension(dims(1),dims(2)) :: aod_bcoc,aod_dust,aod_seasalt,aod_sulf,aod_tot,aod_dust1
<     real(chem_kind_r4),dimension(dims(1),dims(2)) :: aod_bc,aod_oc
<     type(chem_state_type),  pointer :: stateIn, stateOut
< 
<     ! -- local variables
<     integer :: localrc
<     integer :: de, deCount, localpe, tile ,m,k,kk,nl,mm
<     type(chem_config_type), pointer :: config => null()
<     REAL,    PARAMETER :: airmw    = 28.97
<     character *10 :: units
<     real(chem_kind_r4) :: fac,facdob
<     logical aerosol_ugpKg
<     character *10 caerosol_ugpKg
<     integer,pointer,dimension(:) :: loccem
<     character *8,pointer,dimension(:) :: gsicem
<     real*4,pointer,dimension(:,:,:,:) :: gsiinc
<     caerosol_ugpKg=' '
<     call getenv('AEROSOL_ugpKg',caerosol_ugpKg)
<     if(iam==0)then
<        write(6,*)'top aodfcst'
<     endif
<     if(caerosol_ugpKg/=' ')then
<       if(caerosol_ugpKg=='YES')then
<         aerosol_ugpKg=.true.
<         if(iam==0)then
<           write(6,*)'aersol_ugpKg'
<         endif
<       elseif(caerosol_ugpKg=='NO')then
<         aerosol_ugpKg=.false.
<         if(iam==0)then
<           write(6,*)'aersol_ppmv'
<         endif
<       endif
<     else ! make default
<       aerosol_ugpKg=.true.
<       if(iam==0)then
<         write(6,*)'aersol_ugpKg'
<       endif
<     endif
<       
< !    character*20 :: gsicem(100)
< !    integer numgsicem,loccem(100)
<     fac=avgro/airmw*10./grvity
<     facdob=1.0e4*6.023e23/28.97/9.806/2.687e19
<     cdatestr(1:4)=cdate(1:4)
<     cdatestr(5:5)='-'
<     cdatestr(6:7)=cdate(5:6)
<     cdatestr(8:8)='-'
<     cdatestr(9:10)=cdate(7:8)
<     cdatestr(11:11)=' '
<     cdatestr(12:13)=cdate(9:10)
<     cdatestr(14:)=':00:00'
< !    write(6,*)'ajl top chem_write'
< !    write(200+iam,*)'ajl top chem_write',trim(cdatestr)
< !    call flush(6)
< !    call flush(200+iam)
< 
< 
<     ! -- begin
<     if (present(rc)) rc = CHEM_RC_SUCCESS
< 
<     call raqmschem_model_get(deCount=deCount, config=config, rc=localrc)
<     if (chem_rc_check(localrc, file=__FILE__, line=__LINE__, rc=rc)) return
< 
<     call chem_comm_get(localpe=localpe, rc=localrc)
<     if (chem_rc_check(localrc, file=__FILE__, line=__LINE__, rc=rc)) return
< !    write(6,*)'present filename',present(filename),'presend cdate',present(cdate)
<     if(present(filename))then
<       fileout=trim(filename)
<     else
<       if(present(cdate))then
<         fileout='tracer.'//cdate//'.nc'
<       else
<         fileout='tracer.nc'
<       endif
<     endif
<     nl=dims(3)
< 
<     do de = 0, deCount-1
<       call raqmschem_model_get(de=de,  tile=tile, rc=localrc)
<       if (chem_rc_check(localrc, file=__FILE__, line=__LINE__, rc=rc)) return
<       traceout=tr3d(:,:,:,1)
<       sfcp(:,:)=statein%pr3d(:,:,1)*.01
<       do k=1,dims(3)
<         dpm(:,:,k)=(statein%pr3d(:,:,k)-statein%pr3d(:,:,k+1))*.01
<         dz(:,:,k)=(statein%ph3d(:,:,k+1)-statein%ph3d(:,:,k))/9.80616
<       end do
<         call chem_io_writenc(trim(fileout),traceout,path=trim(config%emi_outname),de=de,time=itime, &
<         varname='q',units='kg/kg',rc=localrc)
<         do k=1,dims(3)
<           traceout(:,:,k)=zsurf(:,:)+statein%phl3d(:,:,k)/9.80616
<         end do
<         call chem_io_writenc(trim(fileout),traceout,path=trim(config%emi_outname),de=de,time=itime, &
<         varname='zdash',units='m',rc=localrc)
<         traceout=dpm*100. ! make pascals
<         call chem_io_writenc(trim(fileout),traceout,path=trim(config%emi_outname),de=de,time=itime, &
<         varname='dpm',units='Pa',rc=localrc)
<         traceout=dz
<         call chem_io_writenc(trim(fileout),traceout,path=trim(config%emi_outname),de=de,time=itime, &
<         varname='dz',units='m',rc=localrc)
<         traceout=statein%prl3d
< !        write(6,*)'iodata pdash',maxval(traceout),minval(traceout)
<         call chem_io_writenc(trim(fileout),traceout,path=trim(config%emi_outname),de=de,time=itime, &
<         varname='pdash',units='Pa',rc=localrc)
<         traceout=statein%tk3d
<         call chem_io_writenc(trim(fileout),traceout,path=trim(config%emi_outname),de=de,time=itime, &
<         varname='T',units='K',rc=localrc)
<         traceout=statein%us3d
<         call chem_io_writenc(trim(fileout),traceout,path=trim(config%emi_outname),de=de,time=itime, &
<         varname='U',units='m/s',rc=localrc)
<         traceout=statein%vs3d
<         call chem_io_writenc(trim(fileout),traceout,path=trim(config%emi_outname),de=de,time=itime, &
<         varname='V',units='m/s',rc=localrc)
<         if(allocated(data%ext_3dg))then
<           traceout=data%ext_3dg(:,:,:,1)
<           call chem_io_writenc(trim(fileout),traceout,path=trim(config%emi_outname),de=de,time=itime, &
<           varname='ext_sulfg',units='1',attribute=aodatt,rc=localrc)
<           ext_bcoc=0.0
<           ext_bc=0.0
<           ext_oc=0.0
<           aod_bcoc=0.0
<           aod_bc=0.0
<           aod_oc=0.0
<           aod_dust=0.0
<           aod_seasalt=0.0
<           aod_sulf=0.0
<           do m=2,5
<             ext_bcoc=ext_bcoc+data%ext_3dg(:,:,:,m)
<             if(m<=3)then
<               ext_bc=ext_bc+data%ext_3dg(:,:,:,m)
<             else
<               ext_oc=ext_oc+data%ext_3dg(:,:,:,m)
<             endif
<           end do
<           ext_dust=0.0
<           ext_seasalt=0.0
< !         shoule be 6,10 ajl
< !         for gsi should be 6,10 since now have 5 dust bins and 6 is now dust1
< !         and not no3 which we don't have in model
< !         for gsi aod 6 is dust1 since have 1-5
<           do m=6,10
<             ext_dust=ext_dust+data%ext_3dg(:,:,:,m)
< !            write(6,*)'ext_dust',m,maxval(data%ext_3dg(:,:,:,m))
<           end do
<          ext_dust1=data%ext_3dg(:,:,:,6)
<          do m=11,14
<             ext_seasalt=ext_seasalt+data%ext_3dg(:,:,:,m)
< !            write(300+iam,*)'ext_3dg',m,maxval(data%ext_3dg(:,:,:,m))
<           end do
<           aod_dust1=0.0
<           do k=1,dims(3)
<             aod_bcoc(:,:)=aod_bcoc(:,:)+ext_bcoc(:,:,k)*dz(:,:,k)
<             aod_bc(:,:)=aod_bc(:,:)+ext_bc(:,:,k)*dz(:,:,k)
<             aod_oc(:,:)=aod_oc(:,:)+ext_oc(:,:,k)*dz(:,:,k)
<             aod_seasalt(:,:)=aod_seasalt(:,:)+ext_seasalt(:,:,k)*dz(:,:,k)
<             aod_dust(:,:)=aod_dust(:,:)+ext_dust(:,:,k)*dz(:,:,k)
<             aod_sulf(:,:)=aod_sulf(:,:)+data%ext_3d(:,:,k,1)*dz(:,:,k)
<             aod_tot(:,:)=aod_bcoc(:,:)+aod_seasalt(:,:)+aod_dust(:,:)+aod_sulf(:,:)
<             aod_dust1(:,:)=aod_dust1(:,:)+ext_dust1(:,:,k)*dz(:,:,k)
<           end do
< !          write(6,*)'aod_dust1',maxval(aod_dust1)
< !          write(6,*)'aod_dust',maxval(aod_dust)
< !          write(6,*)'maxvalaod',maxval(aod_tot),maxval(data%aodgsi)
<           ext_tot=ext_bcoc+ext_dust+ext_seasalt+data%ext_3dg(:,:,:,1)
<           call chem_io_writenc(trim(fileout),ext_bcoc,path=trim(config%emi_outname),de=de,time=itime, &
<           varname='ext_bcoc',units='1',attribute=aodatt,rc=localrc)
<           call chem_io_writenc(trim(fileout),ext_dust,path=trim(config%emi_outname),de=de,time=itime, &
<           varname='ext_dust',units='1',attribute=aodatt,rc=localrc)
<           call chem_io_writenc(trim(fileout),ext_seasalt,path=trim(config%emi_outname),de=de,time=itime, &
<           varname='ext_seas',units='1',attribute=aodatt,rc=localrc)
<           call chem_io_writenc(trim(fileout),ext_tot,path=trim(config%emi_outname),de=de,time=itime, &
<           varname='ext_tot',units='1',attribute=aodatt,rc=localrc)
<           call chem_io_writenc(trim(fileout),aod_bcoc,path=trim(config%emi_outname),de=de,time=itime, &
<           varname='aod_bcoc',units='1',attribute=aodatt,rc=localrc)
<           call chem_io_writenc(trim(fileout),aod_bc,path=trim(config%emi_outname),de=de,time=itime, &
<           varname='aod_bc',units='1',attribute=aodatt,rc=localrc)
<           call chem_io_writenc(trim(fileout),aod_oc,path=trim(config%emi_outname),de=de,time=itime, &
<           varname='aod_oc',units='1',attribute=aodatt,rc=localrc)
<           call chem_io_writenc(trim(fileout),aod_seasalt,path=trim(config%emi_outname),de=de,time=itime, &
<           varname='aodssalt',units='1',attribute=aodatt,rc=localrc)
<           call chem_io_writenc(trim(fileout),aod_dust,path=trim(config%emi_outname),de=de,time=itime, &
<           varname='aoddust',units='1',rc=localrc)
<           call chem_io_writenc(trim(fileout),aod_sulf,path=trim(config%emi_outname),de=de,time=itime, &
<           varname='aodsulf',units='1',attribute=aodatt,rc=localrc)
<         endif
<         if(allocated(ptropgsi))then
<           call chem_io_writenc(trim(fileout),ptropgsi,path=trim(config%emi_outname),de=de,time=itime, &
<           varname='ptrop',units='Pa',attribute='using gsi code to calc ptrop',rc=localrc)
<         endif
<         if(allocated(ztropgsi))then
<           call chem_io_writenc(trim(fileout),ptropgsi,path=trim(config%emi_outname),de=de,time=itime, &
<           varname='ztrop',units='m',attribute='using gsi code to calc ztrop',rc=localrc)
<         endif
<         if(allocated(data%aodg5))then
<           trace2dout=data%aodg5
<           call chem_io_writenc(trim(fileout),trace2dout,path=trim(config%emi_outname),de=de,time=itime, &
<           varname='aod',units='1',attribute=aodatt,rc=localrc)
< 
<         endif  
<    
<       if(iam==0)then
<          write(6,*)'nsolmax',nsolmax
<       endif
<       do m=1,nsolmax
< !        m=idaodgsi(mm)
<         units='ppv'
< !        traceout=tr3d(:,:,:,icheminputpt(m))
<         traceout=tr3d(:,:,:,idaodgsi(m))
< !       convert to raqms units
<         if(iam==0)then
<           write(6,*)m,'aodfcst cheminput',cheminput(m)
<         endif
<         if(cemaod(m)(1:2).eq.'bc'.or.cemaod(m)(1:3).eq.'oc1'.or. &
<           cemaod(m)(1:3).eq.'oc2'.or.                               &
<           cemaod(m)(1:3).eq.'dus'.or.cemaod(m)(1:3).eq.'sea'.or. &
< !          cemaod(m)(1:3).eq.'so2'.or.cemaod(m)(1:4).eq.'sulf')then
<           cemaod(m)(1:4).eq.'sulf')then
<           if( aerosol_ugpKg)then
<             units='ug/kg-dryair'
<             if(cemaod(m)(1:3).eq.'bc1')then
<                if(iam.eq.0)then
<                  write(6,*)'bc1',tcmw(idbc1),idbc1
<                endif
<             elseif(cemaod(m)(1:3).eq.'bc2')then
<                if(iam.eq.0)then
<                  write(6,*)'bc2',tcmw(idbc2),idbc2
<                endif
<             elseif(cemaod(m)(1:3).eq.'oc1')then
<                if(iam.eq.0)then
<                  write(6,*)'oc1',tcmw(idoc1),idoc1
<                endif
<             elseif(cemaod(m)(1:3).eq.'oc2')then
<                if(iam.eq.0)then
<                  write(6,*)'oc2',tcmw(idoc2),idoc2
<                endif
<             elseif(cemaod(m)(1:4).eq.'sulf')then
<                if(iam.eq.0)then
<                  write(6,*)'so4',mw_so4_aer
<                endif
< !              maybe should convert to ug/kg for ammoninum sulfate instead of so4
<             endif
<           else
< !           convert  from ppv to ugpkg ?
<             traceout=traceout*1.e-9
<             if(cemaod(m)(1:3).eq.'bc1')then
<                traceout=traceout*airmw/tcmw(idbc1)
<                if(iam.eq.0)then
<                  write(6,*)'bc1',tcmw(idbc1),idbc1
<                endif
<             elseif(cemaod(m)(1:3).eq.'bc2')then
<               traceout=traceout*airmw/tcmw(idbc2)
<                if(iam.eq.0)then
<                  write(6,*)'bc2',tcmw(idbc2),idbc2
<                endif
<             elseif(cemaod(m)(1:3).eq.'oc1')then
<               traceout=traceout*airmw/tcmw(idoc1)
<                if(iam.eq.0)then
<                  write(6,*)'oc1',tcmw(idoc1),idoc1
<                endif
<             elseif(cemaod(m)(1:3).eq.'oc2')then
<               traceout=traceout*airmw/tcmw(idoc2)
<                if(iam.eq.0)then
<                  write(6,*)'oc2',tcmw(idoc2),idoc2
<                endif
<             elseif(cemaod(m)(1:4).eq.'sulf')then
<               traceout=traceout*airmw/mw_so4_aer
<                if(iam.eq.0)then
<                  write(6,*)'so4',mw_so4_aer
<                endif
< !              maybe should convert to ug/kg for ammoninum sulfate instead of so4
<             else
<               units='kg kg-1'
<             endif
<           endif
< !          if(tile.eq.5)then
<             !write(300+iam,*)cemaod(m)(1:4),maxval(traceout),minval(traceout)
< !            flush(300+iam)
< !          endif
<         endif
< !        if(cemaod(m)(1:3).eq.'dms'.or.cemaod(m)(1:3).eq.'msa')then
< !       they changed so2 to ppm
<         if(cemaod(m)(1:3).eq.'dms'.or.cemaod(m)(1:3).eq.'msa'.or.cemaod(m)(1:3).eq.'so2')then
<           traceout=traceout*1.e-6
<         endif
< !        !if(iam.eq.0.and.tile.eq.2)then
< !          write(6,*)'m',m,'icemaodpt',cemaodlist(m),'cemaod',cemaod(m)
< !          call flush(6)
< !        endif
< !        write(200+iam,*)'m',m,cemaod(m),units
< !        call flush(200+iam)
<           call chem_io_writenc(trim(fileout),traceout,path=trim(config%emi_outname),de=de,time=itime, &
<           varname=cemaod(m),units=units,rc=localrc)
< !        write(6,*)'varname',trim(cemaod(m)),'rc',localrc
< !        call flush(6)
<         if (chem_rc_check(localrc, file=__FILE__, line=__LINE__, rc=rc)) return
<       end do
<         trace2dout=sfcp*100. ! make Pa
<         call chem_io_writenc(trim(fileout),trace2dout,path=trim(config%emi_outname),de=de,time=itime, &
<         varname='sfcp',units='Pa',rc=localrc)
<         call chem_io_writenc(trim(fileout),zsurf,path=trim(config%emi_outname),de=de,time=itime, &
<         varname='sfcz',units='m',rc=localrc)
<         call chem_io_writenc(trim(fileout),thgrd,path=trim(config%emi_outname),de=de,time=itime, &
<         varname='theta',units='K',rc=localrc)
<         call chem_io_writenc(trim(fileout),zlwigrd,path=trim(config%emi_outname),de=de,time=itime, &
<         varname='zlwigrd',units=' ',rc=localrc)
<         call chem_io_writenc(trim(fileout),tau6hr,path=trim(config%emi_outname),de=de,time=itime, &
<         varname='cot6hr',units=' ',rc=localrc)
<         navg=0
<         tau6hr=0.0
<       
<     end do
<      
<     return
<     end subroutine raqmschem_chem_write_aodfcst
Only in shr: raqmschem_iodata_mod.F90.07.29.2022
Only in shr: raqmschem_iodata_mod.F90.09.16.2022.save
Binary files shr/raqmschem_iodata_mod.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschem_iodata_mod.mod differ
diff -Bbw shr/raqmschem_io_mod.F90 /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschem_io_mod.F90
364d363
<     use raqmschem_pmgrid_mod, only : iam
368,375d366
< !    write(200+iam,*)'inquire_file_var'
< !    call flush(200+iam)
< !    write(200+iam,*)'path',trim(path)
< !    call flush(200+iam)
< !    write(200+iam,*)'datafile',trim(datafile)
< !    call flush(200+iam)
<   
<       
380,381d370
< !    else
< !      write(6,*)'did open',iam
915c904
<   subroutine chem_io_file_writenc(datafile, filename,buffer, lat,lon, time,varname,units,attribute,rc)
---
>   subroutine chem_io_file_writenc(datafile, filename,buffer, lat,lon, time,varname,units,rc)
925d913
<     character(len=*), optional, intent(in)  :: attribute
1018,1020d1005
<       if(present(attribute))then
<         ierru=nf90_put_att(ncid,varid,'attrib',trim(attribute))
<       endif
1026,1028d1010
<       if(present(attribute))then
<         ierru=nf90_put_att(ncid,varid,'attrib',trim(attribute))
<       endif
1101c1083
<   subroutine chem_io_file_writenc3d(datafile, filename,buffer, lat,lon,time,varname, units,attribute,rc)
---
>   subroutine chem_io_file_writenc3d(datafile, filename,buffer, lat,lon,time,varname, units,rc)
1112d1093
<     character (len=*), optional, intent(in) :: attribute
1242,1244d1222
<           if(present(attribute))then
<             ierr=nf90_put_att(ncid,varid,'attrib',trim(attribute))
<           endif
1321,1323d1298
<           if(present(attribute))then
<             ierr=nf90_put_att(ncid,varid,'attrib',trim(attribute))
<           endif
1470,1472d1444
<       if(present(attribute))then
<         ierr=nf90_put_att(ncid,varid,'attrib',trim(attribute))
<       endif
1564c1536
<   subroutine chem_io_file_writenc2d(datafile, filename,buffer, lat,lon,time,varname, units,attribute,rc)
---
>   subroutine chem_io_file_writenc2d(datafile, filename,buffer, lat,lon,time,varname, units,rc)
1575d1546
<     character (len=*), optional, intent(in) :: attribute
1662,1669d1632
<           if(present(attribute))then
< !            write(6,*)'put -att ',trim(attribute)
<             ierr=nf90_put_att(ncid,varid,'attrib',trim(attribute))
<             if (ierr /= nf90_noerr)then
<               write(6,*)'error put_att 1,trim(varname),trim(attribute)'
<               write(6,*)trim(nf90_strerror(ierr))
<             endif
<           endif
1730,1736d1692
<             if(present(attribute))then
<                ierr=nf90_put_att(ncid,varid,'attribute',trim(attribute))
<               if (ierr /= nf90_noerr)then
<                 write(6,*)'error put_att attribuet 2',trim(varname),trim(units)
<                 write(6,*)trim(nf90_strerror(ierr))
<               endif
<             endif
2367c2323
<   subroutine chem_io_write_2DR4(filename, farray, path, pos, de, time,varname,units,attribute,rc)
---
>   subroutine chem_io_write_2DR4(filename, farray, path, pos, de, time,varname,units,rc)
2378d2333
<     character(len=*),optional,  intent(in)  :: attribute
2477,2480d2431
<             if(present(attribute))then
<             call chem_io_file_writenc2d(datafile, filename,recvbuf,latbuf,lonbuf, &
<             time=time, varname=varname,units=units,attribute=attribute,rc=localrc)
<             else
2483d2433
<             endif
2755c2705
<   subroutine chem_io_writenc_2DR4(filename, farray, path, pos, de, time,varname,units,attribute,rc)
---
>   subroutine chem_io_writenc_2DR4(filename, farray, path, pos, de, time,varname,units,rc)
2767d2716
<     character(len=*),optional,  intent(in)  :: attribute
2891,2897d2839
<             if(present(attribute))then
< !              if(iam==0)then
< !                write(6,*)'chem_io_file_writenc2d attribute',trim(attribute)
< !              endif
<               call chem_io_file_writenc2d(datafile, filename,recvbuf,latbuf,lonbuf, &
<               time=time, varname=varname,units=units,attribute=attribute,rc=localrc)
<             else
2900d2841
<             endif
2930c2871
<   subroutine chem_io_writenc_3DR4(filename, farray, order, path, pos, de,time, varname,units,attribute,rc)
---
>   subroutine chem_io_writenc_3DR4(filename, farray, order, path, pos, de,time, varname,units,rc)
2942d2882
<     character(len=*),optional,  intent(in)  :: attribute
3062,3065d3001
<           if(present(attribute))then
<             call chem_io_file_writenc3d(datafile, filename,buf3d,latbuf,lonbuf,  time=time, varname=varname,  &
<             units=units,attribute=attribute,rc=localrc)
<           else
3067d3002
<           endif
Binary files shr/raqmschem_io_mod.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschem_io_mod.mod differ
Binary files shr/raqmschemlocaltype_mod.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschemlocaltype_mod.mod differ
Binary files shr/raqmschem_map_mod.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschem_map_mod.mod differ
diff -Bbw shr/raqmschem_model_mod.F90 /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschem_model_mod.F90
81c81
<     use raqmschem_pmgrid_mod, only : iam,cdateat,cdatestart
---
>     use raqmschem_pmgrid_mod, only : iam,cdateat
98c98
<          open(10,file='RUNDONE.'//trim(cdatestart),form='formatted')
---
>          open(10,file='RUNDONE.'//trim(cdateat),form='formatted')
100d99
<          call flush(10)
Binary files shr/raqmschem_model_mod.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschem_model_mod.mod differ
diff -Bbw shr/raqmschem_pmgrid_mod.F90 /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschem_pmgrid_mod.F90
8c8
< character *10 cdateat,cdatestart
---
> character *10 cdateat
21,22c21,22
< character *8,dimension(:),allocatable :: gsicem,gsivarr
< integer,dimension(:),allocatable,target :: loccem
---
> character *8,dimension(:),allocatable :: gsicem
> integer,dimension(:),allocatable :: loccem
27,37d26
<   type gsidatatype
<     integer ngsivar,nsecgsi
<     real*4,allocatable,dimension(:,:,:,:) :: gsiinc
<     integer,allocatable,dimension(:) :: loccem
<     character *8,allocatable,dimension(:) :: gsicem
<     character *8 :: gsivarr
<   end type
<   type(gsidatatype),allocatable,target :: gsiarray(:)
<   character *8 cemaod(15)
<   data cemaod/'sulf','bc1','bc2','oc1','oc2','dust1','dust2','dust3','dust4','dust5', &
<      'seas1','seas2','seas3','seas4','seas5'/
180c169
<   use raqmschem_species_mod,only : p_ox,idaodgsi
---
>   use raqmschem_species_mod,only : p_ox
184,187c173,174
<   integer numvar,is(30),ie(30),igot,num,i,n,nsecgsi(30),is2(30),ie2(30),igot2,num2
<   character *256 cinput,cinput2
<   logical :: first=.true.
<   save first
---
>   integer numvar,is(30),ie(30),igot,num,i
>   character *256 cinput
190,206d176
<   cinput2=' '
<   call getenv('GSISEC',cinput2)
<   igot2=0
<   if(cinput2/=' ')then
<     num2=30
<     call strip(cinput2,is2,ie2,num2,igot2)
<     do i=1,igot2
<       read(cinput2(is2(i):ie2(i)),*)nsecgsi(i)
<       if(first)then
<       if(iam==0)then
<       write(6,*)'nsecgsi',i,nsecgsi(i)
<       endif
<       first=.false.
<       endif
<     end do
<   endif
< 
215,217d184
<     if(.not.allocated(gsiarray))then
<       allocate(gsiarray(numgsicem))
<     endif
219c186
<       allocate (loccem(numgsicem),gsicem(numgsicem),gsivarr(numgsicem))
---
>       allocate (loccem(numgsicem),gsicem(numgsicem))
228d194
<       gsivarr(i)=cinput(is(i):ie(i))
233d198
<       gsiarray(i)%gsivarr=gsivarr(i)
235d199
<         allocate (gsiarray(i)%loccem(1),gsiarray(i)%gsicem(1))
237,264d200
<         gsiarray(i)%ngsivar=1
<         gsiarray(i)%loccem(1)=loccem(i)
<         gsiarray(i)%gsicem(1)=gsicem(i)
<         if(igot2>=i)then
<           gsiarray(i)%nsecgsi=nsecgsi(i)
<         elseif(igot2==1)then
<           gsiarray(i)%nsecgsi=nsecgsi(1)
<         else
<           gsiarray(i)%nsecgsi=-1
<         endif
<       elseif(gsicem(i).eq.'AOD')then
<         gsiarray(i)%ngsivar=15
<         allocate (gsiarray(i)%loccem(15),gsiarray(i)%gsicem(15))
<         do n=1,15
<           gsiarray(i)%loccem(n)=idaodgsi(n)
<           gsiarray(i)%gsicem(n)=cemaod(n)
< !          if(iam==0)then
< !            write(6,*)'gsicem',i,gsicem(i)
< !            write(6,*)'cem',n,cemaod(n),'loccem',idaodgsi(n)
< !          endif
<         end do
<         if(igot2>=i)then
<           gsiarray(i)%nsecgsi=nsecgsi(i)
<         elseif(igot2==1)then
<           gsiarray(i)%nsecgsi=nsecgsi(1)
<         else
<           gsiarray(i)%nsecgsi=-1
<         endif
266d201
<         allocate (gsiarray(i)%loccem(1),gsiarray(i)%gsicem(1))
268,281d202
<         gsiarray(i)%loccem(1)=loccem(i)
<         gsiarray(i)%ngsivar=1
<         gsiarray(i)%gsicem(1)=gsicem(i)
<         if(igot2>=i)then
<           gsiarray(i)%nsecgsi=nsecgsi(i)
<         elseif(igot2==1)then
<           gsiarray(i)%nsecgsi=nsecgsi(1)
<         else
< !          if(igot2==0)then
< !           write(6,*)'igot2 zero ',i,gsicem(i)
< !           call flush(6)
< !          endif
<           gsiarray(i)%nsecgsi=-1
<         endif
285,290d205
< !      if(iam==0)then
< !        write(6,*)'i',i,'gsicem',gsicem(i),'ngsivar',gsiarray(i)%ngsivar
< !        do n=1,gsiarray(i)%ngsivar
< !          write(6,*)'loccem',gsiarray(i)%loccem(n),'gsichem',gsiarray(i)%gsicem(n)
< !        end do
< !      endif
371,491d285
< ! SGI version of routine
< !
< !-----------------------------------------------------------------------
< subroutine rsearch(im,km1,ixz1,kxz1,z1,km2,ixz2,kxz2,z2,ixl2,kxl2,l2)
< !$$$  subprogram documentation block
< !                .      .    .                                       .
< ! subprogram:    rsearch     search for a surrounding real interval
< !   prgmmr: iredell          org: np23                date: 1998-05-01
< !
< ! abstract: This subprogram searches monotonic sequences of real numbers
< !   for intervals that surround another given search set of real numbers.
< !   The sequences may be monotonic in either direction; the real numbers
< !   may be single or double precision; the input sequences and sets
< !   and the output locations may be arbitrarily dimensioned.
< !
< ! program history log:
< !   1999-01-05  mark iredell
< !   2008-04-16  safford - rm unused vars
< !
< !   input argument list:
< !     im           integer number of sequences to search
< !     km1          integer number of points in each sequence
< !     ixz1         integer sequence skip number for z1
< !     kxz1         integer point skip number for z1
< !     z1           real (1+(im-1)*ixz1+(km1-1)*kxz1)
< !                  sequence values to search
< !                  (z1 must be monotonic in either direction)
< !     km2          integer number of points to search for
< !                  in each respective sequence
< !     ixz2         integer sequence skip number for z2
< !     kxz2         integer point skip number for z2
< !     z2           real (1+(im-1)*ixz2+(km2-1)*kxz2)
< !                  set of values to search for
< !                  (z2 need not be monotonic)
< !     ixl2         integer sequence skip number for l2
< !     kxl2         integer point skip number for l2
< !     
< !   output argument list:
< !     l2           real (1+(im-1)*ixl2+(km2-1)*kxl2)
< !                  interval locations of the set of values
< !                  (z2 will be between z1(l2) and z1(l2+1).)
< !
< ! remarks:
< !   If the array z1 is dimensioned (im,km1), then the skip numbers are
< !   ixz1=1 and kxz1=im; if it is dimensioned (km1,im), then the skip
< !   numbers are ixz1=km1 and kxz1=1; if it is dimensioned (im,jm,km1),
< !   then the skip numbers are ixz1=1 and kxz1=im*jm; etcetera.
< !   similar examples apply to the skip numbers for z2 and l2.
< !
< !   Returned values of 0 or km1 indicate that the given search value
< !   is outside the range of the sequence.
< !
< !   If a search value is identical to one of the sequence values
< !   then the location returned points to the identical value.
< !   If the sequence is not strictly monotonic and a search value is
< !   identical to more than one of the sequence values, then the
< !   location returned may point to any of the identical values.
< !
< !   To be exact, for each i from 1 to im and for each k from 1 to km2,
< !   z=z2(1+(i-1)*ixz2+(k-1)*kxz2) is the search value and
< !   l=l2(1+(i-1)*ixl2+(k-1)*kxl2) is the location returned.
< !   If l=0, then z is less than the start point z1(1+(i-1)*ixz1)
< !   for ascending sequences (or greater than for descending sequences).
< !   If l=km1, then z is greater than or equal to the end point
< !   z1(1+(i-1)*ixz1+(km1-1)*kxz1) for ascending sequences
< !   (or less than or equal to for descending sequences).
< !   otherwise z is between the values z1(1+(i-1)*ixz1+(l-1)*kxz1) and
< !   z1(1+(i-1)*ixz1+(l-0)*kxz1) and may equal the former.
< !
< ! attributes:
< !   language:  f90
< !   machine:   RS/6000 SP
< !
< !$$$ end documentation block
< 
<   implicit none
<  
<   integer,intent(in   ) :: im,km1,ixz1,kxz1,km2,ixz2,kxz2,ixl2,kxl2
<   real*4   ,intent(in   ) :: z1(1+(im-1)*ixz1+(km1-1)*kxz1)
<   real*4   ,intent(in   ) :: z2(1+(im-1)*ixz2+(km2-1)*kxz2)
<   integer,intent(  out) :: l2(1+(im-1)*ixl2+(km2-1)*kxl2)
< 
<   integer i,k2,l
<   real*4 z
< ! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
< ! Find the surrounding input interval for each output point.
<   do i=1,im
<      if(z1(1+(i-1)*ixz1)<=z1(1+(i-1)*ixz1+(km1-1)*kxz1)) then
< 
< !       Input coordinate is monotonically ascending.
<         do k2=1,km2
<            z=z2(1+(i-1)*ixz2+(k2-1)*kxz2)
<            l=0
<            do
<               
<               if(z<z1(1+(i-1)*ixz1+l*kxz1)) exit
<               l=l+1
<               if(l==km1) exit
<            enddo
<            l2(1+(i-1)*ixl2+(k2-1)*kxl2)=l
<         enddo
< 
<      else
< 
< !        write(200+iam,*)'descend'
< !    Input coordinate is monotonically descending.
<         do k2=1,km2
<            z=z2(1+(i-1)*ixz2+(k2-1)*kxz2)
<            l=0
<            do
< !              write(200+iam,*)'z',z,'k2',k2,'z1','l=',l,z1(1+(i-1)*ixz1+l*kxz1)
<               if(z>z1(1+(i-1)*ixz1+l*kxz1)) exit
<               l=l+1
<               if(l==km1) exit
<            enddo
<            l2(1+(i-1)*ixl2+(k2-1)*kxl2)=l
<         enddo
<      endif
< 
<   enddo
< end subroutine rsearch
Binary files shr/raqmschem_pmgrid_mod.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschem_pmgrid_mod.mod differ
Binary files shr/raqmschem_species_mod.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschem_species_mod.mod differ
Binary files shr/raqmschem_state_mod.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschem_state_mod.mod differ
Binary files shr/raqmschem_vars_mod.mod and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/raqmschem_vars_mod.mod differ
Common subdirectories: shr/shrkeep and /home/lenzen/FV3GFS-GSDCHEM.0.9.0.VIIRS.AOD/EMC_FV3GFS-GSDCHEM/RAQMSCHEM/src/chem/shr/shrkeep
