CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
#include <choosevan.h>
#include <options.h>
CCC   TEST RUNS 2008
CCC              DV_HOBR_ICE INCREASED BY A FACTOR OF 4
CCC   MOD HISTORY:
CCC
CCC   7/99       TROPOSPHERIC CHEMISTRY ENHANCEMENTS (NOx AND CO EMISSION,
CCC              SURFACE DEPOSITION, RAIN OUT PARAMETERIZATION,
CCC              HETEROGENEOUS CONVERSION OF NOX TO HNO3 IN THE TROPOSPHERE).
CCC              NO3, NO2, CH2O, CH3OOH, AND CO ARE INCLUDED AS
CCC              TRANSPORTED SPECIES.
CCC
CCC              HETEROGENEOUS REACTION RATE PARAMETERIZATION BASED ON
CCC              CODE FROM KEN CARSLAW, MODIFIED TO INCLUDE RECENT DATA
CCC              FROM HANSON.(HANSON JPC 1998)
CCC
CCC              RATE CONSTANTS FOR OH+NO2+M, OH+HNO3, AND NO2+O
CCC              HAVE BEEN CHANGED ACCORDING TO RECENT LITERATURE
CCC              (BROWN ET AL., CHEM.PHYS.LETT. 1999, JPC, 1999).
CCC              OTHER RATE DATA ARE FROM JPL_97-4.
CCC
CCC    12/99     PHOTOLYSIS DATA UPDATED. (TWO PATHWAYS FOR ClNO3 PHOTOLYSIS,
CCC              NEW QUANTUM YIELD FORMULATION FOR O(1D) PRODUCTION,
CCC              NEW X-SECTIONS FOR BrCl.
CCC     7/00     OX DEFINITION MODIFIED. NO BORROWING ROUTINE.
CCC
CCC     3/01     CORRECTIONS MADE IN SUBROUTINE DO_CHEM
CCC              (i) r(62) multiplied by density in the definition of pec1
CCC              (ii) sorcno included in the nightime NOy source (MURALI)
CCC
CCC     3/02     NMHC Chemistry (based on CB-Z Zaveri and Peters 1999) included
CCC              Changes from v10_beta_6 tagged with (JRO)
CCC     8/02     MODIFIED DO_CHEM FORMULATION TO AVOID OSCILLATIONS IN
CCC              IN NOX SPECIES  (BASED ON BOX MODEL CALCULATIONS) (MURALI)
CCC
CCC     8/03     RAINOUT AND SURFACE DRY DEPOSITION FOR ONIT INCLUDED
CCC              (DEPOSITION RATE FOR ONIT IS SET EQUAL THAT OF H2O2
CCC                REF.   BRASSEUR (MOZART)   JGR,1998) (MURALI)
CCC
CCC    10/03     ISOPN NOT CONSIDERED. REACTION 180 PRODUCES ONIT (MURALI)
CCC
CCC    12/03     MODIFICATIONS IN TOTPEROXY CALCULATIONS  (MURALI)
ccc
ccc    06/04     Enabled photolysis of isoprene-mechanism species and
ccc              standardized specification of j-values in driver code
ccc              (the subroutine that calls do_chem)  JAA
CCC    11/07     BROMINE AND CHLORINE SPECIE TENDENCIES ARE EVALUATED
CCC              USING EXPLICIT TIME INTEGRATION (REQUIRED FOR PROPER
CCC              PARTITIONING IN THE TROPOSPHERE)
CCC
CCC    01/08     TROPOSPHERIC HETEROGENEOUS REACTIONS, BROMINE
CCC              ACTIVATION FROM SEASALT AEROSOLS
CCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CC
	function chap(z,theta,h)
*******************************************************************************
c   routine to calculate the chapman function
c      author dave rusch.
c   variable definitions:
c	z	altitude of the point of interest (kilometers)
c	theta	angle for the point (radians)
c	angle	angle used in the calculations (radians)
c	h	scale height (centimeters)
c	scale	scale height (kilometers)
c	re	radius of the earth (kilometers)
*******************************************************************************
	data a1,a2,a3,a4/1.0606963,.55643831,1.0619896,1.7245609/
	data b1,b2/.56498823,.06651874/
	parameter(pi=3.141592654)
	parameter(re=6371.)
        real minimum
        parameter(minimum=1.e+10)
c   check the calling arguments for reasonableness
	if ((z .lt. 0.) .or. (h .lt. 0.) .or. 
     1	(abs(theta) .gt. pi)) then
	   print 501, z, theta, h
	   chap = 0.
	   return
	endif
c   otherwise calculate the value
	if (theta .eq. 0.) then
	   chap = 1.
	elseif (theta .gt. ((90. + sqrt(z)) * pi / 180.)) then
	   chap = minimum
	else
	   scale = h/1.0e5
	   if(abs(theta) .gt. pi/2.) then
	      angle=pi-abs(theta)
	      f = -1.
	      rp=(re+z)*sin(angle)
	      arg=(re+z-rp)/scale
	      if(arg .gt. 170.) then
	         chap = minimum
	         return
	      endif
	      temp = sqrt(2.*pi*rp/scale)*exp(arg)
	   else
	      f = 1.
	      angle = theta
	      temp = 0.
	   endif
	   c = sqrt(pi * (re + z) / (2. * scale))
	   y = c * cos(angle) / sqrt(pi)
	   if (y .lt. 8.) then
	      chap = temp + f * c * (a1 + a2 * y) / (a3 + y * (a4 + y))
	   else
	      chap = temp + f * c * b1 / (b2 + y)
	   endif
	endif
	return
501	format(5x,'***** error in arguments to chapman function',
     1	' *****'/4x,'z = ',f7.3,5x,'theta = ',f7.3,5x,
     2	'scale height = ',f12.1)
	end
c-----------------------------------------------------------------------

      block data constchemrates
c
#include <choosechem.h>

      include 'comm_defs_24t.chem'
      common /blk4_24/ r(ireac),hr(ihreac),phoj(iphot),dn(inum),
     1              zeta,pur,sad,prodloss(13)
c
C$OMP THREADPRIVATE (/blk4_24/)
c
c  temperature invariant rates
      data r(3) /2.2e-10/
      data r(25)/4.9e-11/
      data r(26)/6.7e-11/
      data r(30)/1.1e-10/
CCCmnn 0106  include 90% branching factor            data r(32)/1.5e-10/
      data r(32)/1.35e-10/
      data r(42)/1.7e-13/
      data r(58)/1.2e-11/
      data r(59)/2.3e-10/
      data r(63)/2.2e-11/
      data r(71)/1.5e-10/
      data r(74)/1.4e-10/
      data r(75)/2.3e-10/
      data r(83)/1.0e-11/
      data r(105)/1.1e-11/
      data r(106)/1.9e-10/
      data r(107)/7.4e-11/
c JRO nmhc additions
      data r(112)/2.5E-12/
      data r(118)/4.0E-12/
      data r(120)/4.0E-14/
c use new rate for c3h8+OH (temp dependent)
      data r(125)/8.1E-13/
      data r(126)/4.E-12/
      data r(127)/2.5E-12/
      data r(130)/4.0E-12/
      data r(131)/2.5E-12/
      data r(135)/4.0E-12/
      data r(136)/1.2E-12/
      data r(141)/1.7E-11/
      data r(143)/4.0E-12/
      data r(144)/4.0E-12/
      data r(154)/2.5E-12/
c      data r(158)/3.3E-11/
c      data r(159)/7.0E-18/
c      data r(160)/1.0E-15/
c      data r(161)/4.0E-12/
c      data r(162)/4.0E-12/
c      data r(163)/4.0E-12/
c JRO end            
c
c (PIP) set rxns 158-163 above to zero. ISOP rxns added below.
c       rxns 155-169 are now empty and available for additional rxns.
c JAA 20060328 Note we are now using r(155)-r(156) for nmhc/cl reactions
c JAA 20060328 Note we are now using r(157)-r(160) for explicit
c              isoprene peroxide reactions
C MNN 20080605 Note we are now using r(161)-r(162) for HCN, CH3CN
C              reactions with OH
#ifndef ISOPRENE_PEROX
      data r(158)/0./
      data r(159)/0./
      data r(160)/0./
#endif
cc      data r(161)/0./
cc      data r(162)/0./
      data r(163)/0./

c (PIP) isoprene additions
      data r(183)/6.19E-11/
      data r(186)/4.18E-18/
      data r(188)/1.0E-15/
      data r(205)/3.2E-11/
      data r(208)/4.0E-12/


      end
c-----------------------------------------------------------------------

      subroutine chem_rate(temp,dens,kdn)

#include <choosechem.h>

      include 'comm_defs_24t.chem'
      common /blk4_24/ r(ireac),hr(ihreac),phoj(iphot),dn(inum),
     1              zeta,pur,sad,prodloss(13)
      parameter (i3bod=17)
      dimension ni(i3bod),al(i3bod),ah(i3bod),en(i3bod),em(i3bod)
c
C$OMP THREADPRIVATE (/blk4_24/)
c

c  ALSO SEE "block data constchemrates"
c
c  reaction rates from jpl 97-4 evaluation
c  rate constants for the following reactions have been updated
c  (8) NO2+O,  (18) OH+NO2+M  (29) OH+HNO3 (JPL  00-3)

c  three-body rate data
CCCMNn 03/2002  reactions (18),(35) data from JPL 00-3
c JRO nmhc additions
c  Rxnx 117 and rxn 148 added to ni,al,en,ah,em
c PIP rxn 203 added to ni,al,en,ah,em (MPAC+NO2->MPAN)
c
CCCMNN 01/08  REACTIONS 85 AND 76 (TWO CHANNELS OF CO+OH) INCLUDED
CCCMNN        IN THE LIST OF TERMOLECULAR REACTIONS.
      data ni/11,18,19,24,34,35,57,64,67,77,60,100,117,148,203,85,76/
      data al/5.7, 240., 70., 9., 9., 200., 18., 62., 18., 45., 2.2,
     + 52., 9700., 10000., 9700.,1.5e19,0.59/
      data en/1.6, 3.1, 2.6, 1.5, 2., 4.4, 3.2, 1.0, 3.4, 3., 3.1,
     + 3.2, 5.6, 0.8, 5.6,-0.6,1.4/
      data ah/75., 17.0, 36., 30., 22., 1.4, 4.7, 26., 15., 1.8, 3.5,
     + 6.9, 9.3, 8.8, 9.3,2.1e21,1.1/
      data em/0., 2.1, 0.1, 0., 0., 0.7, 1.4, 0., 1.9, 1.7, 1.0,
     + 2.9, 1.5, 0.0, 1.5,-6.1,-1.3/
      save ni,al,en,ah,em
c
      expstr=exp(1./temp)
      tr=300./temp
c  three-body reactions with high and low pressure limits
      do i=1,i3bod
        id=ni(i)
        a0=al(i)*1.e-32
        ai=ah(i)*1.e-12
        rl=a0*tr**en(i)
        rh=ai*tr**em(i)
        rr=dens*rl/rh
        xp=1./(1.+(alog10(rr))**2)
        r(id)=(rl/(1.+rr))*(0.6)**xp
      end do
c  two-body and regular three-body t-dependent reactions
c  these rates are needed during nighttime and daytime
      r(12)=1.5e-12*expstr**(-880.)
      r(13)=3.0e-12*expstr**(-1500.)
      r(14)=1.2e-13*expstr**(-2450.)
      r(23)=1.5e-11*expstr**(170.)
      r(28)=2.0e-14*expstr**(-680.)
      r(33)=4.8e-13*expstr**(700.)
      r(36)=r(35)/(2.7e-27*expstr**(11000.))
      r(44)=2.3e-11*expstr**(-200.)
      r(52)=3.0e-12*expstr**(-500.)
      r(61)=r(60)/(1.3e-27*expstr**(8744.))
      r(62)=r(57)/(2.1e-27*expstr**(10900.))
      r(91)=3.5e-13*expstr**(-1370.)
      r(92)=3.0e-11*expstr**(-2450.)
      r(93)=1.0e-12*expstr**(-1590.)
      r(94)=1.7e-11*expstr**(-800.)
      r(96)=1.7e-11*expstr**(-800.)
      r(101)=9.5e-13*expstr**(550.)
      r(102)=2.3e-12*expstr**(260.)
      r(103)=4.1e-13*expstr**(290.)
      r(104)=1.5e-12*expstr**(230.)
c (JRO) nmhc additions
      r(114)=1.4E-12*expstr**(-1900.)
      r(119)=r(117)/(9.0E-29*expstr**(14000.))
      r(142)=1.4E-12*expstr**(-1900.)
      r(147)=1.2E-14*expstr**(-2630.)
      r(149)=4.2E-15*expstr**(-1800.)
      r(150)=8.9E-16*expstr**(-392.)
      r(153)=3.1E-13*expstr**(-1010.)
c PIP set rxn 156-157 rates to zero
c      r(156)=1.2E-14*expstr**(-2013.)
c      r(157)=3.0E-12*expstr**(-446.)
      r(156)=0.
#ifndef ISOPRENE_PEROX
      r(157)=0.
#endif
      r(170)=3.4E-13*expstr**(-1900.)        
c      r(170)=5.8E-16 
c  these rates need to be defined only in daytime
c (JRO) use all rates all the time for tropospheric night
c      if (kdn .gt. 0.) then
c
      r(1)= 3.2e-11*expstr**(70.)
c (JRO) use new n2+o1d rate constant
c      r(2)= 1.8e-11*expstr**(110.)
      r(2)=2.14e-11*expstr**(110.)

      r(4)= 6.0e-34*tr**2.3
      r(5)= 8.0e-12*expstr**(-2060.)
      r(6)= 2.2e-11*expstr**(120.)
      r(7)= 3.0e-11*expstr**(200.)
cmt     NEW RATE FOR NO2+O   FROM JPL 00-3
      r(8)=5.6e-12 * expstr**(180.)
      r(9)= 8.1e-11*expstr**(-30.)
      r(10)=3.4e-11*expstr**(-1600.)
      r(15)=1.4e-10*expstr**(-470.)
      r(16)=4.2e-12*expstr**(-240.)
      r(17)=4.8e-11*expstr**(250.)
      r(20)=3.5e-12*expstr**(250.)
      r(21)=2.9e-12*expstr**(-160.)
c (JRO) - note water vapor dependence for r(22) HO2+HO2 is added in do_chem
      r(22)=2.3e-13*expstr**(600.)+1.7e-33*dens*expstr**(1000.)

      r(27)=3.5e-37*tr**0.6
cmt     NEW RATE FOR OH+HNO3  FROM JPL 00-3
      tik = 2.70e-17*expstr**(2199.)
      tok = 6.50e-34*dens*expstr**(1335.)
      r(29) = 2.4e-14*expstr**(460.) + tik/(1.+tik/tok)
      r(31)=1.8e-12*expstr**(-1550.)
      r(39)=5.8e-12*expstr**(220.)
      r(40)=1.5e-11*expstr**(-3600.)
      r(41)=2.1e-11*expstr**(100.)
      r(45)=3.0e-11*expstr**(70.)
      r(46)=6.4e-12*expstr**(290.)
      r(47)=9.6e-12*expstr**(-1360.)
      r(48)=3.7e-11*expstr**(-2300.)
      r(49)=1.8e-11*expstr**(170.)
      r(50)=1.1e-11*expstr**(-980.)
      r(51)=6.5e-12*expstr**(135.)
      r(53)=2.6e-12*expstr**(-350.)
      r(54)=1.0e-11*expstr**(-3300.)
      r(55)=2.7e-33*tr**1.5
      r(56)=r(55)/(5.7e-25*expstr**(2500.))
      r(65)=1.4e-12*expstr**(-2000.)
      r(66)=2.45e-12*expstr**(-1775.)
      r(69)=2.9e-12*expstr**(-800.)
      r(70)=1.3e-12*expstr**(380.)
      r(72)=5.5e-12*expstr**(-2000.)
      r(78)=3.8e-13*expstr**(800.)
      r(79)=3.0e-12*expstr**(280.)
CCCMNN MOD 3/2002
      r(80)=7.4e-12*expstr**(270.)
CCCMNN 01/08  R(81) corrected (JPL 02-25)
CCC      r(81)=3.2e-13*expstr**(320.)
      r(81)=6.0e-13*expstr**(230.)
      r(82)=3.9e-14*expstr**(-900.)
      r(84)=3.5e-12*expstr**(140.)
CCCMNN 01/08  CO+OH two channels, treated like termolecular reactions
CCCMNN        r(85) and r(76)  JPL 06-02
CCCMNN      r(85)=1.5e-13*(1.+0.6*1.3626e-22*temp*dens)
      r(86)=4.0e-12*expstr**(-1400.)
      r(87)=3.8e-12*expstr**(200.)
      r(88)=5.8e-12*expstr**(-1500.)
      r(89)=1.2e-10*expstr**(-430.)
      r(90)=4.0e-12*expstr**(-1470.)
      r(95)=1.5e-11*expstr**(-600.)
      r(97)=1.9e-11*expstr**(230.)
      r(98)=3.4e-12*expstr**(540.)
      r(99)=8.8e-12*expstr**(260.)
c (JRO) replace 108 with 122
c      r(108)=2.5e-13*expstr**(190.)
      r(108)=0.0
CCCMNN 0206  C2H6 + Cl  is inserted as reaction 108
      r(108)=7.7e-11*expstr**(-90.)
c JRO nmhc additions
c note: r(122), r(123), r(129), r(133), r(138), r(146), and r(167)-r(169)
c are peroxy-peroxy and rates are defined in subroutine peroxyrate
c jro - use JPL value for c2h6+oh
c      r(109)=temp**2*1.5E-17*expstr**(-492.)
      r(109)=8.7E-12*expstr**(-1070.)
      r(110)=2.6E-12*expstr**(365.)
      r(111)=7.5E-13*expstr**(700.)
      r(113)=5.6E-12*expstr**(270.)
      r(115)=4.5E-13*expstr**(1000.)
      r(116)=5.3E-12*expstr**(360.)
      r(121)=r(87)
      r(122)=0.
      r(123)=0.
      r(128)=1.66E-13*expstr**(1300.)
      r(129)=0.
      r(132)=1.66E-13*expstr**(1300.)
      r(133)=0.      
      r(134)=temp**2*(5.3E-18)*expstr**(-230.)
      r(137)=1.2E-13*expstr**(1300.)
      r(138)=0.      
      r(139)=r(87)
      r(140)=1.6E-11*expstr**(-540.)
      r(145)=1.66E-13*expstr**(1300.)
      r(146)=0.
      r(151)=5.8E-12*expstr**(478.)
      r(152)=2.9E-11*expstr**(255.)
c PIP set rxns to zero
c      r(155)=2.55E-11*expstr**(409.)
c      r(164)=1.66E-13*expstr**(1300.)
c      r(165)=1.66E-13*expstr**(1300.)
c      r(166)=1.66E-13*expstr**(1300.)
      r(155)=0.
CCCMNN 20080605  HCN+OH  and CH3CN+OH
      r(161) = 1.2e-13*expstr**(-400.)
      r(162) = 7.8e-13*expstr**(-1050.)
      r(164)=0.
      r(165)=0.
      r(166)=0.
      r(167)=0.
      r(168)=0.
      r(169)=0.      
      r(171)=1.8E-11*expstr**(-390.)
      r(172)=3.5E-12
c (JRO) turn off NO3 thermal decomposition
c      r(173)=2.5E6*expstr**(-6100.)
      r(173)=0.0
      r(174)=4.0E-19
      r(175)=2.2E-11
      r(176)=2.0E-21
      r(177)=1.5E-11
c PIP isoprene rxn rates
      r(178)=2.55E-11*expstr**(409.)
      r(179)=7.86E-15*expstr**(-1913.)
      r(180)=3.03E-12*expstr**(-446.)
      r(181)=7.73E-12*expstr**(379.)
      r(182)=2.67E-12*expstr**(612.)
      r(184)=1.36E-15*expstr**(-2112.)
      r(185)=6.9E-16*expstr**(-1521.)
      r(187)=1.50E-12*expstr**(-1727.)
      r(189)=4.2E-12*expstr**(180.)
      r(190)=4.2E-12*expstr**(180.)
      r(191)=4.2E-12*expstr**(180.)
      r(192)=4.2E-12*expstr**(180.)
      r(193)=4.2E-12*expstr**(180.)
      r(194)=1.7E-13*expstr**(1300.)
      r(195)=1.7E-13*expstr**(1300.)
      r(196)=1.7E-13*expstr**(1300.)
      r(197)=1.7E-13*expstr**(1300.)
      r(198)=1.7E-13*expstr**(1300.)
c PIP rxns 199-202, 209-210 are defined in peroxyrate      
      r(199)=0.
      r(200)=0.
      r(201)=0.
      r(202)=0.
      r(204)=r(203)/(9.0E-29*expstr**(14000.))
      r(206)=5.3E-12*expstr**(360.)
      r(207)=4.5E-13*expstr**(1000.)
      r(209)=0.
      r(210)=0.
      

c jro
c use new rate for c3h8 +OH (temp dependent)
      r(211)=6.3E-12*expstr**(-1050)+6.3E-12*expstr**(-580)
      r(211)=r(211)/3.
c methanol oxidation
      r(212)=6.7E-12*expstr**(-600.)
     
c po2-n+no
       r(213)=8.7E-12
c po2-i+no
       r(214)=8.5E-12
       r(215)=7.5E-13*expstr**(700.)
       r(216)=r(215)

c JRO!!! Need to add these two to totalperoxy parameteriztions
c       r(217)=3.E-13
c       r(218)=1.6E-12*expstr**(-2200.)
        r(217)=0.
        r(218)=0.
        r(219)=2.5E-12
        r(220)=2.5E-12
        r(221)=1.1E-12
c (JRO) 
#ifdef ISOPRENE_PEROX
CMNN 0106   ADDITIONAL REACTIONS FOR TREATING PEROXIDES FROM
CCCCCC           ISOPRENE.
C
        r(157)=3.8e-12*expstr**200.
        r(158)=r(157)
        r(159)=r(157)
        r(160)=r(157)
#endif

CCCMNN (0306) PROP_PAR+Cl REACTION RATE CONSTANTS SAVED IN R(155),R(156)
CCC           RATE CONSTANT DATA FROM IUPAC (JPL DATABASE DOESN'T HAVE
CCC           THE BRANCHING RATIO FOR THE 2 PATHS)
       r(155) = 8.26e-11*expstr**(-90.)/3.0      ! prop_par+cl --> po2_n
       r(156) = 6.02e-11*expstr**(75.)/3.0       ! prop_par+cl --> po2_i
cc

c      endif
      return
      end
c-----------------------------------------------------------------------
#ifdef DOCHEMJ
C     kat=1 is sfc, 35 is top of model
      subroutine do_chem(temp,dens,rlat,kdn,ktf,ksf,ierr,iat,jat,kat)
#else
      subroutine do_chem(temp,dens,rlat,kdn,ktf,ksf,ierr)
#endif

#include <choosechem.h>
      use raqmschem_pmgrid_mod, only : iatchem,jatchem,katchem
      use chem_types_mod, only : CHEM_KIND_R8
!      USE mo_ssalt, ONLY: ssaltden, ssaltreff
!      USE mo_tracer, ONLY: tcmw
!      USE mo_raqms_gocart_vardef, ONLY: idss1
      use raqmschem_pmgrid_mod,only : iam,iprn,jprn,kprn,ibeg,tile,nstepat
#ifdef DOCHEMJ
!      use ijprn
#endif
      use raqmschemcomm_mod, only : sorccod5025,kd50,kd25,xcod50,xcod25
      use raqmschemcomm_mod, only : sorcbbcod5025,xbbcod50,xbbcod25,xgrid,ygrid

      include 'comm_defs_24t.chem'
      include 'combined_model_logic'
#ifdef DOCHEMJ
      integer iat,jat,kat
#endif

c  timstep is time step (sec)
c  tfac is number of timesteps over which tendencies are applied 
c    (ie, tfac=2 for forward-euler at 2-dt; tfac=1 for forward-euler at 1-dt)
      common/dtchem/ timstep,tfac
c  timestep factor defining equilibrium threshold for "fast" species
c (JRO) threshhold for qssa/pce lower for tropospheric chem
       parameter(eqfac=1.0)
       parameter(eqfac_trop=0.1)      
       parameter(eqfac_fam=2.5)

       logical flgnoxchem
      real(CHEM_KIND_R8) :: ox,xnoy,hno3,cly,xn2o5,h2o2,hcl,clno3,oclo,xn2o,
     1              f11,f12,ccl4,ch3cl,xmtcfm,bry,ch3br,h1301,h1211,
#ifdef ISOPRENE_PEROX
     2              rip,prdp,xmrp,ch4,hno4,hocl,vrp,
#else
     2              hf,cfclo,cf2o,ch4,hno4,hocl,h2otest,
#endif
     2              xno3,xno2,ch2o,ch3ooh,co,hbr,brno3,hobr,brcl,cl2,
     3              xnat,xice,chem_tend,sednat_in,sedice_in
c (JRO) add new common block for nmhc transported species
      real(CHEM_KIND_R8) :: c2h6,ald2,ethooh,pan,par,xonit,
     5              aone,rooh,xmgly,eth,xolet,xolei,xisop,
     6              xisoprd,prop_par,ch3oh,xmvk,xmacr,xmpan
      common /blk2_24/ ox,xnoy,hno3,cly,xn2o5,h2o2,hcl,clno3,oclo,xn2o,
     1              f11,f12,ccl4,ch3cl,xmtcfm,bry,ch3br,h1301,h1211,
#ifdef ISOPRENE_PEROX
     2              rip,prdp,xmrp,ch4,hno4,hocl,vrp,
#else
     2              hf,cfclo,cf2o,ch4,hno4,hocl,h2otest,
#endif
     2              xno3,xno2,ch2o,ch3ooh,co,hbr,brno3,hobr,brcl,cl2,
     3              xnat,xice,chem_tend(ikmult),sednat_in,sedice_in
c (JRO) add new common block for nmhc transported species
      common/blk_nmhc/c2h6,ald2,ethooh,pan,par,xonit,
     5              aone,rooh,xmgly,eth,xolet,xolei,xisop,
     6              xisoprd,prop_par,ch3oh,xmvk,xmacr,xmpan
      common/blk_nmhc2/hcn,ch3cn
#if (defined DO_AEROSOL || defined DO_AEROSOL_DEFINE)
      common/blk_aero0d/so2,so4aer,dms,xmsa,xno3aer,xnh3,xnh4aer,
     1      bc1,bc2,oc1,oc2,du1,du2,du3,du4,du5,ss1,ss2,ss3,ss4,ss5
      common/srfsnkaero/depso2,depso4aer,depdms,depxmsa,
     &      depxno3aer,depxnh3,depxnh4aer,depbc1,depbc2,
     &      depoc1,depoc2,depdu1,depdu2,depdu3,depdu4,
     &      depdu5,depss1,depss2,depss3,depss4,depss5,
     &      sorcso2,sorcso4aer,sorcdms,sorcxmsa,
     &      sorcxno3aer,sorcxnh3,sorcxnh4aer,sorcbc1,sorcbc2,
     &      sorcoc1,sorcoc2,sorcdu1,sorcdu2,sorcdu3,sorcdu4,
     &      sorcdu5,sorcss1,sorcss2,sorcss3,sorcss4,sorcss5
CCCMNN0508    include dv_hobr_ice (MNN0209) br_ice_fctr
!     &      ,dv_hobr_ice,br_ice_fctr
      common/aerodat/r_su,r_ssa,r_ssc,v_su,v_ssa,v_ssc,
     &      sa_su,sa_ssa,sa_ssc
#else
#ifdef DO_AEROSOL_BR2
      common/blk_aero0d/ss5
#endif
#endif
      common/srfbr/dv_hobr_ice,br_ice_fctr
      common /blk4_24/ r(ireac),hr(ihreac),phoj(iphot),dn(inum),
     1              zeta,pur,sad,prodloss(13)
      common /chembc/ xn2o_s,f11_s,f12_s,ccl4_s,ch3cl_s,xmtcfm_s,
c     1                ch3br_s,h1301_s,h1211_s,ch4_s
     1                ch3br_s,h1301_s,h1211_s
c Add block chembc_var to pass surface concentrations of species
c  that are not held constant, eg CH4 is now f(lat,time) JAA 200601
      common /chembc_var/ch4_s
     
c (JRO) add some arrays for convergence checking (more than just OH)
c these 40 species were selected for tropospheric chemistry
c  this array can easily be altered once we determine which
c  species are most important for convergence  
c     dimension old(40),ck(40),ctemp(3)
c      integer ckspid(40)
c(PIP) added more species
      dimension old(51),ck(51),ctemp(3)
      integer ckspid(51)       
      data ckspid/1,3,4,5,6,7,8,9,10,12,19,20,21,27,31,32,33,
     &  39,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,
     & 70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86/
      save ckspid

c  maximum number of iterations for oh solution
      data iter_max/70/
c  sedimentation rate for type I PSCs (75 days)
      data rfall_1/1.54e-7/
c  sedimentation rate for type II PSCs (2 days)
      data rfall_2/5.79e-6/
      save iter_max,rfall_1,rfall_2
c
cmt   surface deposition and emission source
cmt   rainout rate, tropospheric het.rate
c (JRO) additional species in srfsnk common block for nmhc species
c (JRO), also, aldehydes (Ch3ooh,ald2) have separate
c rainout rate (drip_ch3ooh) so that it can be increased in
c the boundary layer if desired
      real(CHEM_KIND_R8) :: depo3,dephno3,deph2o2,depch2o,
     1       depch3ooh,depno2,depco,sorcno,sorcco,drip,trht
c (JRO) additional species in srfsnk common block for nmhc species
     2       ,sorcc2h6,sorcpar,sorcaone,sorceth,
     3       sorcolet,sorcolei,sorcisop,sorcch2o,sorcald2,
     4       depald2,depethooh,deprooh,depmgly,drip_ch3ooh,
     5       sorcproppar,sorcch3oh
c Additional variables for biomass burning tracers
     6       ,dephcn,depch3cn,sorchcn,sorcch3cn
      common /srfsnk/ depo3,dephno3,deph2o2,depch2o,
     1       depch3ooh,depno2,depco,sorcno,sorcco,drip,trht
     2       ,sorcc2h6,sorcpar,sorcaone,sorceth,
     +       sorcolet,sorcolei,sorcisop,sorcch2o,sorcald2,
     3       depald2,depethooh,deprooh,depmgly,drip_ch3ooh,
     6       sorcproppar,sorcch3oh
c Additional variables for biomass burning tracers
     6       ,dephcn,depch3cn,sorchcn,sorcch3cn

      common/pceinfo/timinc,tdenom,save_clo,save_bro,
     +       ipce_clno3,ipce_hocl,ipce_brno3,ipce_hobr,rbrobr
     +       ,equil_fam
c
CCCMNN 01/08
      parameter(XMW_SU=96.6,XMW_N2O5=108.,XMW_BrNO3=141.)
      parameter(XMW_HOBr=96.,XMW_Br=79.)
      parameter(XMW_DRYAIR=28.964)
CCC      parameter(rho_su=1.7,r_su=1.56e-5,avg_no=6.023e23)
      parameter(rho_su=1.7,avg_no=6.023e23)

      common/brx_com/pjbr2,rbr_ss,fr_hbrss,tau_ss,dvh,fctr_br
c      common /prodlossnew/prodlossn(3),prodlossf(1)
c     new code ajl 10/29/2013 make individual prodloss terms rather than put all in prodloss array
      real noyprodloss(3),n2oprodloss(3),oxprodloss(9),ch4prodloss(3),coprodloss(3)
      common /prodlossnew/oxprodloss,coprodloss,noyprodloss,ch4prodloss,n2oprodloss
c     end new code ajl 10/29/2013 
c      common /prodlossnew/prodlossn(3),prodlossch4(3),prodlossn2o(3)
      real oxtend,cotend,noytend,ch4tend,n2otend
      common /prodlosstend/oxtend,cotend,noytend,ch4tend,n2otend

C$OMP THREADPRIVATE (/blk2_24/)
C$OMP THREADPRIVATE (/blk_nmhc/)
C$OMP THREADPRIVATE (/blk4_24/)
C$OMP THREADPRIVATE (/srfsnk/)
C$OMP THREADPRIVATE (/pceinfo/)
C$OMP THREADPRIVATE (/chembc_var/)
C$OMP THREADPRIVATE (/blk_nmhc2/)
#ifdef DO_AEROSOL
C$OMP THREADPRIVATE (/blk_aero0d/)
C$OMP THREADPRIVATE (/srfsnkaero/)
C$OMP THREADPRIVATE (/aerodat/)
#endif
C$OMP TRHEADPRIVATE (/srfbr/)
C$OMP THREADPRIVATE (/brx_com/)
c
c      prodlossn=0.0
!      write(6,*)'top dochem',dv_hobr_ice,br_ice_fctr,'ss5',ss5
!      call flush(6)
!      write(200+iam,*)'top dochem',dv_hobr_ice,br_ice_fctr,'ss5',ss5
!      call flush(200+iam)
#ifdef DO_AEROSOL_BR2
!      write(200+iam,*)'do aerosol_bR2'
#endif
      oxprodloss=0.0
      ch4prodloss=0.0
      noyprodloss=0.0
c     fix ajl 3/5/3016 had typo no2prodloss
      n2oprodloss=0.0
      coprodloss=0.0
c     end fix ajl 3/5/3016
c      prodlossf=0.0

c Parameters for pseudo-exact tendency calculation
      timinc = tfac*timstep
!      if(iam.eq.0)then
!         write(6,*)'timinc',timinc,kind(timinc),'tfac',tfac,kind(tfac),
!     *   timestep,kind(timestep)
!      endif
      tdenom = 1./timinc
      equil = eqfac*timinc
      if (ktf.eq.1)equil=eqfac_trop*timinc
      equili = 1./equil
      equil_fam = eqfac_fam*timinc
!      write(6,*)'equil_fam',equil_fam,'eqfac',eqfac_fam,'timinc',timinc,'tfac',tfac,'timstep',timstep
!      call flush(6)
      equil_fami = 1./equil_fam
      
c  get nox, clx and brx values; bound each member by family total
!      write(200+iam,*)'xnoy',xnoy,cly,bry,clno3,brno3,bry
!      call flush(200+iam)
!      write(200+iam,*)'dv_hobr_ice',dv_hobr_ice,'ss5',ss5
!      !call flush(200+iam)
      clno3=min(clno3,xnoy)
      clno3=min(clno3,cly)
      brno3=min(brno3,xnoy)
      brno3=min(brno3,bry)
c  br2 is actually carried in ss5
      br2  =min(ss5,0.5*bry)
CCCMNN0508
CCCMNN      dvh = dv_hobr_ice
CCCMNN0708     INCREASE DV_HOBR_ICE BY A FACTOR OF 4
C
      dvh = dv_hobr_ice * 4.0
CCCMNN0209
      fctr_br = br_ice_fctr
c
CCCMNN10/03   INITIALIZE FAC_NO3
!      write(200+iam,*)'now no3'
!      call flush(200+iam)
      fac_no3 = 1.0
CCC
      fracn = 1.0
      flgnoxchem = .false.
!#ifdef DOCHEMJ
!      if(iat.eq.1.and.jat.eq.1)then
!        write(6,*)'kat',kat,'kdn',kdn,'ktf',ktf
!      endif
!#endif
#ifdef DIAGHTAP
#ifdef DOCHEMJ
      if(iat.eq.120.and.jat.eq.130)then
        write(6,*)'kat',kat,'kdn',kdn,'ktf',ktf
      endif
#endif
#endif
!      write(200+iam,*)'kdn',kdn
!      call flush(200+iam)
#ifdef DIAGFV3
      if(iat.eq.1.and.jat.eq.1.and.tile.eq.1)then
        write(6,*)'kdn top',kdn,'lon',xgrid(iat-ibeg+1,jat),ygrid(iat-ibeg+1,jat)
        call flush(6)
      endif
#endif
      if (kdn .gt. 0.) then
c     DAY
        brx_tmp=bry-hbr-brno3-hobr
!       if(iprn>0.and.kprn.eq.1)then
!         write(300+iam,*)'ajlaabry ',bry,'hbr',hbr,'brno3',brno3,'hobr',hobr
!         call flush(300+iam)
!       endif
        if (brx_tmp .lt. 0.) then
          hbr=min(hbr,bry)
          hobr=min(hobr,bry)
          frac=bry/(hbr+brno3+hobr)
          hbr=hbr*frac
          brno3=brno3*frac
          hobr=hobr*frac
          brx_tmp=0.
        endif
c
        clx_tmp=cly-hcl-clno3-hocl
        if (clx_tmp .lt. 0.) then
          hcl=min(hcl,cly)
          hocl=min(hocl,cly)
          frac=cly/(hcl+clno3+hocl)
          hcl=hcl*frac
          clno3=clno3*frac
          hocl=hocl*frac
          clx_tmp=0.
        endif
c
c (JRO) include pan and xonit in noy family
c (PIP) include mpan in noy family
c   DAYTIME chemistry: xnox=n+no+no2+no3 
c    (others are added to fast xnox pool later, if they are in pce)
#ifdef DIAGCHEM
       if(iprn>0)then
        write(300+iam,*)'xnoy',xnoy,'hno3',hno3,'xn2o5',xn2o5
        write(300+iam,*)'clno3',clno3,'hno4',hno4,'pan',pan
        write(300+iam,*)'pan',pan,'xonit',xonit,'xmpan',xmpan
        call flush(300+iam)
       endif
#endif
        xnox_tmp=xnoy-hno3-2.*xn2o5-clno3-hno4-brno3-pan-xonit-xmpan
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'xnox_tmpa',xnox_tmp,'xnoy',xnoy,'xn2o5',xn2o5
        write(6,*)'clno3',clno3,'hno4',hno4,'xno3',xno3
        write(6,*)'xno2',xno2,'brno3',brno3,'pan',pan
        write(6,*)'xonit',xonit,'xmpan',xmpan
      endif
#endif
#endif
        if (xnox_tmp .lt. 0.) then
          hno3=min(hno3,xnoy)
          xn2o5=min(xn2o5,xnoy/2.)
          hno4=min(hno4,xnoy)
          pan=min(pan,xnoy)
	  xonit=min(xonit,xnoy)
          xmpan=min(xmpan,xnoy)
          frac=(xnoy-clno3-brno3)/(hno3+2.*xn2o5+hno4+pan+xonit+xmpan)  
          hno3=hno3*frac
          xn2o5=xn2o5*frac
          hno4=hno4*frac
          pan=pan*frac
          xonit=xonit*frac
          xmpan=xmpan*frac
          xnox_tmp=0.
CCCCC       save frac for scaling ox
          fracn = frac
        endif
c
      else
c     NIGHT
        brcl=min(brcl,bry)
        brcl=min(brcl,cly)
        brx_tmp=bry-hbr-brno3-hobr-brcl-2.0*br2
        if (brx_tmp .lt. 0.) then
          brno3=min(brno3,bry)
          hbr=min(hbr,bry)
          hobr=min(hobr,bry)
          br2=min(br2,0.5*bry)
          frac=bry/(hbr+brno3+hobr+brcl+2.0*br2)
          hbr=hbr*frac
          brno3=brno3*frac
          hobr=hobr*frac
          brcl=brcl*frac
          br2=br2*frac
          brx_tmp=0.
        endif
c
        clx_tmp=cly-hcl-clno3-hocl-oclo-brcl-2.*cl2
        if (clx_tmp .lt. 0.) then
          hcl=min(hcl,cly)
          hocl=min(hocl,cly)
          oclo=min(oclo,cly)
          cl2=min(cl2,cly/2.)
          frac=(cly-brcl)/(hcl+clno3+hocl+oclo+2.*cl2)
          hcl=hcl*frac
          clno3=clno3*frac
          hocl=hocl*frac
          oclo=oclo*frac
          cl2=cl2*frac
          clx_tmp=0.
        endif
c
c (JRO) include pan and xonit in noy
c   Night chemistry: nox=no (all other species removed)
        xnox_tmp=xnoy-hno3-2.*xn2o5-clno3-hno4-xno3-xno2-brno3
     1           -pan-xonit-xmpan
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'xnox_tmp',xnox_tmp,'xnoy',xnoy,'xn2o5',xn2o5
        write(6,*)'clno3',clno3,'hno4',hno4,'xno3',xno3
        write(6,*)'xno2',xno2,'brno3',brno3,'pan',pan
        write(6,*)'xonit',xonit,'xmpan',xmpan
      endif
#endif
#endif
        if (xnox_tmp .lt. 0.) then
          hno3=min(hno3,xnoy)
          xn2o5=min(xn2o5,xnoy/2.)
          hno4=min(hno4,xnoy)
          xno3=min(xno3,xnoy)
          xno2=min(xno2,xnoy)
          pan=min(pan,xnoy)
          xonit=min(xonit,xnoy)
          xmpan=min(xmpan,xnoy)
          frac=(xnoy-clno3-brno3)/(hno3+2.*xn2o5+hno4+xno3+xno2
     1      +pan+xonit+xmpan)
          hno3=hno3*frac
          xn2o5=xn2o5*frac
          hno4=hno4*frac
          xno3=xno3*frac
          xno2=xno2*frac
          pan=pan*frac
          xonit=xonit*frac
          xmpan=xmpan*frac
          xnox_tmp=0.
CCC          ***  save frac for rescaling ox
          fracn = frac
        endif
c
      endif
!      write(200+iam,*)'hno3',hno3
!      call flush(200+iam)
      hno3=max(hno3,1.)
      xn2o5=max(xn2o5,1.)
      hno4=max(hno4,1.)
      xno3=max(xno3,1.)
      xno2=max(xno2,1.)
      pan=max(pan,1.)
      xonit=max(xonit,1.)
      xmpan=max(xmpan,1.)

      hcl=max(hcl,1.)
      clno3=max(clno3,1.)
      hocl=max(hocl,1.)
      oclo=max(oclo,1.)
      cl2=max(cl2,1.)
      hbr=max(hbr,1.)
      brno3=max(brno3,1.)
      hobr=max(hobr,1.)
      brcl=max(brcl,1.)
      br2=max(br2,1.)
      
CCCCMNN  0702   CHECK IF OXMOD > HNO3+NO2+2*NO3+3*N2O5+HNO4+PAN; IF NOT
CCCC            SET OXMOD = (HNO3+NO2+2*NO3+3*N2O5+HNO4+PAN)*1.001
c (PIP) add mpan to oxmod
        xtmp =hno3+xno2+2.0*xno3+3.*xn2o5+hno4+pan+xmpan
CCCC     scale ox to reflect changes in xtmp (only if fracn > 0.)
        if (fracn .gt. 0.) ox = ox + xtmp*(1.0 - 1.0/fracn)
        if (ox .le. xtmp) ox = 1.001 * xtmp
CCCC
c  initialize and define some species
      saveh2o=dn(13)
      saveh2=dn(36)
c specify acetone from climatology
      saveacet=dn(64)
c specify methanol from climatology
      savemthnl=dn(84)
CCCMNN1003   Initalize rnno,rnono2, and totperoxy
      rnno = 0.0
      rnono2 = 0.0
      totperoxy = 0.0
CCCMNN
      do ich=1,inum
        dn(ich)=0.
      end do
      dn(5)=hno3
      dn(8)=h2o2
      dn(11)=xn2o
      dn(12)=xn2o5
      dn(13)=saveh2o
      dn(14)=hcl
!     if(isnan(hcl))then
!       write(6,*)'hcl',hcl,iat,jat,kat
!       call flush(6)
!     endif
      dn(15)=f12
      dn(16)=f11
      dn(17)=clno3
      dn(18)=ch4
      dn(20)=co
      dn(22)=ccl4
      dn(23)=ch3cl
      dn(29)=cl2
      dn(36)=saveh2
      dn(37)=xmtcfm
      dn(38)=hocl
      dn(39)=hno4
      dn(41)=oclo
      dn(43)=brcl
      dn(45)=hbr
      dn(46)=hobr
      dn(47)=brno3
      dn(48)=ch3br
      dn(49)=h1301
      dn(50)=h1211
#ifndef ISOPRENE_PEROX
      dn(51)=hf
      dn(52)=cfclo
      dn(53)=cf2o
#endif
      xo2=0.209476*dens
      xn2=0.78084*dens
      dn(35)=xo2

c Note that correction for nighttime NO source and subsequent
c   O3 titration is done later in the code:
      dn(4)=xno2
      tnitno=0.

      dn(7)=xno3
      dn(19)=ch2o
      dn(21)=ch3ooh

c (JRO) nmhc species
      dn(54)=c2h6
      dn(56)=ald2
      dn(57)=ethooh
      dn(59)=pan
      dn(60)=par
      dn(62)=xonit
c specify acetone from climatology
      dn(64)=saveacet
      dn(65)=rooh
      dn(67)=xmgly
      dn(69)=eth
      dn(70)=xolet
      dn(71)=xolei
c add isoprene terms
      dn(72)=xisop
      dn(74)=xmacr
      dn(75)=xmvk
      dn(76)=xisoprd
      dn(82)=xmpan
      dn(83)=prop_par
      dn(84)=savemthnl
#ifdef ISOPRENE_PEROX
CMNN 0106
      dn(88) = rip
      dn(89) = prdp
      dn(90) = xmrp
      dn(91) = vrp
#endif
CCCMNN 01/08
!      write(200+iam,*)'set dn92 br2',br2
!      call flush(200+iam)
      dn(92)=br2
!     do kk=1,92
!       if(iprn>0)then
!         write(250+iam,*)kk,'dn',dn(kk)
!         call flush(250+iam)
!       endif
!       if(isnan(dn(kk)))then
!           write(6,*)'dn ',kk,'NAN'
!           call flush(6)
!       endif
!     end do
#ifdef DIAGCHEM
      if(iprn>0)then
        write(300+iam,*)'katchem',katchem,'nstepat',nstepat
        call flush(300+iam)
        do kk=1,92
          write(300+iam,*)kk,'dn',dn(kk)
          call flush(300+iam)
        end do
      endif
#endif
 
c (JRO) Do some photolysis rate equivalences here for troposphere
      pjhno4a=.667*phoj(27)
      pjhno4b=.333*phoj(27)
CCCMNN 01/08 Initialize parameters for bromine source from seasalt
      pjbr2 = 2.0e-2
CCCMNN 01/08  Lifetime of seasalt aerosol evaluated in the model
CCC    should be used here for consistency.  tau_ss = 6.048e4 sec
CCC    is an approximate global value.
cccc   sea salt lifetime  0.7 days  (6.048e4 secs)
      tau_ss = 6.048e4
cccc   bromine  concentration in seasalt (zero if no seasalt)
      rbr_ss = 0.
cccc   aqueous fraction of HBr
      fr_hbrss = 0.

cccccc PIPPIN cccccccccccccccccccccccccc
cc need to add photolysis rates for isop species
cc for now all hv rxns for isop species are included
cc in code but are commented out
cccccccccccccccccccccccccccccccccccccccc
  
      prop_beta1=exp(-1050./temp)/
     7      (exp(-1050./temp)+exp(-580./temp))
      prop_beta2=1.-prop_beta1
c
c  ----------------------------------------------------------
c  heterogeneous chemistry (KEN CARSLAW'S CODE MODIFIED)
c  pressure in Pa
      ppa=100.*pur
c  total sulfate VMR
      zh2so4=0.
c  initialize gas phase HNO3, H2O
      hno3_gas=hno3
      h2o_gas=dn(13)
c  initial solid phase hno3 and h2o
      hno3s=0.
      h2os=0.
c  initial het chem reaction rates
      do ih=1,ihreac
        hr(ih)=0.
      enddo
c  allow PSC formation poleward of 45 deg and
c  between 128 and 23 mb when H&M criteria are met
      ihet_flag=0
      ifallout_1=0
      ifallout_2=0
      fpsc1 = 0.0
      fpsc2 = 0.0
      sednat = 0.
      sedice = 0.
      hno3_cond = 0.
      hno3g_r = 1.
      hno3s_r = 0.
      h2os_r = 0.
CCC
      jpsc = 0
!      write(200+iam,*)'rlat',rlat,'temp',temp,'jpsc',jpsc,'sad',sad
!      call flush(200+iam)
      if ((abs(rlat) .ge. 45.) .and.
     2 (pur .gt. 23.) .and. (pur .le. 128.)) jpsc = 1
c
        sadcm = sad*1.0e-8     !convert from micron^2 to cm^2
c
      if (temp.lt.240. .and.(jpsc .eq. 1 .or. sad .gt. 0.)) then
ccc    get h2o, hno3  etc mixing ratios (ppmv or ppbv)
        qh2o = h2o_gas*1.0e6/dens
        qhno3 = hno3*1.0e9/dens
        qhcl = hcl*1.0e9/dens
        qhocl = hocl*1.0e9/dens
        qhbr = hbr*1.0e9/dens
        qhobr = hobr*1.0e9/dens
c
cmt       call heterogeneous rate routine (kenc)
!        write(200+iam,*)'dohet',dohet
!        call flush(200+iam)
        if(dohet) then
         call analytic (temp,pur,qh2o,qhno3,qh2so4,qhcl,qhbr,qhocl,
     1    qhobr,sadcm,fpsc1,fpsc2,jpsc,h2o_gas,hno3_gas,
     2    rn2o5h2o,rclno3h2o,rclno3hcl,rhoclhcl,rhobrhcl,
     3    rhbrhobr,rhbrhocl,rbrno3h2o,rn2o5hcl)
cc  equivalence to LaRC arrays
         hr(1) = rn2o5h2o
         hr(2) = rclno3h2o
         hr(3) = rclno3hcl
         hr(4) = rn2o5hcl
         hr(5) = rhoclhcl
         hr(6) = rhbrhobr
         hr(7) = rhobrhcl
         hr(8) = rhbrhocl
         hr(9) = rbrno3h2o
        endif
c
c concentration of condensed-phase nitric acid (ie, NAT)
        hno3_cond = hno3-hno3_gas
        if (fpsc1 .eq. 1. .or. fpsc2 .eq. 1.) xnat=hno3_cond
        hno3s_r = hno3_cond/hno3
        hno3g_r = 1.-hno3s_r
c  h2o density (set to gas phase value from carslaw routine)
        h2os=dn(13)-h2o_gas   !save condensed conc for h2o transport test
        if (fpsc2 .eq. 1.) xice=h2os
        h2os_r=h2os/dn(13)    !save condensed conc for h2o transport test
cjjj NOTE: "total" transported h2o may still be available in h2otest
cjjj  (depending on isoprene_perox flag! 20060328)
        dn(13)=h2o_gas
c  SCALE (and underrelax) HET. RATES IF TIME CONSTANT < EQUIL
        tauhbri = hr(6)*dn(46)+hr(8)*dn(38)
        if (tauhbri .gt. equil_fami) then
         fctr = 1./(tauhbri*equil_fam)
         hr(6)=fctr*hr(6)
         hr(8)=fctr*hr(8)
        endif
        tauhobri = hr(6)*hbr+hr(7)*hcl
        if (tauhobri .gt. equil_fami) then
         fctr = 1./(tauhobri*equil_fam)
         hr(6)=fctr*hr(6)
         hr(7)=fctr*hr(7)
        endif
        taubrno3i = hr(9)*dn(13)
        if (taubrno3i .gt. equil_fami) then
         fctr = 1./(taubrno3i*equil_fam)
         hr(9)=fctr*hr(9)
        endif
        tauhocli = hr(5)*hcl+hr(8)*hbr
        if (tauhocli .gt. equil_fami) then
         fctr = 1./(tauhocli*equil_fam)
         hr(5)=fctr*hr(5)
         hr(8)=fctr*hr(8)
        endif
        tauclno3i = hr(3)*hcl+hr(2)*dn(13)
        if (tauclno3i .gt. equil_fami) then
         fctr = 1./(tauclno3i*equil_fam)
         hr(2)=fctr*hr(2)
         hr(3)=fctr*hr(3)
        endif
        tauhcli = hr(5)*hocl+hr(3)*clno3+hr(4)*xn2o5+hr(7)*hobr
        if (tauhcli .gt. equil_fami) then
         fctr = 1./(tauhcli*equil_fam)
         hr(3)=fctr*hr(3)
         hr(4)=fctr*hr(4)
         hr(5)=fctr*hr(5)
         hr(7)=fctr*hr(7)
        endif
c
c NOTE: In the present formulation, we require the presence of type-I PSC's
c for allowing PSC chemistry.  If type-II PSC's are also present, then
c type-II rates will be used.  It is possible to have only type-II present,
c ie if the atmosphere is denitrified but not dehydrated.  But if we are
c using climatological water vapor, we won't properly dehydrate, thus in
c this situation we use denitrification as a proxy for dehydration and 
c don't allow PSC reactions if only type-II PSC's are present.
c Also, disallow liquid aerosol reactions in this situation.
        if (fpsc2 .eq. 1.0) then
#ifdef ISOPRENE_PEROX
         if (fpsc1 .eq. 0.0 .and. ktf .eq. -1) then
c         using climatological water vapor in stratosphere
c         using meteorological water vapor in troposphere
#else
         if (fpsc1 .eq. 0.0 .and. saveh2o .ne. h2otest) then
c         using climatological water vapor if saveh2o and h2otest differ
c         using transported water vapor if saveh2o and h2otest are equal
#endif
!          write(200+iam,*)'ihreac',ihreac
!          call flush(200+iam)
            do ih=1,ihreac
              hr(ih)=0.
            enddo
          endif
          ifallout_2 = 1
          ihet_flag = 1
        else if (fpsc1 .eq. 1.0) then
          ifallout_1 = 1
          ihet_flag = 1
        endif
c sedimentation
        sednat = (ifallout_1*rfall_1 + ifallout_2*rfall_2)*hno3s_r
        sedice = ifallout_2*rfall_2*h2os_r
c
      endif
c
c  --------------------------------------------------------
CCCMNN 01/08 TROPOSPHERIC HETEROGENEOUS REACTION RATE CONSTANTS
CCCMNN       BASED ON MODEL SULFATE AEROSOL INFORMATION
CCCMNN       BROMINE ACTIVATION ON SEASALT
C
cjaa      if (ktf .gt. 0 .and. pur .ge. 100.) then
!      write(200+iam,*)'ktf',ktf,'pur',pur
!      call flush(200+iam)
      if (ktf .gt. 0 .and. pur .gt. 128.) then

CCCC   Assume 80% Relative Humidity. Hygroscopic growth factors
CCCCC   for sulfate and sea slat aerosols are 1.6 and 2.0 respectively
CCCCC   (Ref; M.Chin et al., JAS, 2002)
CCCCC   v_su and v_ss are volume fractions of dry aerosols
CCCCC   sa_su and sa_ss are surface area densities of wet aerosols
c
CCC    SEASALT
c Note: ssaltreff scaled by 100 to convert from meters to centimeters
c
!      rho_ss = ssaltden(1)*1.e-3
C
CCCCC   Effective Henry's law Coefficient for HOBr and HBr
CCCCC   (Ref:Waschewsky&Abbatt, J.Phys. Chem-A,1999;Abbatt&Nowak,
CCCCC   J.Phys.Chem-A, 1997)
       hhobr = 4.6e-4*exp(4.5e3/temp)       ! M/atm
CCCMNN
CCCMNN  HHBr  based on Wexler and Clegg  JGR,  2002 and
CCCMNN        Abbatt et.al.
CCCMNN   trm1 is in mole fraction /atm
CCCMNN   Effective Henry's constant of HBr is given by  trm1 * 
CCCMNN   (moles/kg of water)^2/(2.0*molality of S * (activity coefficient
CCCMNN   of Br-)^2)   Assume 40% weight percentage for S in aerosol,
CCCMNN   (molality is about 6.8), and an activity coefficient of 45
CCCMNN   for Br-. This yieldsa value of 3.0e8 for Effective Henry's
CCCMNN   constant for HBr at 233K.

       trm1 = exp(12.5062 + 10239.0*(1./temp - 1./298.15) -
     1  100.0*(298.15/temp - 1.0 + alog(temp/298.15))/8.3144)

       hhbr = trm1 * 0.11207  !((1000./18.)^2/(2.0*6.8*45.0^2)
C
CCCCCC     N2O5 + H2O
C
       gma_n2o5 = 0.1
CCC    gas phase diffusion coeff (cm2/s); XMW_N2O5=108
       dfc = 9.45e17/dens * sqrt(temp) * sqrt(3.472e-2+1.0/XMW_N2O5)
       trm1 = 2.749064e-4/gma_n2o5 * sqrt(XMW_N2O5/temp)
       hrc_n2o5=sa_su/(r_su/dfc +  trm1) + 
     1          sa_ssa/(r_ssa/dfc+trm1) +
     1          sa_ssc/(r_ssc/dfc+trm1) 
c
CCCCC      BrNO3 + H2O
c
       gma_brno3 = 0.1
       dfc = 9.45e17/dens * sqrt(temp) * sqrt(3.472e-2+1.0/XMW_BrNO3)
       hrc_brno3 = sa_su/(r_su/dfc + 2.749064e-4/gma_brno3 *
     1             sqrt(XMW_BrNO3/temp))
#ifdef DIAGCHEM
       if(iprn>0)then
         write(300+iam,*)'hrc_brno3',hrc_brno3
         call flush(300+iam)
       endif
#endif
c
CCCMNN 01/08   EVALUATE GAMMA FOR HOBR + HBR REACTION ON SULFATE AEROSOL
CCC       GAMMA IS A FUNCTION OF HBR IN LIQUID FORM
CCCCC      HOBr + HBr

ccccc    vtherm_hobr =  thermal velocity of hobr
       vtherm_hobr=1.0e2 * sqrt(8.0*8.314e3*temp/3.14159/XMW_HOBr)
cccc    coefficient to convert HBr gas (molecules/cm3) to HBr liq (M)
       ch1 = hhbr*temp/7.2435423e18/1013.25
cccc    combination of constants for gamma(HOBr)
       dliq = 5.0e-6   ! liquid phase diffusion constant cm**2/s
       rkliq=5.0e4     ! rate constant for HBr+HOBr (liq) 1./(M s)
       ch2 = 4.0*0.08206*temp*hhobr*sqrt(dliq*rkliq*ch1)/vtherm_hobr
       drl = sqrt(dliq/(rkliq*ch1*hbr))
       trm1 = 1.0/tanh(r_su/drl) - drl/r_su
       if (trm1.gt.0.) then
         trm2 = 1./(ch2*sqrt(hbr)*trm1)
         gma_hobr = 1.0/(1.0+trm2)
         dfc = 9.45e17/dens * sqrt(temp) * sqrt(3.472e-2+1.0/XMW_HOBr)
         hrc_hobr = sa_su/(r_su/dfc + 4.0/(vtherm_hobr*gma_hobr))
       else
         hrc_hobr = 0.
       endif
cc
       v_ssttl = v_ssa + v_ssc
C      fr_hbrg  gas phase fraction of HBr
       fr_hbrg =  1./(1.0+hhbr*0.08206*temp*(v_su + v_ssttl))

       fr_hbrss = fr_hbrg*hhbr*0.08206*temp*v_ssttl

cccc   bromine weight fraction in seasalt is 0.19228%
cccc   bromine  concentration in seasalt (expressed as equivalent
cccc   gas phase concentration)
CCCMNN 0508   BROMINE SOURCE FROM SEASALT.  SEASALT SOURCE
CCCMNN (EMISSION WITHIN THE PBL) IS SCALED BY THE WEIGHT FRACTION
CCCMNN OF BROMIDE.  A MULTIPLYING FACTOR OF 0.3 IS INCLUDED
CCCMNN TO REPRESENT THE BROMINE DEFICIT FRACTION (FRACTION OF
CCCMNN BROMINE VOLATALIZED FROM THE SEASALT).  CONVERSION FACTOR
CCCMNN IS INCLUDED TO GET THE SOURCE IN MOLECULES/CM^3/SEC
c Add temperature threshold to bromine source
CCCMNN 0708 temperature dependence factor is 1.0 for temp<269K
CCC         and 0.0 for temp>270K. It varies linearly from
CCC         1.0 to 0.0 for 269K < temp < 270K
C
        t_factr = 0.0
        if (temp .le. 269.0) then
         t_factr = 1.0
         else if (temp .le. 270.0) then
         t_factr = 270.0 - temp
         else
         t_factr = 0.0
         endif
       rbr_ss = (sorcss1+sorcss2+sorcss3+sorcss4)*XMW_DRYAIR*
     1          0.0019228 * 0.3/XMW_Br * t_factr
!        if(rbr_ss.ne.0.0)then
!           write(6,*)'iat',iat,jat,kat,iam,'rbr_ss',rbr_ss
!        endif
!        if(iat.eq.iatprn.and.jat.eq.jatprn.and.iam.eq.iamprn)then
!          write(6,*)iat,jat,'rbr_ss',rbr_ss,'kat',kat,'t_factr',t_factr
!          call flush(6)
!        endif
c Test: reduce bromine source from seasalt JAA 20080223
c       rbr_ss =0.25*rbr_ss
CCCMNN   SET RBR_SS = 0.
CCCMNN        rbr_ss = 0.0
c
       hr(1) = hrc_n2o5/dn(13)
       hr(9) = hrc_brno3/dn(13)
       if (dn(45) .gt. 0.) hr(6) = hrc_hobr/dn(45)
      endif
c
CCCCC  MOD  7/2000
CC     FROX=OX/OXMOD  WHERE OXMOD=OX+NO2+HNO3+2*NO3+3*N2O5+PAN+HNO4
CC     NOTE:  THE VARIABLE OX REPRESENTS OXMOD
cc (PIP) include mpan in frox

#ifdef DIAGCHEM
       if(iprn>0)then
         write(300+iam,*)'xno2',xno2,'hno3',hno3,'xno3',xno3
         write(300+iam,*)'xn2o5',xn2o5,'pan',pan
         write(300+iam,*)'hno4',hno4,'xmpan',xmpan,'ox',ox
         call flush(300+iam)
       endif
#endif
       frox=1.0-(xno2+hno3+2.0*xno3+3.0*xn2o5+pan+hno4+xmpan)/ox
       frox = amax1(frox,0.001)
CC
c  daytime chemistry + tropospheric chemistry day and night
c      if (kdn .gt. 0) then
        if (ktf .eq. 1 .or. kdn .gt. 0) then

cmt   h2o dependence of r(22)  ho2+ho2=h2o2+o2
      r(22) = r(22) * (1.0 + 1.4e-21*exp(2200./temp)*dn(13))
      
c special nighttime treatment for no source:
      if(kdn .lt. 0 .and. ktf.eq.1)then
       tnitno=xnox_tmp
       dn(1)=frox*ox
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'dn1',dn(1),'frox',frox,'ox',ox,'tnitno',tnitno
      endif
#endif
#endif
c  Now titrate out O3 from nighttime NO source:       
c    Check if O3 is greater than available NO
#ifdef DIAGCHEM
       if(iprn>0)then
         write(300+iam,*)'dn(1)',dn(1),'tnitno ',tnitno,'frox',frox,'ox',ox
         write(300+iam,*)'xno2',xno2
         call flush(300+iam)
       endif
#endif
       if(dn(1).gt.tnitno)then
        frox=amax1(frox-tnitno/ox,1.E-3)
        dn(1)=frox*ox
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'dn1a',dn(1),'frox',frox,'ox',ox
      endif
#endif
#endif
        dn(4)=xno2+tnitno
        dn(3)=0.
c  If NO > O3 (complete titration)
        else
         frox=1.0e-3
         dn(4)=xno2+dn(1)*0.999
         dn(3)=tnitno-dn(1)*0.999
         dn(1)=ox*frox
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'dn1c',dn(1),'frox',frox,'ox',ox
      endif
#endif
#endif
        end if        
       end if
c      
c  Now daytime calculation of Ox:
c  odd oxygen
      if(kdn .gt. 0)then
#ifdef DIAGCHEM
       if(iprn>0)then
         write(300+iam,*)katchem,'phoj3',phoj(3),phoj(2)
         write(300+iam,*)'r1',r(1),r(3),r(30),r(32)
         write(300+iam,*)'xo2',xo2,'xn2',xn2,dn(13)
         write(300+iam,*)'dn36',dn(36),dn(18)
         write(300+iam,*)'dn11',dn(11),dens,xn2
         call flush(300+iam)
       endif
#endif
       ro1do3=phoj(3)/(r(1)*xo2+r(2)*xn2+r(3)*dn(13))
ccc     1 +r(30)*dn(36)+r(32)*dn(18)+r(177)*dn(18)+
ccc     2 (r(25)+r(26))*dn(11)+r(27)*dens*xn2)
       roo3=(phoj(2)+phoj(3)-r(3)*dn(13)*ro1do3)/(r(4)*xo2*dens)
       dn(1)= frox * ox/(1.+roo3+ro1do3)
#ifdef DIAGCHEM
       if(iprn>0)then
         write(300+iam,*)'katchem',katchem,'dn1',dn(1),'frox',frox,'ox',ox,'roo3',roo3,'ro1do3',ro1do3
         call flush(300+iam)
       endif
#endif
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'dn1d',dn(1),'frox',frox,'ox',ox,'roo3',roo3,ro1do3
      endif
#endif
#endif
       dn(2)=roo3*dn(1)
       dn(27)=ro1do3*dn(1)
CCC
CCCMNN 0702  NEW FORMULATION FOR O3 EVALUATION.
CCCCCC       THE FOLLOWING TWO EXPRESSIONS FOR NO2 ARE USED TO SOLVE
CCCCCC       FOR O3. (ONLY FOR TROPOSPHERE)
CCCCCC       OXMOD=OX+NO2+HNO3+2*NO3+3*N2O5+HNO4+PAN+MPAN 
CCCCCC       NO2=XNOX_TMP*(1./(1.0+NO/NO2))
CCCCCC       FOR THE FIRST PARTIONING NO/NO2 = PHOJ(4)/(R(13)*O3)
CCCCCC       
c (PIP) include mpan in oxmod
!       write(200+iam,*)'ktf2',ktf
!       call flush(200+iam)
       if (ktf .gt. 0) then
        oxrt = 1.0+roo3+ro1do3
        qd1 = phoj(4)/r(13)
        qd2 =  ox-hno3-2.0*xno3-3.0*xn2o5-hno4-pan-xmpan
        s1 = xnox_tmp + qd1*oxrt - qd2
        s2 = qd1 * qd2
        tmpo3 = (-s1 + sqrt(s1*s1+4.0*s2*oxrt))*0.5/oxrt
        dn(1) =  amax1(tmpo3, 1.0e-3*ox)
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'dn1e',dn(1),'tmpo3',tmpo3,'ox',ox
      endif
#endif
#endif
        dn(2)=roo3*dn(1)
        dn(27)=ro1do3*dn(1)
        endif

c FIRST GUESSES:

c  Note that I was a bit sloppy adding nmhc reactions to this
c  part.  It doesn't much matter in the end - these are
c  first guesses only.  The important coding is within 
c  iteration loop. - JRO

c
c  odd nitrogen  (first partitioning for day)
#ifdef DIAGCHEM
       if(iprn>0)then
         write(300+iam,*)'rhoj4',phoj(4),'r8',r(8),'dn2',dn(2)
         write(300+iam,*)'r13',r(13),'dn1',dn(1),'r24',r(24),'dens',dens
         write(300+iam,*)'phoj14',phoj(14),'r40',r(40),'xo2',xo2
         call flush(300+iam)
      endif
#endif
      duck=phoj(4)+r(8)*dn(2)
      soup=r(13)*dn(1)+r(24)*dens*dn(2)
      rnno=phoj(14)/(r(40)*xo2)
      rnono2=0.
      if(soup.ne.0)rnono2=duck/soup

c (JRO) include some additional nmhc reactions in rno3 calculation
cjro      rno3=r(14)*dn(1)/(phoj(10)+phoj(11))
      rno3=(r(14)*dn(1))/(phoj(10)+phoj(11)
     1 +r(114)*dn(56)+r(142)*dn(67)+r(153)*dn(70)
     1  +r(154)*dn(71)
c (PIP) add isoprene terms
     2  +r(180)*dn(72)+r(187)*dn(74)+r(188)*dn(76)
     3  +r(208)*dn(81)+r(170)*dn(19))

c (JRO) Do initial guess for trop. fast NOx PCE partitioning only during daytime
c
#ifdef DIAGCHEM
       if(iprn>0)then
         write(300+iam,*)'xnox_tmp',xnox_tmp,'rnono2',rnono2,'rno3',rno3
         write(300+iam,*)'rnno',rnno
       endif
#endif
       dn(4)=xnox_tmp/(1.+rnono2+rno3+rnno*rnono2)
       dn(3)=rnono2*dn(4)
       dn(7) = rno3*dn(4)
      end if
c
c
c  odd hydrogen  (first partitioning)
      thor=r(6)*dn(2)+r(85)*dn(20)+r(72)*dn(36)
      xlh=r(11)*xo2*dens+r(15)*dn(1)
      rhoh=thor/xlh
c (JRO) adjustments made to rho2oh estimate      
c    (pho2 is 1st set up to = old version, then nmhcs rxns are added
cjro      rho2oh=(r(11)*xo2*dens*rhoh+r(12)*dn(1)+r(21)*dn(8))/
cjro     1       (r(7)*dn(2)+r(28)*dn(1)+r(20)*dn(3))

      pho2=r(11)*xo2*dens*rhoh+r(12)*dn(1)+r(21)*dn(8)
CCCMNN 01/08  ADD REACTION (76)  CO+OH
      pho2 = pho2 + r(76)*dn(20)*dens
c nmhc reactions
      pho2=pho2+r(148)*dn(69)*dens+r(151)*dn(70)      
     1 +r(152)*dn(71)
      
      dho2=(r(7)*dn(2)+r(28)*dn(1)+r(20)*dn(3))
      rho2oh=pho2/dho2

CCCCMNN022398
      bet=(r(3)*dn(13)+r(30)*dn(36)+.5*r(32)*dn(18))*dn(27)+phoj(8)*
     1     dn(13)+(phoj(9)+r(65)*dn(2))*dn(8)
      pec=2.*bet+phoj(6)*dn(5)*hno3g_r

c (JRO) the following are nmhc reactions that should
c  be included in the HOx production calculations
      pec=pec+.59*r(149)*dn(70)*dn(1)+
     1  .82*r(150)*dn(71)*dn(1)
c (PIP) add isoprene terms
     1 +.34*r(179)*dn(72)*dn(1)+.32*r(184)*dn(74)*dn(1)
     2 +.27*r(185)*dn(75)*dn(1)+.55*r(186)*dn(76)*dn(1)
     3 +.5*r(187)*dn(74)*dn(7)+r(188)*dn(76)*dn(7)
     4 +.62*r(199)*dn(73)+.91*r(201)*dn(78)
     5 +.3*r(202)*dn(79)
     6 +1.22*phoj(47)*dn(76)+phoj(48)*dn(74) 
c (PIP)correct dn(21) to dn(19)
c     1  + r(170)*dn(21)*dn(7)
     1 +r(170)*dn(19)*dn(7)
     3 +phoj(42)*dn(56)+2.*phoj(51)*dn(57)
     & +2.*phoj(52)*dn(65)
     4 +.9*phoj(46)*dn(62)+phoj(53)*dn(67)
cc
#ifdef ISOPRENE_PEROX
CMNN 0106
      pec = pec + (2.0*dn(88)+2.0*dn(90)+1.3*dn(91))*phoj(52)
#endif

cc
      aec=r(29)*dn(5)*hno3g_r+r(31)*dn(37)+r(66)*dn(18)+r(86)*dn(23)
     1    +dn(4)*(r(18)+r(57)*rho2oh)*dens

c (JRO) include nmhc reactions for [HOx destruction]/[OH]
      aec=aec+r(109)*dn(54) + r(113)*dn(56) + r(120)*dn(59) +
     1 .7*r(121)*dn(57) + r(125)*dn(60) + r(134)*dn(64) +
     2 .51*r(139)*dn(65) + r(140)*dn(62) + r(141)*dn(67)
c (PIP) add isoprene terms 
     3 +r(178)*dn(72)+r(181)*dn(74)+r(182)*dn(75)
     4 +r(183)*dn(76)+r(205)*dn(82)

      bec=2.*(r(16)+r(17)*rho2oh+r(64)*dens+r(22)*rho2oh*rho2oh)
c prevent OH from going to zero
      if ((4.0*bec*pec)/(aec*aec) .gt. 1.0e-4) then
        dn(9)=(sqrt(aec*aec-4.*bec*(-pec))-aec)/(2.*bec)
      else
        dn(9)=pec/aec
      endif
      dn(10)=rho2oh*dn(9)
c

      rclno3=0.
      rn2o5=0.
      rhno3=0.
      rhno4=0.
c (JRO) treat pan as for above species (pce vs transported)
      rpan=0.
c (PIP) treat mpan like pan
      rmpan=0.
      
c  (JRO) - do these nox lifetime checks and additions to the fast 
c      nox pool in daytime only.    
      if (kdn .gt. 0) then
c
c  check for pce of potentially short-lived transported species
       if ( phoj(17)+phoj(21)+r(69)*dn(2)+hr(3)*dn(14)+ hr(2)*dn(13)==0.0)then
         write(6,*)'tile',tile,'iat',iat,jat,kat
         write(6,*)'iatchem',iatchem,jatchem,katchem,'phoj',phoj(17),phoj(21)
         write(6,*)'r69',r(69),'dn',dn(2),dn(14),dn(13)
         write(6,*)'hr',hr(3),hr(2)
         call flush(6)
       endif
       tclno3=1./(phoj(17)+phoj(21)+r(69)*dn(2)+hr(3)*dn(14)+
     1       hr(2)*dn(13))
       if (tclno3 .lt. equil) then
        ipce_clno3=1
        xnox_tmp = xnox_tmp + clno3
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'xnox_tmph',xnox_tmp
        write(6,*)'clno3',clno3
      endif
#endif
#endif
        clx_tmp = clx_tmp + clno3
       else
        ipce_clno3=0
       end if
c      
       tn2o5=1./(phoj(13)+r(36)*dens+hr(4)*dn(14)+hr(1)*dn(13)
c (JRO) add gaseous phase n2o5 loss to water
     1 +r(176)*dn(13))
       if (tn2o5 .lt. equil) then
        ipce_n2o5=1
        xnox_tmp = xnox_tmp + 2.*xn2o5
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'xnox_tmpi',xnox_tmp
        write(6,*)'xn2o5',xn2o5
      endif
#endif
#endif
       else
        ipce_n2o5=0
       end if
c

      thno3=1./((phoj(6)+r(29)*dn(9)+drip+dephno3)*hno3g_r + sednat)
      if (thno3 .lt. equil) then
        ipce_hno3=1
        xnox_tmp = xnox_tmp + hno3
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'xnox_tmpg',xnox_tmp
        write(6,*)'hno3',hno3
      endif
#endif
#endif
c        print *,'hno3 in pce'
      else
        ipce_hno3=0
      end if
c
      thno4=1./(pjhno4a+pjhno4b+r(62)*dens+r(70)*dn(9)+drip)
      if (thno4 .lt. equil) then
        ipce_hno4=1
        xnox_tmp = xnox_tmp + hno4
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'xnox_tmpf',xnox_tmp
        write(6,*)'hno4',hno4
      endif
#endif
#endif
      else
        ipce_hno4=0
      end if

c (JRO) check pan lifetime here
      tpan=1./(r(119)*dens+r(120)*dn(9)+phoj(44))
      if (tpan .lt. equil) then
        ipce_pan=1
        xnox_tmp = xnox_tmp + pan
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'xnox_tmpe',xnox_tmp
        write(6,*)'pan',pan
      endif
#endif
#endif
      else
        ipce_pan=0
      end if

c (PIP) check mpan lifetime here
      tmpan=1./(r(204)*dens+r(205)*dn(9)+phoj(50))
      if (tmpan .lt. equil) then
        ipce_mpan=1
        xnox_tmp = xnox_tmp + xmpan
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'xnox_tmpd',xnox_tmp
        write(6,*)'xmpan',xmpan
      endif
#endif
#endif
      else
        ipce_mpan=0
      endif
c
      thocl=1./(phoj(26)+r(42)*dn(2)+r(52)*dn(9)+hr(5)*dn(14))
      if (thocl .lt. equil) then
        ipce_hocl=1
        clx_tmp = clx_tmp + hocl
      else
        ipce_hocl=0
      end if
c
      tbrno3=1./(phoj(35)+hr(9)*dn(13))
      if (tbrno3 .lt. equil) then
        ipce_brno3=1
        brx_tmp = brx_tmp + brno3
        xnox_tmp = xnox_tmp + brno3
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'xnox_tmpc',xnox_tmp
        write(6,*)'brno3',brno3
      endif
#endif
#endif
      else
        ipce_brno3=0
      end if
c
      thobr=1./(phoj(34)+r(89)*dn(2)+hr(6)*dn(45)+hr(7)*dn(14))
      if (thobr .lt. equil) then
        ipce_hobr=1
        brx_tmp = brx_tmp + hobr
      else
        ipce_hobr=0
      end if

c after having added PCE species, reset radical family concentrations 
c to zero if they are extremely small

      if (xnox_tmp .lt. 10.) xnox_tmp=0.
      if (clx_tmp .lt. 10.) clx_tmp=0.
      if (brx_tmp .lt. 10.) brx_tmp=0.
c (JRO)
c END daytime lifetime checks:

c
c initial partitioning of odd bromine: need initial estimate of BrO
      if (brx_tmp .eq. 0.) then
        dn(42)=0.
        dn(43)=0.
        dn(44)=0.
        if (ipce_hobr .eq. 1) dn(46)=0.
        if (ipce_brno3 .eq. 1) dn(47)=0.
      else
       rbrno3=r(100)*dn(4)*dens/(phoj(35)+hr(9)*dn(13))
       rhobr=(r(98)*dn(10)+hr(9)*dn(13)*rbrno3)/
     1       (phoj(34)+r(89)*dn(2)+hr(6)*dn(45)+hr(7)*dn(14))
       rbrobr=r(94)*dn(1)/(phoj(32)+r(97)*dn(2)+r(98)*dn(10)+
     1        r(99)*dn(3)+r(100)*dn(4)*dens)
       dn(42)=brx_tmp/(1.+rbrobr*(1.+ipce_hobr*rhobr+ipce_brno3*rbrno3))
!       if(iprn>0.and.kprn.eq.1)then
!         write(300+iam,*)'dn42 a ',dn(42),'brx_tmp',brx_tmp
!         call flush(300+iam)
!       endif
       dn(44)=rbrobr*dn(42)
       dn(44)=max(dn(44),1.)
      endif

c  come back in here during tropospheric nighttime
      endif
c
c
c  begin iteration loop
      do i=1,iter_max

c (JRO) store old values of 40 species for convergence check
c (PIP) added more species - 51 species for convergence check
c        do ijen=1,40 
         do ijen=1,51
         old(ijen)=dn(ckspid(ijen))
        enddo

CCCCMOD 7/2000      ** UPDATE FROX USING CURRENT (EQUILIBRIUM) NO2 AND NO3
CCCC                   FOR DAYTIME ONLY
#ifdef DIAGCHEM
       if(iprn>0)then
         write(300+iam,*)nstepat,katchem,'kdn',kdn,'ox',ox,'dn4',dn(4),'dn7',dn(7)
         write(300+iam,*)'i',i,'pan',pan,xmpan,hno4,xn2o5,hno3
         call flush(300+iam)
       endif
#endif
       if (kdn .gt. 0) then   
c (PIP) include mpan in frox
        frox=1.0-(hno3+3.0*xn2o5+dn(4)+2.0*dn(7)+pan+xmpan+hno4)/ox     
        frox = amax1(frox,1.0e-3)
        dn(1)= frox * ox/(1.+roo3+ro1do3)
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
       write(6,*)'dn1a',dn(1),'frox',frox,'ox',ox,'roo3',roo3,
     * 'r01do3',r01do3
        write(6,*)'hno3',hno3,'xn2o5',xn2o5,'dn4',dn(4)
         write(6,*)'dn7',dn(7),'pan',pan,xmpan,hno4,ox
      endif
#endif
#endif
        dn(2)=roo3*dn(1)
        dn(27)=ro1do3*dn(1)
CCC
CCCMNN 0702   NEW FORMULATION FOR O3 EVALUATION IN THE TROPOSPHERE
#ifdef DIAGCHEM
       if(iprn>0)then
         write(300+iam,*)nstepat,katchem,'ktf',ktf,'dn2',dn(2),'dn1',dn(1)
         call flush(300+iam)
       endif
#endif
       if (ktf .gt. 0) then 
        oxrt = 1.0+roo3+ro1do3
CCCCGC
c  GC 10/23/03 c_ro2: NO to NO2 conversion by NMHC/RO2 Species
c JRO - add additional no -> no2 terms
            c_ro2 = r(46)*dn(25)+r(99)*dn(44)+r(23)*dn(7)
     2       +r(110)*dn(55)+r(116)*dn(58) + .84*r(126)*dn(61)
     3       +r(130)*dn(63) + r(135)*dn(66) + r(143)*dn(68)
     7       +.964*r(213)*dn(85) + .964*r(214)*dn(86)
c (PIP) add isoprene terms
     6       +0.91*r(189)*dn(73)+r(190)*dn(77)+r(191)*dn(78)
     7       +r(192)*dn(79)+r(193)*dn(80)
c END JRO
c  GC 10/23/03 c_ro2 term added to qd1
        qd1 = (phoj(4)+r(20)*dn(10)+r(79)*dn(32)+c_ro2)/r(13)
        qd2 =  ox-hno3-2.0*dn(7)-3.0*xn2o5-hno4
        s1 = (xnox_tmp-dn(7)) + qd1*oxrt - qd2
        s2 = qd1*qd2 - (r(20)*dn(10)+r(79)*dn(32)+c_ro2)*
     1               (xnox_tmp-dn(7))/r(13)
        tmpo3 = (-s1 + sqrt(s1*s1+4.0*s2*oxrt))*0.5/oxrt
        dn(1) =  amax1(tmpo3,1.0e-3*ox)
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'dn1',dn(1),'tmpo3',tmpo3,'ox',ox,'s1',s1,'s2',s2,
     *  'oxrt',oxrt
         write(6,*)'xnox_tmp',xnox_tmp,'dn7',dn(7),'qd1',qd1,qd2
         write(6,*)'r20',r(20),'dn10',dn(10),'r79',r(79)
         write(6,*)'dn32',dn(32),'cd_ro2',c_ro2,'r13',r(13)
         write(6,*)'phoj4',phoj(4)
      endif
#endif
#endif
        dn(2)=roo3*dn(1)
        dn(27)=ro1do3*dn(1)
        end if       

c (JRO) Recalculate duck and soup ([NO from NO2]/[NO loss])
c  here since we now have updated values for dn(1) and dn(2)
        duck=phoj(4)+r(8)*dn(2)
        soup=r(13)*dn(1)+r(24)*dens*dn(2)
       endif
c (JRO) nmhc additions - check loss rates for olei and
c  isoprene and limit lifetime to timestep if necessary
c  to prevent losing more species within 1 timestep than is
c  available     
        fac_olei=1.
        fac_isop=1.        
        tolei=1./(r(150)*dn(1)+r(152)*dn(9)+r(154)*dn(7))
        if(tolei.le.timinc)fac_olei=tolei/timinc        
c (PIP) isoprene
        tisop=1./(r(179)*dn(1)+r(178)*dn(9)+r(180)*dn(7))
        if(tisop.le.timinc)fac_isop=tisop/timinc
        
c  partitioning of chlorine and bromine species
CCCMNN 0106 MOD:        call halpart(i,kdn,dens,clx_tmp,brx_tmp)
        call halpart(i,ihet_flag,kdn,ktf,dens,clx_tmp,brx_tmp)

c JRO - HONO?  How should we handle this one?
cjjj Move HONO equilibrium calc to here from below iteration loop
        denom=phoj(7)+r(171)*dn(9)
        if(denom.ne.0.) dn(6)=r(19)*dn(9)*dn(3)*dens/denom

c (JRO) NOx species treatment for all daytime
c====================daytime nox==============================
c  Daytime NOx assumptions:
c  N, NO, NO2, NO3 are always in PCE
c  N2O5, HNO3, HNO4, PAN (MPAN) may or may not be in PCE
c  xnox_tmp=N+NO+NO2+NO3+any other fast NOx species as
c          determined from lifetime calculation
c  no3 and n2o5 are calculated in pce independently
c
c  xnox partitioned via the following order:
c  a)  Ratios of fast NOx species to NO2 (other than NO3 and N2O5) are
c       calculated for species x via P(x)/[NO2]/L(x)
c  b)  NO2 is determined from [nox-no3(old)-2.*n2o5(old){if in pce}]/fcn
c  c)  species that are pce fcns of NO2 are calculated
c  d)  NO3 is calculated independently using new no2 and old n2o5
c  e)  N2O5 is calculated independently using new no2 and old no3
!       write(200+iam,*)'kdn 2',kdn
!       call flush(200+iam)
       if (kdn .gt. 0) then
c (no3 always partitioned via pce during day)
         ipce_no3=1

c  odd nitrogen  (final partitioning)
c (JRO) include nmhc NO losses for rnono2
        xnoloss=(soup+r(20)*dn(10)+r(46)*dn(25)+
     1       r(79)*dn(32)+r(99)*dn(44)+r(23)*dn(7)
     2       +r(110)*dn(55)+r(116)*dn(58) + r(126)*dn(61)
     3       +r(130)*dn(63) + r(135)*dn(66) + r(143)*dn(68)
     7       +r(213)*dn(85) + r(214)*dn(86)
c (JRO) also include loss to HONO?
     5       +r(19)*dens*dn(9)
c (PIP) add isoprene terms
     6       +r(189)*dn(73)+r(190)*dn(77)+r(191)*dn(78)
     7       +r(192)*dn(79)+r(193)*dn(80))

c fast nox ratios to no2:
c (rno3 was computed and will be updated although not used directly
c  to get no3 anymore) so using it here is still fine...
        rnono2=(duck+phoj(10)*rno3)/xnoloss
c  (JRO) add HONO->NO back in
        if(dn(4).gt.1.E-3)rnono2=rnono2+(phoj(7)*dn(6)/dn(4))
     1   /xnoloss
c (JRO) Include the NO source from NO3+M decomposition
c  This rate is zero in chem_rate...
c        if(dn(4).gt.1.E-3)
c     1   rnono2=rnono2+(r(173)*dn(7))/dn(4)/xnoloss

c (JRO) Update other losses here with new radical concentrations:
c  (This will not change pce flags)
        thno4=1./(pjhno4a+pjhno4b+r(62)*dens+r(70)*dn(9)+drip)
        tclno3=1./(phoj(17)+phoj(21)+r(69)*dn(2)+hr(3)*dn(14)+
     1       hr(2)*dn(13))
        tn2o5=1./(phoj(13)+r(36)*dens+hr(4)*dn(14)+hr(1)*dn(13)
     1   +r(176)*dn(13))
        thno3=1./((phoj(6)+r(29)*dn(9)+drip+dephno3)*hno3g_r 
     1   + sednat)
        tpan=1./(r(119)*dens+r(120)*dn(9)+phoj(44))
c (PIP) add mpan
        tmpan=1./(r(204)*dens+r(205)*dn(9)+phoj(50))

c compute fast nox species ratios to no2 if in pce       
        if (ipce_hno4 .eq. 1) rhno4=r(57)*dn(10)*dens*thno4
        if (ipce_clno3 .eq. 1) rclno3=r(67)*dn(25)*dens*tclno3
        if (ipce_n2o5 .eq. 1) rn2o5 = r(35)*dens*dn(7)*tn2o5
        if (ipce_hno3 .eq. 1) then
          if ((dn(4) .le. 1.)) then
            rhno3=0.
          else
            rhno3=(r(18)*dn(9)*dens + ((sednat_in+
     2       (hr(3)*dn(14)+hr(2)*dn(13))*dn(17)+hr(9)*dn(47)*dn(13)+
     3       (hr(4)*dn(14)+2.*hr(1)*dn(13))*dn(12)
     4       +r(114)*dn(56)*dn(7)+r(142)*dn(67)*dn(7)+
     5       r(170)*dn(19)*dn(7)
     5       +2.*r(176)*dn(13)*dn(12)) / dn(4)))*thno3
          end if
        end if
        if (ipce_pan .eq. 1) rpan = r(117)*dens*dn(58)*tpan
c (PIP) add mpan
        if (ipce_mpan .eq.1) rmpan=r(203)*dens*dn(81)*tmpan


c (JRO) treat N2O5 and NO3 in pce during day but not as fcn of no2.
c Subtract old values from NOx first, then compute NO2 and others in
c pce  ;  second, compute new values of N2O5 and NO3 independently,
c based on new NO2 
        fcn = 1.+rnono2+rhno4*ipce_hno4+rnno*rnono2+
     1      rclno3*ipce_clno3+rhno3*ipce_hno3
     2     +rpan*ipce_pan
c (PIP) add mpan
     3     +rmpan*ipce_mpan + rno3

c subtract old values of no3 and n2o5 (if it is in pce) from
c xnox-tmp before calculating no2
CCCMNN 0903  SUBTRACT NAP AND ISOPN FROM XNOX_TMP
CCCMNN       XNOX_TMP2 = XNOX_TMP - (DN(68)+DN(77))
C
        xnox_tmp2 = xnox_tmp - (dn(68)+dn(77))
        if(ipce_n2o5.eq.1)then 
          if(xnox_tmp2-2.*dn(12).gt.0) then
            dn(4)=(xnox_tmp2-2.*dn(12))/fcn
          else
            dn(12)=0.
            if(xnox_tmp2.gt.0) then
              dn(4)=(xnox_tmp2)/fcn
            else
              dn(4)=0.
            endif
          endif
        else 
          if(xnox_tmp2.gt.0)then
            dn(4)=(xnox_tmp2)/fcn
          else
            dn(4)=0.
          endif
        endif
!        if(.not.dn(4)<=0.0.and..not.dn(4)>=0.0)then
!         write(6,*)' dn4',dn(4)
!        endif

c now get values for other fast nox species that are fcns of no2   
       dn(3)=rnono2*dn(4)
       if (ipce_hno4 .eq. 1) dn(39)=rhno4*dn(4)
       if (ipce_clno3 .eq. 1) dn(17)=rclno3*dn(4)
       if (ipce_hno3 .eq. 1) dn(5)=rhno3*dn(4)
       if (ipce_pan .eq. 1) dn(59)=rpan*dn(4)
c (PIP) add mpan
       if (ipce_mpan .eq. 1) dn(82)=rmpan*dn(4)
       
c now recalculate NO3 using new no2 and old n2o5
c  this will conserve nox with species convergence criteria now used
c  This order was chosen to eliminate instabilities during solution

c Calculate NO3 in PCE independently
        denom = phoj(10)+phoj(11)+r(23)*dn(3)+r(35)*dens*dn(4)
c (JRO) include additional NO3 losses from nmhc rxns here
     1  +r(112)*dn(55)+r(114)*dn(56)+r(118)*dn(58) +
     2   r(127)*dn(61) + r(131)*dn(63) + r(136)*dn(66) +
     4   r(219)*dn(85)+r(220)*dn(86)+
     3   r(142)*dn(67) + r(144)*dn(68) + r(153)*dn(70) +
     4   r(154)*dn(71)*fac_olei 
c (PIP) add isoprene terms
     5  +r(180)*dn(72)*fac_isop+r(187)*dn(74)
     6  +r(188)*dn(76)+r(208)*dn(81)

     5   +r(170)*dn(19)
     6   +r(172)*dn(10)+r(173)+r(174)*dn(20)+
     1   r(175)*dn(9)+r(221)*dn(32)
       tno3=1./denom
     
c Calculate rno3 here for use above in rnono2 calculation
        rno3 = (r(14)*dn(1)+r(34)*dens*dn(2))/denom
        if (dn(4) .gt. 1.0) rno3=rno3+((phoj(13)+r(36)*dens)*dn(12)+
     1   phoj(21)*dn(17) + phoj(35)*dn(47)*0.29 +
     2   r(29)*dn(5)*hno3g_r*dn(9)+pjhno4b*dn(39))/dn(4)/denom

CC        dn(7)=(r(14)*dn(1)*dn(4)+r(34)*dens*dn(2)*dn(4)+
C     1   (phoj(13)+r(36)*dens)*dn(12)+phoj(21)*dn(17)+
C     2   phoj(35)*dn(47)*0.29+
C     2   r(29)*dn(5)*hno3g_r*dn(9)+pjhno4b*dn(39))/denom
CC         
         dn(7) =  rno3*dn(4)
CCCMNN 0803  SET DN(7)=0.0 IF XNOX_TMP=0.
         if (xnox_tmp .eq. 0.0) then
          dn(7) = 0.0
          rno3 = 0.0
          endif

c calculate N2O5 using new no2, old no3 from rn2o5
        if (ipce_n2o5 .eq. 1) dn(12)=rn2o5*dn(4)

c====================end daytime nox==============================

       else
c********************nighttime nox*****************************
c  Nighttime NOx assumptions:
c  NO=xnox_tmp, residual from noy minus long-lived (trop. N assumed = zero)
c  Assume NO+O3 is instantaneous so that O3 is reduced by NO and
c    NO2 is increased by NO.  These adjustments have been made
c    previously (before iteration loop). Thus NO=0 and NO2=NO2+NO
c    except when NOx > O3 at which point we will have some NO left
c  Start with assumption that all other nox species are
c  long-lived at night.  However, oftentimes, species
c  such as NO3, N2O5, HNO4 or PAN may be in equilibrium
c  relative to model time step at night.  
c  If N2O5 and NO3 both are in PCE, an explicit integration over the
c  time step using much shorter time step is done (Subroutine Intg)
c  and tendency for NO2, NO3, and N2O5 are calculated.
CCCMNN0903
CCCMNN    XNOX_TMP = NO+NAP+ISOPN.  NAP AND ISOPN ARE IN PCE.
CCCMNN    AFTER THE ADJUSTMENTS MENTIONED ABOVE, IF NO=0., THEN
CCCMNN    NO2 IS DECREASED BY (NAP+ISOPN).  IF NO > 0., THEN
CCCMNN    NO IS SET EQUAL TO MAX((NO-NAP-ISOPN),0.0)
CCC
       if (dn(3) .eq. 0.0) then
        dn(4) = xno2 + tnitno -(dn(68)+dn(77))
        else
        dn(3) = max((tnitno+xno2-dn(4)-(dn(68)+dn(77))),0.0)
        endif
CCCMNN
c   Calculate losses for nox species, identify which are to
c   be treated as in pce (first time through only - hold method
c   of solution constant through iteration looping)
        thno4=1./(r(62)*dens+r(70)*dn(9)+drip)         
        tn2o5=1./(r(36)*dens+hr(4)*dn(14)+hr(1)*dn(13)
     1   +r(176)*dn(13))
        tpan=1./(r(119)*dens+r(120)*dn(9))
c (PIP) add mpan
        tmpan=1./(r(204)*dens+r(205)*dn(9))
        tno3 = 1./(r(35)*dens*dn(4)+r(23)*dn(3)+
     1   r(112)*dn(55)+r(114)*dn(56)+r(118)*dn(58) +
     2   r(127)*dn(61) + r(131)*dn(63) + r(136)*dn(66) +
     5   r(219)*dn(85)+r(220)*dn(86)+
     3   r(142)*dn(67) + r(144)*dn(68) + r(153)*dn(70) +
     4   r(154)*dn(71)*fac_olei + 
     5   r(170)*dn(19)+r(172)*dn(10)+r(173)+
     6   r(174)*dn(20)+r(175)*dn(9)+r(221)*dn(32)
c (PIP) add isoprene terms
     7   +r(180)*dn(72)*fac_isop+r(187)*dn(74)
     8   +r(188)*dn(76)+r(208)*dn(81)) 
        if(i.eq.1)then
         ipce_hno3=0
         ipce_no3=0
         ipce_hno4=0
         ipce_pan=0
         ipce_n2o5=0
c (PIP) add mpan
         ipce_mpan=0
         if(thno4.lt.equil)ipce_hno4=1
         if(tno3.lt.equil)ipce_no3=1
         if(tn2o5.lt.equil)ipce_n2o5=1
         if(tpan.lt.equil)ipce_pan=1
c (PIP) add mpan
         if(tmpan.lt.equil)ipce_mpan=1

CCCMNN     SET FLAG FOR EXPLICIT INTEGRATION OF NOX CHEMISTRY
c         if (ipce_no3 .eq. 1 .and. ipce_n2o5 .eq. 1) then
cc          if(ipce_n2o5.eq.1)then
c           ipce_no3=2
c           ipce_n2o5=2
c           flgnoxchem=.true.
c         endif
c -JRO - always set flag for special no3,n2o5,no2 integration
          ipce_no3=2
          ipce_n2o5=2
          flgnoxchem=.true.
        endif

c     evaluate N2O5 when it is in PCE

         if (ipce_n2o5 .eq. 1) then
         pn2o5=r(35)*dn(7)*dn(4)*dens
         dn(12)=pn2o5*tn2o5
c
         else if (ipce_no3 .eq. 1) then
         pno3=r(14)*dn(1)*dn(4)+r(29)*dn(5)*dn(9)*hno3g_r+
     1    r(34)*dn(4)*dn(2)*dens+r(36)*dn(12)*dens 
         dn(7)=pno3*tno3
         endif         
c
        if (ipce_hno4 .eq. 1) dn(39)=r(57)*dn(10)*dn(4)*dens*thno4
        if (ipce_pan .eq. 1) dn(59) = r(117)*dens*dn(4)*dn(58)*tpan
c (PIP) add mpan
        if (ipce_mpan .eq. 1) dn(82)=r(203)*dens*dn(4)*dn(81)*tmpan
c********************end nighttime nox*****************************
       end if
ccc
cmt  chx species partitioning  (modified)
      pch3=phoj(23)*dn(23)+dn(18)*(r(32)*dn(27)+r(66)*dn(9)+
     1      r(47)*dn(24))
      dn(30)=pch3/(dens*r(77)*xo2)

c (JRO) - comment out section on quadratic expression for ch3o2
c  peroxy-peroxy rxns are now taken care of as
c  per Zaveri and Peters (1999)      
cjroCCC  SOLVE QUADRATIC EXPRESSION FOR CH3O2 IN PCE
cjroCCC
cjro       qa = r(108)
cjro       qb = r(78)*dn(10) + r(79)*dn(3)      
cjro       qc = -(pch3 + 0.7*r(87)*dn(9)*dn(21))
cjro       dn(32) = (-qb+sqrt(qb**2-4.*qa*qc))/(2.*qa)

c (JRO) Calculate peroxy permutation reaction rates here
c      Currently set up for interactions between
c (PIP) add isoprene RO2's-isopp, isopn, macro2, mvko2, isopo2
c                           dn(32) ch3o2
c                           dn(55) ethp
c                           dn(58) pac
c                           dn(61) ro2
c                           dn(66) ano2
c                           dn(68) nap
c                           dn(63) xo2
c                           dn(73) isopp
c                           dn(77) isopn
c                           dn(78) macro2
c                           dn(79) mvko2
c                           dn(80) isopo2 
c                           dn(81) mpac
c                           dn(85) po2-n
c                           dn(86) po2-i
CCCMNN 1203
CCCMNN   LARGE OSCILLATIONS ARE SEEN IN SOME OF THE PEROXIDES WHEN 
CCCMNN   TOTPEROXY HAS  A VALUE OF ZERO (FIRST STEPIN THE EARLIER SCHEME)
CCCMNN   THESE ANAMOLIES AFFECT OTHER SPECIES SUCH AS CH2O AND HBr.
CCCMNN   THE FOLLOWING MODIFICATION HAS BEEN INTRODUCED TO AVOID THIS
CCCMNN   PROBLEM
CCCMNN   
CCCMNN   AN INNNER ITERATIVE LOOP IS ADDED IN ORDER TO BUILD UP TOTPEROXY
CCCMNN   AND TO AVOID THE EFFECT OF ZERO VALUE FOR TOTPEROXY ON OTHER 
CCCMNN   SPECIES. THE DEFINITION OF THE RATE CONSTANTS IN THE 
CCCMNN   SUBROUTINE PEROXYRATE HAS BEEN MODIFIED (THE DIVISION BY
CCCMNN   TOTPEROXY IN THAT SUBROUTINE AND THE MULTIPLICATION BY TOTPEROXY
CCCMNN   BELOW HAVE BEEN REMOVED. ON THE FIRST CALL, WHEN TOTPEROXY = 0.0,
CCCMNN   THE RATE CONSTANT IS DEFINED AS A SECOND ORDER RATE CONSTANT
CCCMNN   FOR THE RESPECTIVE INDIVIDUAL PEROXIDES. THIS FACILITATES
CCCMNN   THE EVALUATION OF FIRST GUESS VALUES OF THESE PEROXIDES
CCCMNN   THROUGH THE SOLUTION OF A QUADRATIC EQUATION. FOR THE REST OF THE
CCCMNN   ITERATION LOOP, THE EARLIER SCHEME IS USED.  
CCCMNN   
      do ien = 1,3
      call peroxyrate(temp,totperoxy,dens,kdn)
c
c**********************************
c (JRO) compute peroxy radicals in PCE here:
c CH3O2
       pch3o2=dn(30)*r(77)*xo2*dens+0.7*r(87)*dn(9)*dn(21)
     1     +r(116)*dn(58)*dn(3)+r(118)*dn(58)*dn(7)+
     2      r(124)*dn(58)
     3     +.07*r(149)*dn(70)*dn(1) +
     4     .1*r(150)*dn(71)*dn(1) *fac_olei
c (PIP) add isoprene terms
     4     +.17*r(186)*dn(76)*dn(1)

     5     +phoj(42)*dn(56)
     6     +phoj(45)*dn(64)
CCCMNN1203
       if (totperoxy .le. 0.) then
        cf1=r(122)
        cf2=r(78)*dn(10) + r(79)*dn(3) +r(221)*dn(7)
        cf3=pch3o2
        dn(32)=quadr(cf1,cf2,cf3)
        else
        tch3o2=1./(r(78)*dn(10) + r(79)*dn(3) +
     1  r(122)+r(221)*dn(7))
        dn(32) = pch3o2*tch3o2
        endif
c ETHP
       pethp=r(109)*dn(54)*dn(9) + .7*r(121)*dn(57)*dn(9) +
     1  .08*r(126)*dn(61)*dn(3) + .1*r(127)*dn(61)*dn(7) +
     7  .1*r(219)*dn(85)*dn(7)+.1*r(220)*dn(86)*dn(7)+
     2  .06*r(129)*dn(61) + .06*r(149)*dn(70)*dn(1) +
     4  .05*r(150)*dn(71)*dn(1)*fac_olei
     7   + .1*phoj(46)*dn(62)+.06*r(217)*dn(85)
     8 +.06*r(218)*dn(86)
CCCMNN 0206  ADD C2H6+Cl
        pethp = pethp + r(108)*dn(54)*dn(24)
CCCMNN 1203
       if (totperoxy .le. 0.) then
        cf1 = r(123)
        cf2 = r(110)*dn(3) + r(111)*dn(10) + r(112)*dn(7)
        cf3 = pethp
        dn(55)=quadr(cf1,cf2,cf3)
        else
        tethp=1./(r(110)*dn(3) + r(111)*dn(10) + r(112)*dn(7) +
     1   r(123))
        dn(55)=pethp*tethp       
        endif

c RO2:
       pro2=r(125)*dn(60)*dn(9) + .44*r(139)*dn(65)*dn(9) +
     1  .03*r(149)*dn(70)*dn(1) + 
     2  .09*r(150)*dn(71)*dn(1)*fac_olei
       if (totperoxy .le. 0.) then
        cf1=r(129)
        cf2=r(126)*dn(3) + r(127)*dn(7) + r(128)*dn(10)
        cf3=pro2
        dn(61)=quadr(cf1,cf2,cf3)
        else
        tro2=1./(r(126)*dn(3) + r(127)*dn(7) + r(128)*dn(10) +
     1  r(129))
        dn(61)=pro2*tro2
        endif
c PO2n:
       ppo2n=r(211)*dn(9)*dn(83)*prop_beta1
CCCMNN  0306       INCLUDE PROP_PAR+Cl
       ppo2n = ppo2n + r(155)*dn(24)*dn(83)
CCCMNN 1203
       if (totperoxy .le. 0.) then
        cf1=r(217)
        cf2=r(213)*dn(3)+r(215)*dn(10)+r(219)*dn(7)
        cf3=ppo2n
        dn(85)=quadr(cf1,cf2,cf3)
        else
        tpo2ni=r(213)*dn(3)+r(215)*dn(10)+
     7  r(217)+r(219)*dn(7)
        tpo2n=0.
        if(tpo2ni.ne.0)tpo2n=1./tpo2ni
        dn(85)=ppo2n*tpo2n
        endif

c PO2i:
       ppo2i=r(211)*dn(9)*dn(83)*prop_beta2
CCCMNN 0306     INCLUDE  PROP_PAR+Cl
       ppo2i = ppo2i + r(156)*dn(24)*dn(83)
CCCMNN 1203
       if (totperoxy .le. 0.) then
        cf1=r(218)
        cf2=r(214)*dn(3)+r(216)*dn(10)+r(220)*dn(7)
        cf3=ppo2i
        dn(86)=quadr(cf1,cf2,cf3)
        else
        tpo2ii=r(214)*dn(3)+r(216)*dn(10)
     7  +r(218)+r(220)*dn(7)
        tpo2i=0.
        if(tpo2ii.ne.0)tpo2i=1./tpo2ii 
        dn(86)=ppo2i*tpo2i
        endif

c XO2:
       pxo2=.34*r(126)*dn(61)*dn(3) + .4*r(127)*dn(61)*dn(7) 
     1   +.4*r(219)*dn(85)*dn(7)+.4*r(220)*dn(86)*dn(7)+
     1  .24*r(129)*dn(61) + 
     4  r(139)*dn(65)*dn(9)*.07+
     3  r(148)*dn(69)*dn(9)*dens + r(151)*dn(70)*dn(9) + 
     4  r(152)*dn(71)*dn(9)*fac_olei
c (PIP) add isoprene terms
     4  +.08*r(178)*dn(72)*dn(9)*fac_isop
     5  +.2*r(179)*dn(72)*dn(1)*fac_isop
     6  +.1*r(184)*dn(74)*dn(1)+.05*r(185)*dn(75)*dn(1)
     7  +.1*r(186)*dn(76)*dn(1)+.5*r(187)*dn(74)*dn(7)
     8  +r(188)*dn(76)*dn(7)+.7*r(192)*dn(79)*dn(3)

     7   +.41*phoj(46)*dn(62)+.24*r(217)*dn(85)
     8   +.24*r(218)*dn(86)
CCCMNN 1203
       if (totperoxy .le. 0.) then
        cf1=r(133)
        cf2=r(130)*dn(3) + r(131)*dn(7) + r(132)*dn(10)
        cf3=pxo2
        dn(63)=quadr(cf1,cf2,cf3)
        else
        txo2=1./(r(130)*dn(3) + r(131)*dn(7) + r(132)*dn(10) +
     1   r(133))
        dn(63)=pxo2*txo2
        endif
       
c ANO2
       pano2=r(134)*dn(64)*dn(9) + 
     1  .11*r(150)*dn(71)*dn(1)*fac_olei
CCCMNN 1203
       if (totperoxy .le. 0.) then
        cf1=r(138)
        cf2=r(135)*dn(3) + r(136)*dn(7) + r(137)*dn(10)
        cf3=pano2
        dn(66)=quadr(cf1,cf2,cf3)
        else
        tano2=1./(r(135)*dn(3) + r(136)*dn(7) + r(137)*dn(10) +
     1  r(138))
        dn(66)=pano2*tano2
        endif
       
c NAP
       pnap=r(140)*dn(62)*dn(9) + r(153)*dn(70)*dn(7) +
     1  r(154)*dn(71)*dn(7)*fac_olei
CCCMNN 1203
       if (totperoxy .le. 0.) then
        cf1=r(146)
        cf2=r(143)*dn(3) + r(144)*dn(7) + r(145)*dn(10)
        cf3=pnap
        dn(68)=quadr(cf1,cf2,cf3)
        else
        tnap=1./(r(143)*dn(3) + r(144)*dn(7) + r(145)*dn(10) +
     1  r(146))
        dn(68)=pnap*tnap                     
        endif
CCCMNN 0803   SET NAP=0.0 IF XNOX_TMP=0.
       if (xnox_tmp .eq. 0.0) dn(68) = 0.0

c (PIP) isoprene RO2's
c ISOPP
       pisopp=r(178)*dn(72)*dn(9)*fac_isop
#ifdef ISOPRENE_PEROX
CMNN 0106
       pisopp = pisopp + 0.5*r(157)*dn(88)*dn(9)
#endif

CCCMNN 1203
       if (totperoxy .le. 0.) then
        cf1=r(199)
        cf2=r(189)*dn(3)+r(194)*dn(10)
        cf3=pisopp
        dn(73)=quadr(cf1,cf2,cf3)
        else
        tisopp=1./(r(189)*dn(3)+r(194)*dn(10)+
     &   r(199))
        dn(73)=pisopp*tisopp
        endif

CCCMNN 10/03   ISOPN IS NOT CONSIDERED AS A SEPARATE SPECIES IN THIS VERSION
Cc ISOPN
C       pisopn=r(180)*dn(7)*dn(72)*fac_isop
C       tisopn=1./(r(190)*dn(3)+r(195)*dn(10)+r(200))
C       dn(77)=pisopn*tisopn
CCCCMNN 0803  SET  ISOPN=0.0 IF XNOX_TMP=0.0
C       if (xnox_tmp .eq. 0.0) dn(77)=0.0
CCCCCCCCCCCCCCCCCCCCCCC       
c ISOPO2
       pisopo2=.69*r(183)*dn(76)*dn(9)
#ifdef ISOPRENE_PEROX
CMNN 0106
       pisopo2 = pisopo2 + 0.5*r(160)*dn(89)*dn(9)
#endif
CCCMNN 1203
       if (totperoxy .le. 0.) then
        cf1=r(210)
        cf2=r(193)*dn(3)+r(196)*dn(10)
        cf3=pisopo2
        dn(80)=quadr(cf1,cf2,cf3)
        else
        tisopo2=1./(r(193)*dn(3)+r(196)*dn(10)+r(210))
        dn(80)=pisopo2*tisopo2       
        endif

c (PIP) add macro2 and mvko2
c MACRO2
        pmacro2=.5*r(181)*dn(74)*dn(9)
#ifdef ISOPRENE_PEROX
CMNN 0106
        pmacro2 = pmacro2 + 0.5*r(159)*dn(90)*dn(9)
#endif
CCCMNN 1203
        if (totperoxy .le. 0.) then
         cf1=r(201)
         cf2=r(191)*dn(3)+r(197)*dn(10)
         cf3=pmacro2
         dn(78)=quadr(cf1,cf2,cf3)
         else
         tmacro2=1./(r(191)*dn(3)+r(197)*dn(10)+r(201))
         dn(78)=pmacro2*tmacro2
         endif

c MVKO2
        pmvko2=r(182)*dn(75)*dn(9)
#ifdef ISOPRENE_PEROX
CMNN 0106
        pmvko2 = pmvko2 + 0.5*r(158)*dn(91)*dn(9)
#endif
CCCMNN1203
        if (totperoxy .le. 0.) then
         cf1=r(202)
         cf2=r(192)*dn(3)+r(198)*dn(10)
         cf3=pmvko2
         dn(79)=quadr(cf1,cf2,cf3)
         else
         tmvko2=1./(r(192)*dn(3)+r(198)*dn(10)+r(202))
         dn(79)=pmvko2*tmvko2
         endif

c PAC is done below, after aldehyde calculations
c**********************************

CCC
CCCCMNN    CHECK PCE FOR CH3OOH AND CH2O (INCLUDE RAINOUT FOR BOTH)
      
      tch3oohi = phoj(28)+r(87)*dn(9)+depch3ooh+drip_ch3ooh
      if (tch3oohi .gt. equili) then
       ipce_ch3ooh = 1
       dn(21) = r(78)*dn(10)*dn(32)/tch3oohi
      else
       ipce_ch3ooh = 0
      endif
CCCMNN    EVALUATE CH3O FROM PCE RELATIONS
c (JRO) reaction 108 (original ch3o2 self reaction) is no longer used.
c      It was replaced with r(122), which bypasses CH3O production
c      Will this be a problem in stratosphere?  Guessing not...
cjro      dn(33)=(phoj(28)*dn(21)+r(79)*dn(3)*dn(32)
cjro     1       +0.8*r(108)*dn(32)*dn(32))/(r(82)*dn(35))
      dn(33)=(phoj(28)*dn(21)+r(79)*dn(3)*dn(32))
     1 /(r(82)*dn(35))
CCCC
c (JRO) Include ch2o+no3 rxn [r(170)] in formaldehyde loss
cjro      tch2o = 1.0/(phoj(24)+phoj(25)+r(9)*dn(24)+r(10)*dn(2)+
cjro     1        r(83)*dn(9)+depch2o+drip)
      tch2oi = phoj(24)+phoj(25)+r(9)*dn(24)+r(10)*dn(2)+
     1         r(83)*dn(9)+depch2o+drip+r(170)*dn(7)
      if (tch2oi .gt. equili) then
       ipce_ch2o = 1
c (JRO) some changes in ch2o production
c   1) don't assume ch3o production [r(79)+phoj(28)] leads directly to ch2o;
c      use r(82) instead
c   2) include r(177): ch4+o1d -> ch2o+h2
c   3) include new peroxy-peroxy rxns (r(122) rather than
c      r(108)
c   4) add the many production terms from nmhc
c   5) add surface source for ch2o (anthropogenic emissions)
c
c       ORIGINAL METHOD:
c       dn(19) = (r(79)*dn(3)*dn(32)+phoj(28)*dn(21)+0.3*r(87)*
c     1          dn(9)*dn(21)+2.0*r(108)*dn(32)*dn(32))*tch2o
c
c       NEW METHOD:
           dn(19)=(r(82)*dn(33)*dn(35)+r(177)*dn(27)*dn(18)+
     1           .3*r(87)*dn(9)*dn(21)
     2          +.6*r(120)*dn(59)*dn(9)+
     3          r(135)*dn(66)*dn(3) + r(136)*dn(66)*dn(7) +
     4           .5*r(143)*dn(68)*dn(3)+
     5          .5*r(144)*dn(68)*dn(7) +
     6           r(147)*dn(69)*dn(1) +
     7          1.56*r(148)*dn(69)*dn(9)*dens + 
     7         .57*r(149)*dn(70)*dn(1) +
     8          r(151)*dn(70)*dn(9)
c (PIP) add isoprene terms
     9  +.6*r(179)*dn(72)*dn(1)*fac_isop+.2*r(184)*dn(74)*dn(1)
     1  +.1*r(185)*dn(75)*dn(1)+.22*r(186)*dn(76)*dn(1)
     2  +.34*r(188)*dn(76)*dn(7)+.63*r(189)*dn(73)*dn(3)
     3  +.16*r(191)*dn(78)*dn(3)+.3*r(192)*dn(79)*dn(3)
     4  +.03*r(193)*dn(80)*dn(3)
     8  +.6*r(205)*dn(82)*dn(9)+r(206)*dn(81)*dn(3)
     9  +r(208)*dn(81)*dn(7)+.35*phoj(47)*dn(76)+phoj(48)*dn(74)
     1  +phoj(49)*dn(75)+phoj(50)*dn(82)
     4  +r(212)*dn(84)*dn(9)+r(221)*dn(32)*dn(7)+sorcch2o)/tch2oi

        if (totperoxy .le. 0.0) then
CCCMNN 0106   Correction: dn(29) in the following line changed to dn(19)
CCC         dn(19)=dn(29)+ (.66*r(122)*dn(32)*dn(32)+
         dn(19)=dn(19)+ (.66*r(122)*dn(32)*dn(32)+
     1   .7*r(138)*dn(66)*dn(66) +.5*r(146)*dn(68)*dn(68)
     5   +.62*r(199)*dn(73)*dn(73)
     6   +.5*r(201)*dn(78)*dn(78)
     7   +.3*r(202)*dn(79)*dn(79)+r(209)*dn(81)*dn(81))/tch2oi
         else
CCCMNN 0106   Correction: dn(29) in the following line changed to dn(19)
CCC         dn(19)=dn(29)+ (.66*r(122)*dn(32)+
         dn(19)=dn(19)+ (.66*r(122)*dn(32)+
     1   .7*r(138)*dn(66) +.5*r(146)*dn(68)
     5   +.62*r(199)*dn(73)
     6   +.5*r(201)*dn(78)
     7   +.3*r(202)*dn(79)+r(209)*dn(81))/tch2oi
         endif         
#ifdef ISOPRENE_PEROX
CMNN 0106 INCLUDE TERMS FROM ISOPRENE PEROXIDE REACTIONS
c
        dn(19) = dn(19) +  ((r(157)*0.345*dn(88)+r(158)*0.15*dn(91)
     1           +r(159)*0.08*dn(90)+
     1           r(160)*0.015*dn(89))*dn(9)+(0.69*dn(88)+0.3*dn(91)
     2           +0.16*dn(90))*phoj(52))/tch2oi
#endif
       else
        ipce_ch2o = 0
       endif

c (JRO) now compute ald2, mgly, ethooh and rooh in a similar fashion:
c ALD2
      tald2i = r(113)*dn(9)+r(114)*dn(7)+phoj(42)+phoj(43)+depald2+drip
      if (tald2i .gt. equili) then
       ipce_ald2 = 1
       pald2 = r(110)*dn(55)*dn(3)+r(112)*dn(55)*dn(7)+
     1   .3*r(121)*dn(57)*dn(9)
     2    +.8*r(123)*dn(55) + .25*r(126)*dn(61)*dn(3) +
     3    .3*r(127)*dn(61)*dn(7)  
     4    +.3*r(219)*dn(7)*dn(85) +.3*r(220)*dn(7)*dn(86)+
     4    .08*r(139)*dn(65)*dn(9) + .5*r(143)*dn(68)*dn(3)+
     5    .5*r(144)*dn(68)*dn(7)+
     7     .22*r(148)*dn(69)*dn(9)*dens + .47*r(149)*dn(70)*dn(1)
     8     +1.03*r(150)*dn(71)*dn(1)*fac_olei + r(151)*dn(70)*dn(9) +
     9     1.77*r(152)*dn(71)*dn(9)*fac_olei
c (PIP) add isoprene terms
     9    +.15*r(179)*dn(72)*dn(1)*fac_isop
     1    +.06*r(186)*dn(76)*dn(1)
     2    +.33*r(188)*dn(76)*dn(7)+.8*r(190)*dn(77)*dn(3)
     3    +.7*r(192)*dn(79)*dn(3)+.27*r(193)*dn(80)*dn(3)
     4    +.43*phoj(47)*dn(76)
     4    +phoj(51)*dn(57)+phoj(52)*dn(65)
     6    +.3*phoj(46)*dn(62)
     6    +.941*r(213)*dn(85)*dn(3)
        pald2=pald2+sorcald2
        dn(56)=pald2/tald2i
CCCMNN1203
        if (totperoxy .le. 0.) then
         dn(56)=dn(56)+ (+.21*r(129)*dn(61)*dn(61)
     1    +  .5*r(146)*dn(68)*dn(68)
     4    + r(200)*dn(77)*dn(77) + .7*r(202)*dn(79)*dn(79)
     5    + r(210)*dn(80)*dn(80)
     7    + .21*r(217)*dn(85)*dn(85)
     7    + .21*r(218)*dn(86)*dn(86))/tald2i
         else
         dn(56)=dn(56)+ (+.21*r(129)*dn(61)
     1    +  .5*r(146)*dn(68)
     4    + r(200)*dn(77) + .7*r(202)*dn(79)
     5    + r(210)*dn(80)
     7    + .21*r(217)*dn(85)
     7    + .21*r(218)*dn(86))/tald2i
         endif 
#ifdef ISOPRENE_PEROX
CMNN 0106  INCLUDE TERMS FROM ISOPRENE PEROXIDE REACTIONS
C
      dn(56) = dn(56)+((0.35*r(158)*dn(91)+0.135*r(160)*dn(89))*dn(9)
     1                + 0.7*dn(91)*phoj(52))/tald2i
#endif

      else
       ipce_ald2 = 0
      end if
c ETHOOH      
      tethoohi = r(121)*dn(9)+phoj(51)+depethooh+drip
      if (tethoohi .gt. equili) then
       ipce_ethooh = 1
       dn(57) = (r(111)*dn(55)*dn(10))/tethoohi
      else
       ipce_ethooh = 0
      end if
      
c ROOH      
      troohi = r(139)*dn(9) + phoj(52)+deprooh+drip
      if(troohi .gt. equili) then
       ipce_rooh = 1
       dn(65) = (r(128)*dn(61)*dn(10) + r(137)*dn(66)*dn(10)
#ifndef ISOPRENE_PEROX
CMNN 0106  REMOVE ISOPRENE TERMS.  ISOPRENE PEROXIDE IS NOW
CMNN        CONSIDERED AS A SEPARATE TRANSPORTED SPECIES
c (PIP) add isoprene terms
     1  +r(194)*dn(73)*dn(10)+r(196)*dn(80)*dn(10)
     2  +r(197)*dn(78)*dn(10)+r(198)*dn(79)*dn(10)
#endif
     3  +.67*r(207)*dn(81)*dn(10)
     6  +r(215)*dn(85)*dn(10)+r(216)*dn(86)*dn(10))/troohi
      else
       ipce_rooh = 0
      endif
      
c MGLY
      tmglyi = r(141)*dn(9) + r(142)*dn(7) + phoj(53)+depmgly+drip
      if(tmglyi .gt. equili) then
       ipce_mgly = 1
       dn(67) = (.04*r(149)*dn(70)*dn(1) +
     1   .07*r(150)*dn(71)*dn(1)*fac_olei+
c (PIP) add isoprene terms
     1   .9*r(184)*dn(74)*dn(1)+.95*r(185)*dn(75)*dn(1)
     2  +.68*r(186)*dn(76)*dn(1)+.16*r(191)*dn(78)*dn(3)
     3  +.3*r(192)*dn(79)*dn(3)+.39*r(193)*dn(80)*dn(3))/tmglyi
CCCMNN1203
       if (totperoxy .le. 0.0) then
        dn(67) = dn(67) + (.15*r(138)*dn(66)*dn(66)
     4  +.53*r(201)*dn(78)*dn(78)
     5  +.3*r(202)*dn(79)*dn(79)
     6  +.5*r(210)*dn(80)*dn(80))/tmglyi
        else
        dn(67) = dn(67) + (.15*r(138)*dn(66)
     4  +.53*r(201)*dn(78)
     5  +.3*r(202)*dn(79)
     6  +.5*r(210)*dn(80))/tmglyi
        endif
#ifdef ISOPRENE_PEROX
CMNN 0106   INCLUDE TERMS FROM ISOPRENE PEROXIDE REACTIONS
      dn(67) = dn(67) + ((0.15*dn(91)*r(158)+0.08*r(159)*dn(90)
     1         + 0.195*r(160)*dn(89))*dn(9) + (0.3*dn(91)+
     2         0.16*dn(90))*phoj(52))/tmglyi
#endif
      else
       ipce_mgly = 0
      endif
c (PIP) add MACR and MVK
c MACR
      tmacri=r(181)*dn(9)+r(184)*dn(1)+r(187)*dn(7)+phoj(48)
      if(tmacri.gt.equili) then
       ipce_macr=1
       dn(74)=(.39*r(179)*dn(72)*dn(1)+.23*r(189)*dn(73)*dn(3))/tmacri
       if (totperoxy .le. 0.0) then
        dn(74)=dn(74)+(.35*r(199)*dn(73)*dn(73))/tmacri
        else
        dn(74)=dn(74)+(.35*r(199)*dn(73))/tmacri
        endif
#ifdef ISOPRENE_PEROX
CMNN 0106  INCLUDE TERMS FROM ISOPRENE PEROXIDE REACTIONS
       dn(74) = dn(74)+(0.125*r(157)*dn(9)+0.25*phoj(52))*dn(88)/tmacri
#endif
      else
       ipce_macr=0
      endif

c MVK
      tmvki=r(182)*dn(9)+r(185)*dn(1)+phoj(49)
      if(tmvki.gt.equili) then
       ipce_mvk=1
       dn(75)=(.16*r(179)*dn(72)*dn(1)+.32*r(189)*dn(73)*dn(3))/tmvki
       if (totperoxy .le. 0.0) then
        dn(75) = dn(75)+(.27*r(199)*dn(73)*dn(73))/tmvki
        else
        dn(75) = dn(75)+(.27*r(199)*dn(73))/tmvki
        endif
#ifdef ISOPRENE_PEROX
CMNN 0106  INCLUDE TERMS FROM ISOPRENE PEROXIDE REACTIONS
        dn(75) = dn(75)+(0.175*r(157)*dn(9)+0.35*phoj(52))*dn(88)/tmvki
#endif
      else
       ipce_mvk=0
      endif      


CCCCC    EVALUATE HCO FROM PCE RELATIONS
      phco=phoj(24)+r(10)*dn(2)+r(83)*dn(9)+r(9)*dn(24)
      dn(31) = phco*dn(19)/(r(84)*dn(35))
#ifdef DIAGCHEM
      if(iprn>0)then
         write(300+iam,*)nstepat,katprn,'phco',phco,'dn19',dn(19),'r84',r(84),'dn35',dn(35)
         write(300+iam,*)'phoj24',phoj(24),'dn2',dn(2),'dn9',dn(9),'dn24',dn(24)
         call flush(300+iam)
      endif
#endif
     
c  fixed code 7/16/2007
c (JRO) Calculate pce for PAC
CCCMNN 1203
       if (totperoxy .le. 0.0) then
        cf1= r(124)
        cf2 = r(115)*dn(10) + r(116)*dn(3) + r(117)*dens*dn(4)
     1        + r(118)*dn(7)
        cf3 = (r(113)*dn(56)*dn(9) +
     1   r(114)*dn(56)*dn(7) + r(119)*dn(59)*dens  +
     2   r(135)*dn(66)*dn(3) + r(136)*dn(66)*dn(7) +
     3   .7*r(138)*dn(66)*dn(66) + r(141)*dn(67)*dn(9) +
     4   r(142)*dn(67)*dn(7)
     5   + .13*r(149)*dn(70)*dn(1) +.19*r(150)*dn(71)*dn(1)*fac_olei
c (PIP) add isoprene terms
     6   +.2*r(179)*dn(72)*dn(1)*fac_isop+.31*r(183)*dn(76)*dn(9)
     7   +.1*r(184)*dn(74)*dn(1)+.05*r(185)*dn(75)*dn(1)
     8   +.24*r(186)*dn(76)*dn(1)+.7*r(192)*dn(79)*dn(3)
     9   +.6*r(205)*dn(82)*dn(9)+.7*r(202)*dn(79)*dn(79)
     1   +r(206)*dn(81)*dn(3)+r(208)*dn(81)*dn(7)
     2   +.7*r(210)*dn(81)*dn(81)
     3   +.78*phoj(47)*dn(76)
     3   +phoj(48)*dn(74)+.3*phoj(49)*dn(75)+phoj(50)*dn(82)
     8   + phoj(44)*dn(59)+phoj(45)*dn(64) +phoj(53)*dn(67))
CCCMNN 0707
#ifdef ISOPRENE_PEROX
         cf3 = cf3+(0.35*r(158)*dn(9)+0.7*phoj(52))*dn(91)
#endif
C
        dn(58)=quadr(cf1,cf2,cf3)
        else
        tpac=1./(r(115)*dn(10) + r(116)*dn(3) + r(117)*dens*dn(4)
     1  + r(118)*dn(7) + r(124))
        ppac = (r(113)*dn(56)*dn(9) +
     1   r(114)*dn(56)*dn(7) + r(119)*dn(59)*dens  +
     2   r(135)*dn(66)*dn(3) + r(136)*dn(66)*dn(7) +
     3   .7*r(138)*dn(66) + r(141)*dn(67)*dn(9) +
     4   r(142)*dn(67)*dn(7)
     5   + .13*r(149)*dn(70)*dn(1) +.19*r(150)*dn(71)*dn(1)*fac_olei
c (PIP) add isoprene terms
     6   +.2*r(179)*dn(72)*dn(1)*fac_isop+.31*r(183)*dn(76)*dn(9)
     7   +.1*r(184)*dn(74)*dn(1)+.05*r(185)*dn(75)*dn(1)
     8   +.24*r(186)*dn(76)*dn(1)+.7*r(192)*dn(79)*dn(3)
     9   +.6*r(205)*dn(82)*dn(9)+.7*r(202)*dn(79)
     1   +r(206)*dn(81)*dn(3)+r(208)*dn(81)*dn(7)
     2   +.7*r(210)*dn(81)
     3   +.78*phoj(47)*dn(76)
     3   +phoj(48)*dn(74)+.3*phoj(49)*dn(75)+phoj(50)*dn(82)
     8   +phoj(44)*dn(59)+phoj(45)*dn(64) +phoj(53)*dn(67))
CCCMNN 0707
#ifdef ISOPRENE_PEROX
         ppac = ppac+(0.35*r(158)*dn(9)+0.7*phoj(52))*dn(91)
#endif
         dn(58)=ppac*tpac
         endif

CMNN 0106  INCLUDE TERMS FROM ISOPRENE PEROXIDE REACTIONS
C
CCC        dn(58) = dn(58) + (0.35*r(158)*dn(9)+0.7*phoj(52))*
CCC     1                    dn(91)*tpac

c  end fixed code 7/16/2007

c (PIP) calculate pce for mpan
c
       pmpac=(.5*r(181)*dn(74)*dn(9)
     1      +.5*r(187)*dn(74)*dn(7)+r(204)*dn(82)*dens)
CCCMNN 1203
       if (totperoxy .le. 0.) then
        cf1=r(209)
        cf2=r(203)*dn(4)*dens+r(206)*dn(3)
     1      +r(207)*dn(10)+r(208)*dn(7)
        cf3 = pmpac
        dn(81) = quadr(cf1,cf2,cf3)
        else
        tmpac=1./(r(203)*dn(4)*dens+r(206)*dn(3)
     1      +r(207)*dn(10)+r(208)*dn(7)+r(209))
        dn(81)=pmpac*tmpac
        endif
CC

       end do
CCC END OF INNER ITERATION LOOP
c  odd hydrogen  (final partitioning)
c
CCCCMNN022398  HOX FINAL PARTITIONING. PCE RELATION FOR OH IS USED
CCCC           IN THE DERIVATION OF RHO2OH.
      oh_old = dn(9)
      thor=r(6)*dn(2)+r(85)*dn(20)+r(72)*dn(36)
     &   +r(212)*dn(84)
      xlh=r(11)*xo2*dens+r(15)*dn(1)
      rhoh=thor/xlh
      if (dn(9) .gt. 1.0e-3) rhoh=rhoh+(phoj(24)*dn(19)+
     1    r(30)*dn(36)*dn(27))/dn(9)/xlh
CCC   P(OH)
      datmp = phoj(6)*dn(5)*hno3g_r+phoj(8)*dn(13)+2.0*phoj(9)*dn(8)+
     1 phoj(26)*dn(38)+phoj(28)*dn(21)+dn(27)*(2.0*r(3)*dn(13)+
     2  r(30)*dn(36)+r(32)*dn(18))+dn(2)*(r(10)*dn(19)+
     3  r(42)*dn(38)+r(54)*dn(14)+r(65)*dn(8))


c (JRO) Include these nmhc reactions for P(OH) not from HO2     
      datmp = datmp  + .12*r(147)*dn(69)*dn(1) +
     2  .33*r(149)*dn(70)*dn(1) + .6*r(150)*dn(71)*dn(1)*fac_olei
c (PIP) add isoprene terms
     3  +.27*r(179)*dn(72)*dn(1)*fac_isop+.21*r(184)*dn(74)*dn(1)
     4  +.16*r(185)*dn(75)*dn(1)+.48*r(186)*dn(76)*dn(1)
     5  + phoj(51)*dn(57) + phoj(52)*dn(65)+pjhno4b*dn(39)     
#ifdef ISOPRENE_PEROX
CMNN 0106  INCLUDE PHOTOLYSIS OF PEROXIDE FROM ISOPRENE
       datmp = datmp + phoj(52)*(dn(88)+dn(90)+dn(91))
#endif

c (JRO) add in HONO reactions
       datmp=datmp+phoj(7)*dn(6)

CCCC      dbtmp = r(7)*dn(2)+r(20)*dn(3)+r(28)*dn(1)+r(98)*dn(44)
CCCMNN 12/03   R(98)*DN(44) IS INCLUDED ONLY DURING DAYTIME
      dbtmp = r(7)*dn(2)+r(20)*dn(3)+r(28)*dn(1)
      if (kdn .gt. 0) dbtmp = dbtmp + r(98)*dn(44)
      
c (JRO) add a production of OH from HO2+NO3
      dbtmp=dbtmp+r(172)*dn(7)
      
      dctmp = r(6)*dn(2)+r(12)*dn(1)+2.*r(16)*dn(9)+r(17)*dn(10)+
     1  r(18)*dens*dn(4)+r(21)*dn(8)+r(29)*dn(5)*hno3g_r+r(31)*dn(37)+
     2 r(52)*dn(38)+r(53)*dn(14)+2.*r(64)*dens*dn(9)+r(66)*dn(18)+
     3 r(70)*dn(39)+r(72)*dn(36)+(r(80)+r(81))*dn(25)+r(83)*dn(19)+
     4  r(85)*dn(20)+r(86)*dn(23)+0.7*r(87)*dn(21)-r(15)*dn(1)*rhoh
     5  +r(212)*dn(84)
CCCMNN 01/08   ADD REACTION (76)
       dctmp = dctmp + r(76)*dn(20)*dens

c (JRO) add nmhc OH loss reactions here:
      dctmp = dctmp + r(109)*dn(54) + r(113)*dn(56) + r(120)*dn(59)
     1 + .7*r(121)*dn(57)+r(125)*dn(60) + r(134)*dn(64) +
     2 .51*r(139)*dn(65) + r(140)*dn(62) + r(141)*dn(67) +
     3  r(148)*dn(69)*dens + r(151)*dn(70)
     4 + r(152)*dn(71)*fac_olei 
c (PIP) add isoprene terms
     5  +r(178)*dn(72)*fac_isop+r(181)*dn(74)
     6  +r(182)*dn(75)+r(183)*dn(76)+r(205)*dn(82)
     6  +r(211)*dn(83)


c (JRO) another inorganic OH loss from OH+NO3 r(175)
       dctmp=dctmp+r(175)*dn(7)

c (JRO) add in HONO reactions
       dctmp=dctmp+r(171)*dn(6)+r(19)*dn(3)*dens
      
#ifdef ISOPRENE_PEROX
CMNN 0106
       dctmp = dctmp + 0.5*(r(157)*dn(88)+r(158)*dn(91)+r(159)*dn(90)+
     1                 r(160)*dn(89))
#endif

       dohho2b = (datmp/dn(10)+dbtmp)/dctmp
       rho2oh = 1.0/dohho2b
C
      bet=(r(3)*dn(13)+r(30)*dn(36)+.5*r(32)*dn(18))*dn(27)+phoj(8)*
     1     dn(13)+(phoj(9)+r(65)*dn(2))*dn(8)
      pec=2.*bet+phoj(6)*dn(5)*hno3g_r
      pec1 = pec + 2.0*phoj(24)*dn(19) + r(79)*dn(32)*dn(3) +
     1       2.0*phoj(28)*dn(21)+ (pjhno4a+pjhno4b+r(62)*dens)*dn(39) + 
     1   phoj(26)*dn(38) + r(9)*dn(19)*dn(24)+2.0*r(10)*dn(19)*dn(2)
      pec1 = pec1 + (phoj(34)+r(89)*dn(2))*dn(46)

c (JRO) Add HONO back in
         pec1=pec1+phoj(7)*dn(6)
       
c (JRO) additional P(HOx) from nmhc reactions
      pec1 = pec1 + r(110)*dn(55)*dn(3) + r(112)*dn(55)*dn(7) +
     2       .32*r(122)*dn(32) 
     2      + .6*r(123)*dn(55)
     7   +.54*r(217)*dn(85)
     8   +.54*r(218)*dn(86)
     3      + .76*r(126)*dn(61)*dn(3) + .9*r(127)*dn(61)*dn(7) +
     7      .9*r(219)*dn(7)*dn(85)+.9*r(220)*dn(7)*dn(86)
     7       +.941*r(213)*dn(85)*dn(3)+.941*r(214)*dn(86)*dn(3)+
     4       .54*r(129)*dn(61) 
     4       + .5*r(143)*dn(68)*dn(3) +
     5       .5*r(144)*dn(68)*dn(7)
     7       + .34*r(147)*dn(69)*dn(1) + 
     8       .59*r(149)*dn(70)*dn(1) + 
     8       .82*r(150)*dn(71)*dn(1)*fac_olei+
c (PIP) add isoprene terms
     9       .34*r(179)*dn(72)*dn(1)*fac_isop
     9       +.32*r(184)*dn(74)*dn(1)
     1       +.27*r(185)*dn(75)*dn(1)
     2       +.55*r(186)*dn(76)*dn(1)+.5*r(187)*dn(74)*dn(7)
     3       +r(188)*dn(76)*dn(7)+.91*r(189)*dn(73)*dn(3)
     4       +.8*r(190)*dn(77)*dn(3)+r(191)*dn(78)*dn(3)
     5       +.3*r(192)*dn(79)*dn(3)+r(193)*dn(80)*dn(3)
     6       +.62*r(199)*dn(73)
     7       +.91*r(201)*dn(78)
     8       +.3*r(202)*dn(79)
     9       +1.22*phoj(47)*dn(76)+phoj(48)*dn(74)
     1       +r(170)*dn(19)*dn(7)
     1       +phoj(42)*dn(56) + 2.*phoj(51)*dn(57)
     2       +2.*phoj(52)*dn(65)
     6       +0.9*phoj(46)*dn(62) + phoj(53)*dn(67)
     7       +r(221)*dn(32)*dn(7)
cc
#ifdef ISOPRENE_PEROX
CMNN 0106  TERMS FROM ISOPRENE PEROXIDE REACTIONS
         pec1 = pec1 + phoj(52)*(2.0*(dn(88)+dn(90))+1.3*dn(91))
#endif

      aec=r(29)*dn(5)*hno3g_r+r(31)*dn(37)+r(66)*dn(18)+r(86)*dn(23)
     1    +dn(4)*(r(18)+r(57)*rho2oh)*dens
CCC
      aec1 = aec + r(70)*dn(39)+
c (JRO) note r(87) was corrected to be multiplied by 0.7
     1       r(78)*dn(32)*rho2oh + .7*r(87)*dn(21) +
     2       r(33)*dn(25)*rho2oh + r(52)*dn(38) +
     3       r(53)*dn(14) + r(81)*dn(25) +
     4       r(49)*dn(24)*rho2oh
      aec1 = aec1 + r(98)*dn(44)*rho2oh

c JRO nmhc additions for loss of HOx/[OH]
      aec1 = aec1 + r(109)*dn(54)+r(111)*dn(55)*rho2oh +
     1       r(113)*dn(56) + r(115)*dn(58)*rho2oh + r(120)*dn(59)
     2      +.7*r(121)*dn(57) + r(125)*dn(60) + r(128)*dn(61)*rho2oh
     7      +r(215)*dn(85)*rho2oh+r(216)*dn(86)*rho2oh
     3      +r(132)*dn(63)*rho2oh + r(134)*dn(64) + 
     4      r(137)*dn(66)*rho2oh + .51*r(139)*dn(65) +
     5      r(140)*dn(62) + r(141)*dn(67) + r(145)*dn(68)*rho2oh
c (PIP) add isoprene terms
     6      +r(178)*dn(72)*fac_isop+r(181)*dn(74)
     7      +r(182)*dn(75)+r(183)*dn(76)
     8      +r(194)*dn(73)*rho2oh+r(195)*dn(77)*rho2oh
     9      +r(196)*dn(80)*rho2oh+r(197)*dn(78)*rho2oh
     1      +r(198)*dn(79)*rho2oh+r(205)*dn(82)
     2      +r(207)*dn(81)*rho2oh
     9      +r(211)*dn(83)

c (JRO) add in HONO reactions
chono
         aec1=aec1+r(19)*dn(3)*dens+r(171)*dn(6)

#ifdef ISOPRENE_PEROX
CMNN 0106   INCLUDE TERMS FROM ISOPRENE PEROXIDE REACTIONS
         aec1 = aec1 + r(157)*dn(88)+r(158)*dn(91)+r(159)*dn(90)+
     1                 r(160)*dn(89)
#endif

      bec1=2.*(r(16)+r(17)*rho2oh+r(64)*dens+r(22)*rho2oh*rho2oh)
c
c prevent OH from going to zero
      if ((4.0*bec1*pec1)/(aec1*aec1) .gt. 1.0e-4) then
        dn(9)=(sqrt(aec1*aec1-4.*bec1*(-pec1))-aec1)/(2.*bec1)
      else
        dn(9) = pec1/aec1
      endif
      dn(10)=rho2oh*dn(9)
      dn(26) = rhoh*dn(9)

c  convergence checks

c check convergence on 40 species:
c (PIP) check convergence on 51 species
c      do ijen=1,40
       do ijen=1,51
cjjj Fix for floating overflow
cjjj       if(dn(ckspid(ijen)).ne.0)ck(ijen)=
       ck(ijen)=0.
       if(dn(ckspid(ijen)).gt. 1.e-3) ck(ijen)=
     $  abs(dn(ckspid(ijen))-old(ijen))/dn(ckspid(ijen)) 
      enddo

c      do 776 icheck=1,40
       do 776 icheck=1,51
       if(ck(icheck).gt.(.001))goto 51
 776  continue
      goto 52                  
 51   continue

      end do
CCCCMNN022398

c  no convergence: 
c      ierr=1
c      print*,'OH conv',oh_old,dn(9),'ox',ox

52    continue

c  partitioning of remaining species
      dn(28)=rnno*dn(3)


c
c  source terms
c


c  no3  source term
      if(ipce_no3.eq.1)then
        chem_tend(27) = (dn(7)-xno3)/timinc
       else
        tno3i = r(112)*dn(55)+r(114)*dn(56)+r(118)*dn(58) +
     2   r(127)*dn(61) + r(131)*dn(63) + r(136)*dn(66) +
     7   r(219)*dn(85)+r(220)*dn(86)+
     3   r(142)*dn(67) + r(144)*dn(68) + r(153)*dn(70) +
     4   r(154)*dn(71)*fac_olei 
c (PIP) add isoprene terms
     5   +r(180)*dn(72)*fac_isop+r(187)*dn(74) 
     6   +r(188)*dn(76)+r(208)*dn(81)
     7   +r(170)*dn(19)+r(172)*dn(10)+r(173)+
     8   r(174)*dn(20)+r(175)*dn(9) + r(35)*dn(4)*dens+
     9   r(221)*dn(32)
     
       pno3=r(14)*dn(1)*dn(4)+r(29)*dn(5)*dn(9)*hno3g_r+
     1    r(34)*dn(4)*dn(2)*dens+dn(12)*r(36)*dens

       if (flgnoxchem) then
        tno3i=tno3i-dn(4)*r(35)*dens
        pno3=pno3-dn(12)*r(36)*dens-r(14)*dn(1)*dn(4)
        else
        chem_tend(27) = petend(xno3,pno3,tno3i,timinc,tdenom)
        endif
      end if
c
c  n2o5 source term
      if (ipce_n2o5.eq.1)then
       chem_tend(5)=(dn(12)-xn2o5)/timinc
       else
        pn2o5=r(35)*dn(4)*dn(7)*dens
        tn2o5i=phoj(13)+r(36)*dens+hr(4)*dn(14)+hr(1)*dn(13)
     1        +r(176)*dn(13)        
        if (flgnoxchem) then
         pn2o5 = 0.0
         tn2o5i = hr(4)*dn(14)+hr(1)*dn(13)+r(176)*dn(13)
         else
         chem_tend(5) = petend(xn2o5,pn2o5,tn2o5i,timinc,tdenom)
         endif
       end if

c  no2  source term
c If daytime, always compute tendency based on PCE partitioning
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'kdn',kdn
      endif
#endif
#endif
#ifdef DIAGFV3
      if(iat.eq.1.and.jat.eq.1.and.tile.eq.1)then
        write(6,*)'kat',kat,'kdn',kdn,'lon',xgrid(iat-ibeg+1,jat),'ygrd',ygrid(iat-ibeg+1,jat)
        call flush(6)
      endif
#endif
      if(kdn .gt. 0)then
#ifdef DIAGHTAP
#ifdef DOCHEMJ
        if(iat.eq.120.and.jat.eq.130)then
             write(6,*)'daytime chem kdn',kdn,'kat','ktf',ktf
        endif
#endif
#endif
       chem_tend(28) = (dn(4)-xno2)/timinc
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'chem_tend(28)a',chem_tend(28)
      endif
#endif
#endif

c If nighttime, assume NO2 is always long-lived
       else
       pno2=r(36)*dn(12)*dens
     2  +r(62)*dn(39)*dens+r(70)*dn(39)*dn(9)
     2  +r(119)*dn(59)*dens
!       if(abs(pno2)>1.e20)then
!        write(6,*)'cpno2',pno2
!        call flush(6)
!       endif
!       if(.not.pno2<=0.0.and..not.pno2>=0.0)then
!            write(6,*)'pno2 nan ',pno2,dens
!            call flush(6)
!       endif

c JRO - need to add prod of no2 from nighttime no3 rxns!
CCCMNN0405  dn(48) changed to dn(58) in the following line
CCCMNN0405       pno2=pno2+r(112)*dn(55)*dn(7)+r(118)*dn(48)*dn(7)
       pno2=pno2+r(112)*dn(55)*dn(7)+r(118)*dn(58)*dn(7)
     7  +r(120)*dn(59)*dn(9)+r(127)*dn(61)*dn(7)+
     7  r(131)*dn(63)*dn(7)+r(136)*dn(66)*dn(7)+
     7  r(144)*dn(68)*dn(7)*1.5+r(172)*dn(10)*dn(7)+
     7  r(174)*dn(20)*dn(7)+r(175)*dn(9)*dn(7)+
     7  r(219)*dn(85)*dn(7)+r(220)*dn(86)*dn(7)+
     7  r(221)*dn(32)*dn(7)
c JRO - add back in dn(3) terms since in rare cases it may
c    be > 0
!       if(abs(pno2)>1.e20)then
!        write(6,*)'bpno2',pno2
!        call flush(6)
!       endif
!       if(.not.pno2<=0.0.and..not.pno2>=0.0)then
!            write(6,*)'pno2 2nan ',pno2,dens
!            call flush(6)
!       endif
       pno2=pno2+dn(3)*(r(13)*dn(1)+2.*r(23)*dn(7)+
     1  r(79)*dn(32)+r(110)*dn(55)+
     2  r(116)*dn(58)+r(126)*.84*dn(61)+r(130)*dn(63)+
     3  r(135)*dn(66)+r(143)*1.5*dn(68)
c (PIP) add isoprene terms
     4  +.91*r(189)*dn(73)+1.2*r(190)*dn(77)
     5  + r(191)*dn(78)+r(192)*dn(79)
     6  + r(193)*dn(80)+r(206)*dn(81)
     7  +r(213)*dn(85)*.941+r(214)*dn(86)*.941)
!       if(abs(pno2)>1.e20)then
!        write(6,*)'apno2',pno2
!        call flush(6)
!       endif
!       if(.not.pno2<=0.0.and..not.pno2>=0.0)then
!            write(6,*)'pno2 3nan ',pno2,dens
!            call flush(6)
!       endif
       
       tno2i=r(14)*dn(1)+
     1  r(35)*dn(7)*dens+r(57)*dn(10)*dens+
     2  r(67)*dn(25)*dens+r(100)*dn(44)*dens+r(117)*dn(58)*dens

       tno2i=tno2i+depno2 
       tno2=1./tno2i
c
       if (flgnoxchem) then
        pno2=pno2-r(36)*dn(12)*dens
!      if(abs(pno2)>1.e20)then
!       write(6,*)'pno2',pno2
!       call flush(6)
!      endif
!      if(.not.pno2<=0.0.and..not.pno2>=0.0)then
!           write(6,*)'pno2 4nan ',pno2,dens
!           call flush(6)
!      endif
        tno2i=tno2i-r(35)*dn(7)*dens-r(14)*dn(1)
        else
        if (tno2i .gt. 0.) then
         ratio=pno2/tno2i
         decay=exp(-timinc*tno2i)
         chem_tend(28)=(dn(4)*decay + ratio*(1.0-decay) - xno2)*tdenom
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'chem_tend(28)b',chem_tend(28)
      endif
#endif
#endif
         else
         chem_tend(28)=pno2
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'chem_tend(28)c',chem_tend(28)
      endif
#endif
#endif
         end if
        endif
       endif
CCCCC CALL EXPLICIT INTEGRATION FOR NOX SPECIES IN THE TROPOSPHERE,NIGHT
CCCCC    (flgnoxchem = .true.)
CCCCC THIS IS DONE ONLY FOR NIGHT TIME
      if (flgnoxchem .and. kdn .lt. 0) then
!        if(abs(dn(4))>1.e20.or.abs(dn(7))>1.e20.or.abs(dn(12))>1.e20)then
!           write(6,*)'dn4',dn(4),dn(7),dn(12),'flg',flgnoxchem,kdn
!           call flush(6)
!        endif
         rr1=r(14)*dn(1)
         rr2=r(35)*dens
         rr3=r(36)*dens
#ifdef DIAGSNO2
#ifdef DOCHEMJ
         if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
           write(6,*)'rr1',rr1,'r14',r(14),'dn1',dn(1)
           write(6,*)'rr2',rr2,'r35',r(35),'dens',dens
           write(6,*)'rr3',rr3,'r36',r(36)
           call flush(6)
         endif
#endif
#endif
!         write(300+iam,*)'dn4',dn(4),dn(7),dn(12),pno2,tno2i,pno3,tno3i,tn2o5i,fac_no3
!         call flush(300+iam)
         call intg (dn(4),dn(7),dn(12),pno2,tno2i,pno3,tno3i,tn2o5i,
     1    rr1,rr2,rr3,ctemp,timinc,fac_no3)
c
CCCMNN 10/03   RESET FAC_NO3=1 IF TNO3>EQUIL
          if (tno3i*equil .lt. 1.0) fac_no3 = 1.0
CCCC
          chem_tend(28) = (ctemp(1)-xno2)/timinc
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'chem_tend(28)d',chem_tend(28),'ctemp1',ctemp(1)
     *  ,'xno2',xno2,'timinc',timinc
      endif
#endif
#endif
          chem_tend(27) = (ctemp(2)-xno3)/timinc
          chem_tend(5) = (ctemp(3)-xn2o5)/timinc
        endif

c  odd oxygen source term
      pox=2.*phoj(1)*xo2+r(20)*dn(10)*dn(3)+r(79)*dn(32)*dn(3)+
     1  r(29)*dn(5)*hno3g_r*dn(9)
#ifdef DIAGFV3
      if(iat.eq.1.and.jat.eq.1.and.tile.eq.1)then
         write(6,*)'pox top',pox,'phoj',phoj(1),'xo2',xo2
         call flush(6)
      endif
#endif

c (JRO) include these nmhc additions and recall that Ox now also 
c  includes pan and hno4:   OXMOD=OX+NO2+HNO3+2*NO3+3*N2O5+PAN+HNO4
c (PIP) oxmod includes mpan
c (PIP) OXMOD=OX+NO2+HNO3+2*NO3+3*N2O5+PAN+HNO4+MPAN

      pox=pox +r(110)*dn(55)*dn(3) +
     3  .67*r(115)*dn(58)*dn(10) + r(116)*dn(58)*dn(3)
     4  +.84*r(126)*dn(61)*dn(3) +r(130)*dn(63)*dn(3) +
     5  r(135)*dn(66)*dn(3) + 1.5*r(143)*dn(68)*dn(3) +
c (PIP) add isoprene terms
     7  .91*r(189)*dn(73)*dn(3)+1.2*r(190)*dn(77)*dn(3)
     8  +r(191)*dn(78)*dn(3)+r(192)*dn(79)*dn(3)
     9  +r(193)*dn(80)*dn(3)

     1  +phoj(46)*dn(62)
     7  +r(213)*dn(85)*dn(3)*.941+
     7  r(214)*dn(86)*dn(3)*.941
#ifdef DIAGFV3
      if(iat.eq.1.and.jat.eq.1.and.tile.eq.1)then
       write(6,*)'pox 2 ',pox
       call flush(6)
      endif
#endif

chono
      pox=pox+r(171)*dn(6)*dn(9)
#ifdef DIAGFV3
      if(iat.eq.1.and.jat.eq.1.and.tile.eq.1)then
          write(6,*)'pox f',pox,'dn6',dn(6),'dn9',dn(9)
          call flush(6)
      endif
#endif

      dox=dn(1)*(2.*r(5)*dn(2)+r(12)*dn(9)+r(15)*dn(26)+
     1  r(28)*dn(10))+2.*phoj(10)*dn(7)+
     2  dn(2)*(r(6)*dn(9)+r(7)*dn(10)+2.*r(8)*dn(4)+
     3  2.*r(45)*dn(25))+
     4  2.*phoj(29)*dn(40)+(2.*r(97)*dn(2)+
     5  2.*(r(102)+r(103))*dn(25))*dn(44)+
     6  phoj(26)*dn(38)+(phoj(34)+r(89)*dn(2))*dn(46)+
     7  dn(27)*(r(3)*dn(13)+r(32)*dn(18))+
     8  depo3*dn(1) + 2.*r(104)*dn(44)*dn(44)
CCCCC  MOD 7/2000
       dox = dox + drip*hno3g_r*dn(5) + hr(1)*dn(13)*dn(12)
#ifdef DIAGFV3
      if(iat.eq.1.and.jat.eq.1.and.tile.eq.1)then
         write(6,*)'dox1',dox,'depo3',depo3,'dn1',dn1,'phoj10',phoj(10)
c      if(iat.eq.1.and.jat.eq.121)then
c          write(6,*)'dox1',dox,'diff',dox-dox0
          dox0=dox
      endif
#endif
     
c JRO nmhc additions to dox (recall ox includes pan & HNO4, too)
c     OXMOD=OX+NO2+HNO3+2*NO3+3*N2O5+PAN+HNO4
      dox=dox +(r(112)*dn(55)*dn(7) + r(114)*dn(56)*dn(7) + 
     1  r(118)*dn(58)*dn(7)
     2  +r(127)*dn(61)*dn(7) + r(131)*dn(63)*dn(7) +
     7  r(219)*dn(85)*dn(7) + r(220)*dn(86)*dn(7)+
     3  r(136)*dn(66)*dn(7) + r(142)*dn(67)*dn(7) +
     4  .5*r(144)*dn(68)*dn(7))*fac_no3 + r(147)*dn(69)*dn(1)
     5  +r(149)*dn(70)*dn(1) + r(150)*dn(71)*dn(1)*fac_olei +
     6  (2.*r(153)*dn(70)*dn(7)
     6  +2.*r(154)*dn(71)*dn(7)*fac_olei
     7  +r(170)*dn(19)*dn(7))*fac_no3+
c (PIP) add isoprene terms
     8  r(179)*dn(72)*dn(1)*fac_isop
     9  +2.*r(180)*dn(72)*dn(7)*fac_no3*fac_isop
     1  +r(184)*dn(74)*dn(1)+r(185)*dn(75)*dn(1)
     2  +r(186)*dn(76)*dn(1)+(1.5*r(187)*dn(74)*dn(7)
     3  +2.*r(188)*dn(76)*dn(7)+r(208)*dn(81)*dn(7)
     8  +r(221)*dn(32)*dn(7))*fac_no3

c (JRO) additional inorganic (kind of) reactions
c   172: HO2+NO3->OH+NO2+O2
c   173: NO3+M->NO+O2
c   174: NO3+CO->NO2+CO2
c   175: NO3+OH->HO2+NO2
c   176: N2O5+H2O->2HNO3 (gas phase)
      dox=dox+r(172)*dn(10)*dn(7)*fac_no3+2.*r(173)*dn(7)*fac_no3+
     1 r(174)*dn(7)*fac_no3*dn(20)+r(175)*dn(7)*fac_no3*dn(10)
     2 +r(176)*dn(12)*dn(13)
#ifdef DIAGFV3
      if(iat.eq.1.and.jat.eq.1.and.tile.eq.1)then
c      if(iat.eq.1.and.jat.eq.121)then
          write(6,*)'dox2',dox,'diff',dox-dox0
          dox0=dox
      endif
#endif
C
      dox=dox+dephno3*dn(5)+depno2*dn(4)
c      if(iat.eq.1.and.jat.eq.121)then
#ifdef DIAGFV3
      if(iat.eq.1.and.jat.eq.1.and.tile.eq.1)then
          write(6,*)'dox3',dox,'diff',dox-dox0,'dephno3',dephno3,'depno2',depno2
          write(6,*)'dn5',dn(5),'dn4',dn(4)
          dox0=dox
      endif
#endif
      chem_tend(1)=pox-dox
      if(isnan(chem_tend(1)))then
         write(6,*)'at aaa pox',pox,dox,iatchem,jatchem,katchem
         call flush(6)
      endif
#ifdef DIAGFV3
      if(iat.eq.1.and.jat.eq.1.and.tile.eq.1)then
!      if(iat.eq.30.and.jat.eq.15)then
        write(6,*)kat,'chem_tend aa',chem_tend(1),'pox',pox,'dox',dox,'ksf',ksf
      endif
#endif

c      if(iat.eq.1.and.jat.eq.121)then
c        write(6,*)kat,'chem_tend',chem_tend(1),'pox',pox,'dox',dox,'ksf',ksf
c      endif
c      tox= frox * ox/dox
      tox=ox/dox
      if (tox .lt. equil_fam) then
        chem_tend(1)=0.
!        if(iat.eq.1.and.jat.eq.1)then
!          write(6,*)'zero out aa tox',tox,'equil',kat,equil_fam
!          call flush(6)
!        endif
      end if
c (JRO) NOTE -I  have not correctly adjusted these yet...
c   Will wait to understand pox and dox first...
c prodloss: 1=P, 2=L_ox, 3=L_hox, 4=L_nox, 5=L_clx, 6=L_brx
c        prodloss(1) = 2.*phoj(1)*xo2
c     +         +(r(20)*dn(10)*dn(3)+r(79)*dn(32)*dn(3))
c     +         +r(29)*dn(5)*hno3g_r*dn(9)
c        prodloss(2) = 2.*dn(1)*r(5)*dn(2)
c     +         +dn(27)*(r(3)*dn(13)+r(32)*dn(18))
c        prodloss(3) = dn(1)*(r(12)*dn(9)+r(15)*dn(26)+r(28)*dn(10))
c     +         +dn(2)*(r(6)*dn(9)+r(7)*dn(10))
c        prodloss(4) = 2.*dn(2)*r(8)*dn(4)+2.*phoj(10)*dn(7)
c        prodloss(4) = prodloss(4)+drip*hno3g_r*dn(5)
c     +                + hr(1)*dn(13)*dn(12)
c        prodloss(5) = 2.*dn(2)*r(45)*dn(25)+2.*phoj(29)*dn(40)
c     +         +phoj(26)*dn(38)
c        prodloss(6) = (2.*r(97)*dn(2)+2.*(r(102)+r(103))*dn(25))*dn(44)
c     +         +phoj(34)*dn(46) + 2.*r(104)*dn(44)*dn(44)
CCC JAA 20080225 NOW STORE SURFACE DEPOSITION IN PRODLOSS(13)
c        prodloss(13) = depo3*dn(1)+dephno3*dn(5)+depno2*dn(4)

C ajl new code change prodloss to oxprodloss and put other chemical in their own names
        oxprodloss(1) = 2.*phoj(1)*xo2
     +         +(r(20)*dn(10)*dn(3)+r(79)*dn(32)*dn(3))
     +         +r(29)*dn(5)*hno3g_r*dn(9)
        oxprodloss(2) = 2.*dn(1)*r(5)*dn(2)
     +         +dn(27)*(r(3)*dn(13)+r(32)*dn(18))
        oxprodloss(3) = dn(1)*(r(12)*dn(9)+r(15)*dn(26)+r(28)*dn(10))
     +         +dn(2)*(r(6)*dn(9)+r(7)*dn(10))
        oxprodloss(4) = 2.*dn(2)*r(8)*dn(4)+2.*phoj(10)*dn(7)
        oxprodloss(4) = oxprodloss(4)+drip*hno3g_r*dn(5)
     +                + hr(1)*dn(13)*dn(12)
        oxprodloss(5) = 2.*dn(2)*r(45)*dn(25)+2.*phoj(29)*dn(40)
     +         +phoj(26)*dn(38)
        oxprodloss(6) = (2.*r(97)*dn(2)+2.*(r(102)+r(103))*dn(25))*dn(44)
     +         +phoj(34)*dn(46) + 2.*r(104)*dn(44)*dn(44)
        oxprodloss(9)= depo3*dn(1)+dephno3*dn(5)+depno2*dn(4)
!        if(oxprodloss(9)/=0.0)then
!        write(6,*)'oxprodloss9',iat,jat,oxprodloss(9),'depo3',depo3,'dn1',dn(1),
!     &  'hno3',dephno3,dn(5),'no2',depno2,dn(4)
!        endif
!      ajl oxprodloss(5) will be Brad's cl ox loss
!      ajl oxprodloss(6) will be Brad's br ox loss with an addition below

c    ajl new terms 10/2013

c       first add in extra pox terms

c (JRO) include these nmhc additions and recall that Ox now also 
c  includes pan and hno4:   OXMOD=OX+NO2+HNO3+2*NO3+3*N2O5+PAN+HNO4
c (PIP) oxmod includes mpan
c (PIP) OXMOD=OX+NO2+HNO3+2*NO3+3*N2O5+PAN+HNO4+MPAN
!  ajl this is new prod term nmhc to output for Brad
      prodloss3= r(110)*dn(55)*dn(3) +
     3  .67*r(115)*dn(58)*dn(10) + r(116)*dn(58)*dn(3)
     4  +.84*r(126)*dn(61)*dn(3) +r(130)*dn(63)*dn(3) +
     5  r(135)*dn(66)*dn(3) + 1.5*r(143)*dn(68)*dn(3) +
c (PIP) add isoprene terms
     7  .91*r(189)*dn(73)*dn(3)+1.2*r(190)*dn(77)*dn(3)
     8  +r(191)*dn(78)*dn(3)+r(192)*dn(79)*dn(3)
     9  +r(193)*dn(80)*dn(3)

     1  +phoj(46)*dn(62)
     7  +r(213)*dn(85)*dn(3)*.941+
     7  r(214)*dn(86)*dn(3)*.941

      prodloss3=prodloss3+r(171)*dn(6)*dn(9)

!     7 will be extra pox terms
!  This will be Brad's nhmc ox production
      oxprodloss(7)=prodloss3


c       this was extra term from origianl dox but not in prodloss(1-6)
c       Brad want to check out if this was an omissiong in prodloss or error in original code

        prodlossn0=r(89)*dn(2)*dn(46)

c       extra dox terms added later in dox term above

c JRO nmhc additions to dox (recall ox includes pan & HNO4, too)
c     OXMOD=OX+NO2+HNO3+2*NO3+3*N2O5+PAN+HNO4
!   ajl this is new loss term for Brad due to nmhc
        prodlossn1=(r(112)*dn(55)*dn(7) + r(114)*dn(56)*dn(7) + 
     1  r(118)*dn(58)*dn(7)
     2  +r(127)*dn(61)*dn(7) + r(131)*dn(63)*dn(7) +
     7  r(219)*dn(85)*dn(7) + r(220)*dn(86)*dn(7)+
     3  r(136)*dn(66)*dn(7) + r(142)*dn(67)*dn(7) +
     4  .5*r(144)*dn(68)*dn(7))*fac_no3 + r(147)*dn(69)*dn(1)
     5  +r(149)*dn(70)*dn(1) + r(150)*dn(71)*dn(1)*fac_olei +
     6  (2.*r(153)*dn(70)*dn(7)
     6  +2.*r(154)*dn(71)*dn(7)*fac_olei
     7  +r(170)*dn(19)*dn(7))*fac_no3+
c (PIP) add isoprene terms
     8  r(179)*dn(72)*dn(1)*fac_isop
     9  +2.*r(180)*dn(72)*dn(7)*fac_no3*fac_isop
     1  +r(184)*dn(74)*dn(1)+r(185)*dn(75)*dn(1)
     2  +r(186)*dn(76)*dn(1)+(1.5*r(187)*dn(74)*dn(7)
     3  +2.*r(188)*dn(76)*dn(7)+r(208)*dn(81)*dn(7)
     8  +r(221)*dn(32)*dn(7))*fac_no3

c (JRO) additional inorganic (kind of) reactions
c   172: HO2+NO3->OH+NO2+O2
c   173: NO3+M->NO+O2
c   174: NO3+CO->NO2+CO2
c   175: NO3+OH->HO2+NO2
c   176: N2O5+H2O->2HNO3 (gas phase)
       prodlossn2=r(172)*dn(10)*dn(7)*fac_no3+2.*r(173)*dn(7)*fac_no3+
     1 r(174)*dn(7)*fac_no3*dn(20)+r(175)*dn(7)*fac_no3*dn(10)
     2 +r(176)*dn(12)*dn(13)
c       sum of extra dox terms
c        prodlossn(2)=prodlossn1+prodlossn2

!     8 will be extra dox terms
!     ajl now need to add to 6 since it is a bromine loss
!      oxprodloss(8)=prodlossn0+prodlossn1+prodlossn2
!     8 will be Brad's nmhc ox loss
      oxprodloss(8)=prodlossn1+prodlossn2
!     6 will be Brad's br ox loss
      oxprodloss(6)=oxprodloss(6)+prodlossn0
c      if(iat.eq.1.and.jat.eq.121)then
c        write(6,*)'dox',dox,' 2+6+8',oxprodloss(2)+oxprodloss(3)+oxprodloss(4)+oxprodloss(5)
c     * +oxprodloss(6)+oxprodloss(8)
c        write(6,*)'oxprodloss2-6',oxprodloss(2:6),' oxprodloss8',oxprodloss(8)
c        write(6,*)'prodlossn0',prodlossn0,prodlossn1,prodlossn2
c      endif


        if (tox .lt. equil_fam) then
!          prodloss(1) = prodloss(2)+prodloss(3)+prodloss(4)
!     +                 +prodloss(5)+prodloss(6)
          oxprodloss(1) = oxprodloss(2)+oxprodloss(3)+oxprodloss(4)
     +                 +oxprodloss(5)+oxprodloss(6)
#if ( defined NEWTERM || defined WETDEPDIAG)
     +  + oxprodloss(8)-oxprodloss(7)
!     +  + prodlossn(1)+prodlossn(2)-prodlossn(3)
#endif
        endif
c ajl end of new code ajl 10/29/2013

c
c  h2o2 source term
      ph2o2=r(22)*dn(10)*dn(10)+r(64)*dens*dn(9)*dn(9)
      dh2o2=phoj(9)+r(21)*dn(9)+r(50)*dn(24)+r(65)*dn(2)+
     1      drip+deph2o2
      th2o2=1./dh2o2
      if (th2o2 .lt. equil) then
        h2o2_eq=ph2o2*th2o2
        chem_tend(6)=(h2o2_eq-h2o2)/timinc
      else
        chem_tend(6) = petend(h2o2,ph2o2,dh2o2,timinc,tdenom)
      end if

CCCMNN 01/08      call haltend(kdn,ktf,ihet_flag,dens)
!      if(iam.eq.4.and.iatchem.eq.31.and.jatchem.eq.32)then
!        write(6,*)'call haltend ',iatchem,katchem,'kdn',kdn,
!     *  ktf,ksf,'br2',br2,'iat',iat,jat,'kat',kat
!      endif
!      write(300+iam,*)'call haltendd',iatchem,jatchem,katchem
!      call flush(300+iam)
      call haltend(kdn,ktf,ksf,ihet_flag,dens,
     1            clx_tmp,brx_tmp,br2,temp)
!      write(300+iam,*)'did call haltendd',iatchem,jatchem,katchem
!      call flush(300+iam)

c
c
c  hno3 source term
      if (ipce_hno3 .ne. 1) then
        phno3=r(18)*dn(9)*dn(4)*dens + sednat_in +
     2        (hr(3)*dn(14)+hr(2)*dn(13))*dn(17) + hr(9)*dn(47)*dn(13)+
     3        (hr(4)*dn(14)+2.*hr(1)*dn(13))*dn(12)
c (JRO) include HNO3 production terms from nmhc reactions
     4   +r(114)*dn(56)*dn(7)*fac_no3 + r(142)*dn(67)*dn(7)*fac_no3+
     5  .5*r(187)*dn(74)*dn(7)*fac_no3+r(170)*dn(19)*dn(7)*fac_no3
c (JRO) add production from gas phase N2O5+H2O reaction
        phno3=phno3+2.*r(176)*dn(13)*dn(12)      
        dhno3=(phoj(6)+r(29)*dn(9) + drip)*hno3g_r + sednat
        dhno3 = dhno3 + dephno3
        chem_tend(3) = petend(hno3,phno3,dhno3,timinc,tdenom)
      else
        chem_tend(3)=(dn(5)-hno3)/timinc
      end if
c
c  hno4 source term
      if (ipce_hno4 .ne. 1) then
        phno4=r(57)*dn(10)*dn(4)*dens
        dhno4=(pjhno4a+pjhno4b+r(70)*dn(9)+r(62)*dens+drip)
        chem_tend(24) = petend(hno4,phno4,dhno4,timinc,tdenom)
      else
        chem_tend(24)=(dn(39)-hno4)/timinc
      end if

c
c  odd nitrogen source term
      anoy=2.*r(26)*dn(27)*dn(11) + sednat_in + sorcno
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'anoy',anoy,'r26',r(26),'dn27',dn(27),'dn11',dn(11)
        write(6,*)'sednat_in',sednat_in,'sorcno',sorcno
      endif
#endif
#endif
c (JRO) include nmhc reactions
c  note: NOy family now also includes pan and onit from nmhc reactions

      dnoy=2.*dn(28)*(r(39)*dn(4)+r(41)*dn(3))+
     1     drip*(dn(5)*hno3g_r+dn(39)) + sednat*hno3
      dnoy = dnoy + dephno3*dn(5) + depno2*dn(4)
CCCMNN     INCLUDE RAINOUT AND DEPOSITION OF ONIT
      dnoy = dnoy + (drip+deph2o2)*xonit
     
      chem_tend(2)=anoy-dnoy
#ifdef DIAGCHEM
      if(iprn>0)then
        write(300+iam,*)'day anoy',anoy,'dnoy',dnoy
        call flush(300+iam)
      endif
#endif
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'chem_tend(2)',chem_tend(2),'anoy',anoy,'dnoy',dnoy
        write(6,*)'xnoy',xnoy,timinc
      endif
#endif
#endif
CCCMNN   check to avoid negative NOy
      chem_tend(2) = max(chem_tend(2),(-xnoy/timinc))

c JAA store NOy tendency and deposition for budgets 2005/05/11
c      prodloss(7) = anoy
c      prodloss(8) = dnoy
c      prodloss(9) = dephno3*dn(5)+depno2*dn(4)+deph2o2*xonit

c     ajl more consistent handling of diagnostic terms 10/30/2013
      noyprodloss(1) = anoy
c      noyprodloss(2) = dnoy
      noyprodloss(3) = dephno3*dn(5)+depno2*dn(4)+deph2o2*xonit
c     now don't want deposition in noyprodloss(2) store in (3) only for deposition
      dnoy2=2.*dn(28)*(r(39)*dn(4)+r(41)*dn(3))+
     1     drip*(dn(5)*hno3g_r+dn(39)) + sednat*hno3
      dnoy2 = dnoy2 + drip*xonit
c      if(ksf.eq.1.and.dnoy2.ne.0.0)then
c         write(300+iam,*)'dnoy2',dnoy2,iat,jat,kat,'dephno3',dephno3,'depno2',depno2,
c     *'deph2o2',deph2o2,'dep dn5',dephno3*dn(5),'dep dn4',depno2*dn(4),'xonit',deph2o2*xonit
c         write(300+iam,*)'chem_tend(2)',chem_tend(2),'anoy-dnoy',anoy-dnoy,'anoy',anoy
c         write(300+iam,*)'xnoy',xnoy,'timinc',timinc
c         call flush(300+iam)
c      endif
c      if(ksf.eq.1.and.dnoy2.ne.0.0)then
c         write(6,*)'day noyprodloss',noyprodloss,'iat',iat,jat,kat
c         call flush(6)
c      endif
c      noyprodloss(2)=noyprodloss(2)-noyprodloss(3)
c     dnoy2 is much less than noyprodloss(3) so calculate separately
      noyprodloss(2) = dnoy2
c     ajl end more consistent handling of diagnostic terms 10/30/2013

c
c  ch2o source term
      if (ipce_ch2o .ne. 1) then
c (JRO) changes to formaldehyde production
c    1)  add O1d+CH4->CH2O+H2 production of formaldehyde (r(177))
c    2)  replace r(108) with r(122) (new peroxy-peroxy rxns)
c       ORIGINAL METHOD:
c       pch2o = r(82)*dn(33)*dn(35) +
c     1   0.3*r(87)*dn(9)*dn(21) + 1.2*r(108)*dn(32)*dn(32)
c       NEW METHOD:
       pch2o=r(82)*dn(33)*dn(35) + r(177)*dn(27)*dn(18)+
     1  .66*r(122)*dn(32)+.3*r(87)*dn(9)*dn(21)


c (JRO) nmhc reaction additions
      pch2o=pch2o+.6*r(120)*dn(59)*dn(9)+
     3          r(135)*dn(66)*dn(3)+r(136)*dn(66)*dn(7)*fac_no3+
     4          .7*r(138)*dn(66)
     4          + .5*r(143)*dn(68)*dn(3)+
     5          .5*r(144)*dn(68)*dn(7)*fac_no3+
     5          .5*r(146)*dn(68) +
     6           r(147)*dn(69)*dn(1) +
     7          1.56*r(148)*dn(69)*dn(9)*dens + 
     7         .57*r(149)*dn(70)*dn(1) +
     8          r(151)*dn(70)*dn(9)
c (PIP) add isoprene terms
     9     +.6*r(179)*dn(72)*dn(1)*fac_isop
     1     +.2*r(184)*dn(74)*dn(1)+.1*r(185)*dn(75)*dn(1)
     2     +.22*r(186)*dn(76)*dn(1)
     2     +.34*r(188)*dn(76)*dn(7)*fac_no3
     3     +.63*r(189)*dn(73)*dn(3)+.16*r(191)*dn(78)*dn(3)
     4     +.3*r(192)*dn(79)*dn(3)+.03*r(193)*dn(80)*dn(3)
     5     +.62*r(199)*dn(73)
     6     +.50*r(201)*dn(78)
     7     +.3*r(202)*dn(79)
     8     +.6*r(205)*dn(82)*dn(9)+r(206)*dn(81)*dn(3)
     9     +r(208)*dn(81)*dn(7)*fac_no3
     9     +.7*r(209)*dn(81)
     1     +.35*phoj(47)*dn(76)+phoj(48)*dn(74)
     2     +.3*phoj(49)*dn(75)+phoj(50)*dn(82)
     4     +r(212)*dn(84)*dn(9)+r(221)*dn(32)*dn(7)*fac_no3
#ifdef ISOPRENE_PEROX
CMNN 0106  INCLUDE TERMS FROM ISOPRENE PEROXIDE REACTIONS
        pch2o = pch2o + (0.345*r(157)*dn(88)+0.15*r(158)*dn(91)+
     1          0.08*r(159)*dn(90)+0.015*r(160)*dn(89))*dn(9) +
     2          (0.69*dn(88)+0.3*dn(91)+0.16*dn(90))*phoj(52)
#endif

c (JRO) add surface source of ch2o:
        pch2o=pch2o+sorcch2o            

c (JRO) add NO3+CH2O rxn (r(170) to destruction term
c       dch2o = r(9)*dn(24)+r(10)*dn(2)+r(83)*dn(9)+
c     1         phoj(24)+phoj(25)+depch2o+drip
         dch2o = r(9)*dn(24)+r(10)*dn(2)+r(83)*dn(9)+
     1    phoj(24)+phoj(25)+depch2o+drip+r(170)*dn(7)*fac_no3
        chem_tend(29) = petend(ch2o,pch2o,dch2o,timinc,tdenom)
       else
        chem_tend(29) = (dn(19)-ch2o)/timinc
       endif
c
c  ch3ooh source term
c

      if (ipce_ch3ooh .ne. 1) then
       pch3ooh = r(78)*dn(10)*dn(32)
       dch3ooh = r(87)*dn(9)+phoj(28)+depch3ooh+drip_ch3ooh
       chem_tend(30) = petend(ch3ooh,pch3ooh,dch3ooh,timinc,tdenom)
       else
       chem_tend(30) = (dn(21)-ch3ooh)/timinc
       endif
c
c  co source term
c
      pco = phoj(25)*dn(19)+r(84)*dn(35)*dn(31)+sorcco
#ifdef DIAGCHEM
      if(iprn>0)then
         write(300+iam,*)'phoj25',phoj(25),'dn19',dn(19),'dn35',dn(35),'dn31',dn(31),'sorcco',sorcco
         call flush(300+iam)
      endif
!      if(sorcco>0.0)then
!        write(6,*)'sorcco',sorcco
!        call flush(6)
!      endif

      if(iprn>0)then
        do kk=1,92
          write(300+iam,*)kk,'dn two',dn(kk)
          call flush(300+iam)
        end do
      endif
#endif
c (JRO) include nmhc reactions
      pco = pco + (phoj(42)+phoj(43))*dn(56)+ phoj(53)*dn(67) 


     2  + r(141)*dn(67)*dn(9)+r(142)*dn(67)*dn(7)*fac_no3 
     3  + .24*r(147)*dn(69)*dn(1) + .31*r(149)*dn(70)*dn(1) 
     4  + .3*r(150)*dn(71)*dn(1)*fac_olei
c (PIP) add isprene terms
     4  + .07*r(179)*dn(72)*dn(1)*fac_isop
     5  + .11*r(184)*dn(74)*dn(1)+.11*r(185)*dn(75)*dn(1)
     6  + .24*r(186)*dn(76)*dn(1)
     6  + .5*r(187)*dn(74)*dn(7)*fac_no3
     7  + .67*r(188)*dn(76)*dn(7)*fac_no3
     7  + .84*r(191)*dn(78)*dn(3)
     8  + .61*r(193)*dn(80)*dn(3)+.5*r(201)*dn(78)
     9  + 1.22*phoj(47)*dn(76)+.33*phoj(48)*dn(74)
     1  + .7*phoj(49)*dn(75)
     2  +r(170)*dn(19)*dn(7)*fac_no3
#ifdef DIAGCHEM
      if(iprn>0)then
        write(300+iam,*)'pco two',pco,'phoj',phoj(42:43),'dn1',dn(1),'dn3',dn(3)
        write(300+iam,*)'dn7',dn(7),'fac_no3',fac_no3,'dn19',dn(19),'dn72',dn(72)
        write(300+iam,*)'fac_isop',fac_isop,'fac_olei',fac_olei,'dn74',dn(74:80)
        call flush(300+iam)
      endif
#endif
#ifdef ISOPRENE_PEROX
CMNN 0106  INCLUDE TERMS FROM ISOPRENE PEROXIDE REACTIONS
      pco = pco + (0.42*r(159)*dn(90)+0.305*r(160)*dn(89))*dn(9) +
     1            0.84*phoj(52)*dn(90)
#ifdef DIAGCHEM
      if(iprn>0)then
        write(300+iam,*)'pco three',pco
        call flush(300+iam)
      endif
#endif
#endif
C     ajl since a passive tracer only source surface
c      pcod5025 = pco-sorcco+sorccod5025 ! take back out sorcco

      dco = (r(85)*dn(9) + depco) * dn(20)
CCCMNN 01/08  SECONDARY PATH FOR CO+OH  (76)
      dco = dco + r(76)*dn(9)*dn(20)*dens
c (JRO) additional CO loss to NO3 (r(174))
      dco=dco+r(174)*dn(7)*fac_no3*dn(20)
      
      chem_tend(31) = (pco-dco)
#ifdef DIAGCHEM
      if(iprn>0)then
        write(300+iam,*)'pco',pco,'dco',dco,'day'
        call flush(300+iam)
      endif
#endif
#ifdef COTRACERS
C     ajl since a passive tracer with efolding time no other dco
c      dcod25=dco+kd25*xcod25*timinc
c     this is a tendendy so no timinc done in chem_driver
      pcod5025 = sorccod5025 !  only source is surface sorc
      dcod25=kd25*xcod25
      chem_tend(79)=(pcod5025-dcod25)
!      if(pcod5025>0.0)then
!      write(6,*)'chemtendb 79',chem_tend(79),pcod5025,dcod25
!      endif
#ifdef XBBCOD25
      pbbcod5025 = sorcbbcod5025 !  only source is surface sorc
      dbbcod25=kd25*xbbcod25
      chem_tend(80)=(pbbcod5025-dbbcod25)
#endif
#endif
#ifdef COTRACERS50
c      dcod50=dco+kd50*xcod50*timinc
      dcod50=kd50*xcod50
      dbbcod50=kd50*xbbcod50
      chem_tend(81)=(pcod5025-dcod50)
      chem_tend(82)=(pbbcod5025-dbbcod50)
#endif
c AJL add in decay term to both 50 day and 25 day decay co tendency

c JAA store CO tendency and deposition for budgets 2005/05/11
c      prodloss(10) = pco
c      prodloss(11) = dco
C ajl looks like depco = 0 if not ksf=1
c      prodloss(12) = depco*dn(20)

c     ajl change names from prodloss to coprodloss 10/29/2013
      coprodloss(1)=pco
      coprodloss(2)=dco
C     ajl adjust coprodloss2 at sfc not to include deposition
 
      if(ksf.eq.1)then
        dco2 = r(85)*dn(9)  * dn(20)
        dco2 = dco2 + r(76)*dn(9)*dn(20)*dens
        dco2=dco2+r(174)*dn(7)*fac_no3*dn(20)
        coprodloss(2)=coprodloss(2)-depco*dn(20)
!        if(abs(dco2-coprodloss(2))>1.e-8)then
!           write(6,*)'dco2',dco2,'coprodloss2',coprodloss(2),'diff',dco2-coprodloss(2),'depco',depco*dn(20),'dn(20)',dn(20)
!        endif
      endif
c     end adjustment
      coprodloss(3)=depco*dn(20)
c     ajl end change names from prodloss to coprodloss 10/29/2013
c
c  nitrous oxide source term
      pn2o=r(27)*xn2*dn(27)*dens+r(39)*dn(28)*dn(4)
      dn2o=(phoj(12)+(r(25)+r(26))*dn(27))*dn(11)
      chem_tend(10)=pn2o-dn2o
      if(abs(chem_tend(10))>1.e37)then
        write(6,*)'pn2o',pn2o,dn2o
        call flush(6)
      endif
      if (ksf .eq. 1) chem_tend(10)=
     1          (xn2o_s*dens-dn(11))/equil_fam
      if(abs(chem_tend(10))>1.e37)then
        write(6,*)'bb pn2o xn2o_s',xn2o_s,'dens',dens,'dn11',dn(11),'equil_fam',equil_fam
        call flush(6)
      endif

c  ajl new code to save n2o production and loss term 10/29/2013
c  handle like noy and co keep pn2o for all levels ?
      if(ksf.eq.1)then
        n2oprodloss(3)=chem_tend(10)
      endif
c      else
        n2oprodloss(1)=pn2o
        n2oprodloss(2)=dn2o
c      endif
c  ajl end new code to save n2o production and loss term 10/29/2013
c
c  f11 source term
      chem_tend(11)=-(phoj(19)+r(75)*dn(27))*dn(16)
      if (ksf .eq. 1) chem_tend(11)=
     1          (f11_s*dens-dn(16))/equil_fam
c
c  f12 source term
      chem_tend(12)=-(phoj(20)+r(74)*dn(27))*dn(15)
      if (ksf .eq. 1) chem_tend(12)=
     1          (f12_s*dens-dn(15))/equil_fam
c
c  CCl4 source term
      chem_tend(13)=-(phoj(22))*dn(22)
      if (ksf .eq. 1) chem_tend(13)=
     1          (ccl4_s*dens-dn(22))/equil_fam
c
c  CH3Cl source term
      chem_tend(14)=-(phoj(23)+r(86)*dn(9))*dn(23)
      if (ksf .eq. 1) chem_tend(14)=
     1          (ch3cl_s*dens-dn(23))/equil_fam
c
c  methyl chloroform source term
      chem_tend(15)=-(phoj(5)+r(31)*dn(9))*dn(37)
      if (ksf .eq. 1) chem_tend(15)=
     1          (xmtcfm_s*dens-dn(37))/equil_fam
c
c  CH3Br source term
      chem_tend(17)=-(phoj(36)+r(90)*dn(9))*dn(48)
      if (ksf .eq. 1) chem_tend(17)=
     1          (ch3br_s*dens-dn(48))/equil_fam
c
c  CF3Br source term  (Halon 1301)
      chem_tend(18)=-phoj(37)*dn(49)
      if (ksf .eq. 1) chem_tend(18)=
     1          (h1301_s*dens-dn(49))/equil_fam
c
c  CF2ClBr source term  (Halon 1211)
      chem_tend(19)=-phoj(38)*dn(50)
      if (ksf .eq. 1) chem_tend(19)=
     1          (h1211_s*dens-dn(50))/equil_fam

#ifndef ISOPRENE_PEROX
c
c  HF source term
      phf=(phoj(39)+r(106)*dn(27))*dn(52)
     1    +2.*(phoj(40)+r(107)*dn(27))*dn(53)
      dhf=drip*dn(51)
      chem_tend(20)=phf-dhf
c
c  CFClO source term
      pcfclo=(phoj(19)+r(75)*dn(27))*dn(16)
      dcfclo=(phoj(39)+r(106)*dn(27)+drip)*dn(52)
      chem_tend(21)=pcfclo-dcfclo
c
c  CF2O source term
      pcf2o=(phoj(20)+r(74)*dn(27))*dn(15)
      dcf2o=(phoj(40)+r(107)*dn(27)+drip)*dn(53)
      chem_tend(22)=pcf2o-dcf2o
#endif
c
c  CH4 source term
      pch4=0.
c (JRO) nmhc additions
      pch4=pch4+phoj(43)*dn(56) + .06*r(149)*dn(70)*dn(1) + 
     1 .08*r(150)*dn(71)*dn(1)*fac_olei

      dch4=(r(32)*dn(27)+r(66)*dn(9)+r(47)*dn(24)+phoj(41))*dn(18)
c (JRO) additions loss CH4+O1D this is so tiny I really shouldn't bother...      
      dch4=dch4+r(177)*dn(27)*dn(18)
      chem_tend(23)=pch4-dch4
      if (ksf .eq. 1) chem_tend(23)=
     1          (ch4_s*dens-dn(18))/equil_fam

! ajl new code to save ch4 prod loss term 10/29/2013
! ajl dn(18) is ch4 value so tendendy is difference of ch4_s*dens and dn(18)
!      if(iat.eq.1.and.jat.eq.179.and.(kat.eq.35.or.kat.eq.1))then
!        write(6,*)'findc4 chem_tend(23) ',chem_tend(23),'ksf',ksf,'pch4',pch4,dch4,'sfc',
!     * ch4_s*dens,'dn18',dn(18),'diff',ch4_s*dens-dn(18),'equil',equil_fam
!      endif
      if(ksf.eq.1)then
! save sfc newtonian term
        ch4prodloss(3)=chem_tend(23)
!        if(iat.eq.1.and.jat.eq.179.and.(kat.eq.35.or.kat.eq.1))then
!         write(6,*)'chem_tend23 sfc',chem_tend(23)
!        endif
      endif
!      else
! save production and loss for non sfc layers
!       keep prod, loss terms like noy
        ch4prodloss(1)=pch4
        ch4prodloss(2)=dch4
!      endif
! ajl end new code to save ch4 prod loss term 10/29/2013

#ifndef ISOPRENE_PEROX
c
c  H2O source term
c   expressions represent h2o production from ch4 oxidation
c   (simplified by assumption that HOx is in PCE)
      ph2o=dn(18)*(r(32)*dn(27)+r(47)*dn(24)+r(66)*dn(9))+
     1     dn(19)*(phoj(24)+r(9)*dn(24)+r(10)*dn(2)+r(83)*dn(9))+
     2     dn(36)*(r(30)*dn(27)+r(48)*dn(24)+r(72)*dn(9))
     3     +sedice_in
      dh2o=sedice*h2otest
      chem_tend(26)=ph2o-dh2o
c  force H2O to climatology in troposphere
       if (ktf .gt. 0) chem_tend(26)=(dn(13)-h2otest)/timinc
     &                              -sedice*h2otest
#endif

c (JRO) Lots of additional source terms for nmhc species:
c (PIP) additional source terms from isoprene reactions 

c C2H6 source term
      pc2h6 = sorcc2h6 + .2*r(123)*dn(55) + 
     1 .01*r(149)*dn(70)*dn(1) + .01*r(150)*dn(71)*dn(1)*fac_olei
      dc2h6 = r(109)*dn(9)
CCCCC  ADD R(108)   C2H6 + Cl
      dc2h6  = dc2h6 + r(108)*dn(24)
      chem_tend(37) = petend(c2h6,pc2h6,dc2h6,timinc,tdenom)

c ALD2 source term
      if (ipce_ald2 .ne. 1) then
       pald2 = r(110)*dn(55)*dn(3)+r(112)*dn(55)*dn(7)*fac_no3+
     1   .3*r(121)*dn(57)*dn(9)
     2    +.8*r(123)*dn(55) + .25*r(126)*dn(61)*dn(3) +
     3    .3*r(127)*dn(61)*dn(7)*fac_no3 +
     3    .21*r(129)*dn(61) +
     7    .3*r(219)*dn(85)*dn(7)*fac_no3+
     7    .3*r(220)*dn(86)*dn(7)*fac_no3+
     4    .08*r(139)*dn(65)*dn(9) + .5*r(143)*dn(68)*dn(3)+
     5    .5*r(144)*dn(68)*dn(7)*fac_no3+
     5    .5*r(146)*dn(68) +
     7     .22*r(148)*dn(69)*dn(9)*dens + .47*r(149)*dn(70)*dn(1)
     8     +1.03*r(150)*dn(71)*dn(1)*fac_olei 
     9     + r(151)*dn(70)*dn(9) +
     9     1.77*r(152)*dn(71)*dn(9)*fac_olei
c (PIP) isoprene terms
     9     +.15*r(179)*dn(72)*dn(1)*fac_isop+
     1     .062*r(186)*dn(76)*dn(1)+
     2     .33*r(188)*dn(76)*dn(7)*fac_no3+
     2     .8*r(190)*dn(77)*dn(3)+
     3     .7*r(192)*dn(79)*dn(3)+.27*r(193)*dn(80)*dn(3)+
     4        r(200)*dn(77)+
     5     .7*r(202)*dn(79)+r(210)*dn(80)
     6     +.43*phoj(47)*dn(76)
     7     +phoj(51)*dn(57)+phoj(52)*dn(65)
     6     +.3*phoj(46)*dn(62)
     7     +.941*dn(85)*dn(3)*r(213)+
     7     .21*dn(85)*r(217)
     7 +.21*dn(86)*r(218)
#ifdef ISOPRENE_PEROX
CMNN 0106  INCLUDE TERMS FROM ISOPRENE PEROXIDE REACTIONS
       pald2 = pald2 + (0.35*r(158)*dn(91)+0.135*r(160)*dn(89))*dn(9)+
     1         0.7*phoj(52)*dn(91)
#endif

       pald2=pald2+sorcald2
       dald2 = r(113)*dn(9)+r(114)*dn(7)*fac_no3+phoj(42)+phoj(43)
     2 + depald2 + drip
       chem_tend(38) = petend(ald2,pald2,dald2,timinc,tdenom)
      else
       chem_tend(38) = (dn(56)-ald2)/timinc
      endif

c ETHOOH source term
      if (ipce_ethooh .ne. 1)then
       pethooh = r(111)*dn(55)*dn(10)
       dethooh = r(121)*dn(9) + phoj(51) + depethooh + drip
       chem_tend(39) = petend(ethooh,pethooh,dethooh,timinc,tdenom)
      else
       chem_tend(39) = (dn(57)-ethooh)/timinc
      endif
     
c PAN source term
      if (ipce_pan .ne. 1)then
       ppan = r(117)*dens*dn(58)*dn(4)
       dpan = r(119)*dens + r(120)*dn(9) + phoj(44)
       chem_tend(40) = petend(pan,ppan,dpan,timinc,tdenom)
      else
       chem_tend(40) = (dn(59)-pan)/timinc
      endif

c This gets tricky with the addition of the propane term.
c we've kept track of fraction of total ROOH production from
c RO2 (PAR) and PO2-n and PO2-i (PROP_PAR).
c It's not 100% correct, but fractionate the subtraction of
c paraffin from par due to ROOH reactions based on frac_par
c and frac_proppar
c  RO2,ONIT will be recycled from ROOH so some RO2 or ONIT can originate
c from propane though they are not corrected by fracpar.  
c These should be a relatively small subtraction term - will
c check that par doesn't go negative.  Residual par subtraction
c making it go negative will be transferred to prop_par term if necessary.

c      totpar=dn(83)+dn(60)
c      frac_par=0.
c      frac_proppar=0.
c      if(totpar.gt.0)frac_par=dn(60)/totpar
c      if(totpar.gt.0)frac_proppar=dn(83)/totpar

      rooh_po2=(dn(85)+dn(86))*7.5E-13*exp(700/temp)
      rooh_ro2=dn(61)*1.66E-13*exp(1300./temp)
      totroohprod=rooh_po2+rooh_ro2
      frac_par=0.
      frac_proppar=0.
      if(totroohprod.gt.0)
     & frac_par=dn(61)*1.66E-13*exp(1300./temp)/totroohprod
      if(totroohprod.gt.0)frac_proppar=
     &  (dn(85)+dn(86))*7.5E-13*exp(700/temp)/totroohprod

c PAR source term
      ppar = sorcpar-(1.68*r(126)*dn(61)*dn(3) 
     1  +2.02*dn(7)*fac_no3*r(127)*dn(61)
     1  + 1.25*r(129)*dn(61) 
     7  + frac_par*(.83*r(139)*dn(65)*dn(9)
     7  + phoj(52)*dn(65))
     2  + r(143)*dn(68)*dn(3) + r(144)*dn(68)*dn(7)*fac_no3 
     3  + r(146)*dn(68)
     4  + 1.06*r(149)*dn(70)*dn(1) 
     4  + 2.26*r(150)*dn(71)*dn(1)*fac_olei
     5  + r(151)*dn(70)*dn(9) + 2.23*r(152)*dn(71)*dn(9)*fac_olei
     3  + 1.98*phoj(46)*dn(62))
c (PIP) isoprene terms
     4  -.031*r(186)*dn(76)*dn(1)
     5  +r(187)*dn(74)*dn(7)*fac_no3+1.6*r(190)*dn(77)*dn(3)
     6  -.18*r(193)*dn(80)*dn(3)+2.*r(195)*dn(77)*dn(10)
     7  +2.*r(200)*dn(77) 
     8  -.4*phoj(49)*dn(75)
     4  + 1.86*r(160)*dn(74)*dn(7)*fac_no3+
CCCMNN 20080605     5  .18*r(161)*dn(73)*dn(3)+1.6*r(162)*dn(75)*dn(3)+
     6  2.*r(165)*dn(75)*dn(10)+2.*r(168)*dn(75)
      dpar = r(125)*dn(9)
      chem_tend(41) = petend(par,ppar,dpar,timinc,tdenom)
c make sure we're not going to go negative:
       partest=par+chem_tend(41)*timinc
       if (partest.lt.0.) chem_tend(41)=-par/timinc

c Now do propane-parrafin (prop_par)
       pproppar=sorcproppar-(.941*r(213)*dn(85)*dn(3)+
     1  1.882*r(214)*dn(86)*dn(3)+1.25*r(217)*dn(85)
     2  +1.25*r(218)*dn(86)
     1  +2.02*dn(7)*fac_no3*(r(219)*dn(85)+r(220)*dn(86))
     7  +frac_proppar*(.83*r(139)*dn(65)*dn(9)
     &  +phoj(52)*dn(65)))
c JRO 8/05 the following should not be included in prop_par
c   removal!
c     &  +r(143)*dn(68)*dn(3)+r(144)*dn(68)*dn(7)*fac_no3+
c     &  r(146)*dn(68)+
c     7  1.98*phoj(46)*dn(62))
       dproppar=r(211)*dn(9)
CCCMNN 0306     INCLUDE  PROP_PAR + Cl
       dproppar = dproppar + (r(155)+r(156))*dn(24)
      chem_tend(51)=petend(prop_par,pproppar,dproppar,timinc,tdenom)
CCCMNN11/03  MAKE SURE PROP_PAR DOESN'T GO NEGATIVE
      ptest2=prop_par+chem_tend(51)*timinc
      if (ptest2 .lt. 0.) chem_tend(51) = -prop_par/timinc
c     
c if we need to transfer some par tendency here, do so (partest<0 if so)
      if(partest.lt.0)then
       tendtest=chem_tend(51)+partest/timinc
       proppartest=prop_par+tendtest*timinc
c don't force prop-par to go negative
       if(proppartest.ge.0) then
         chem_tend(51)=tendtest
       else
         chem_tend(51)=-prop_par/timinc
       endif
      end if 
      
c ONIT source
CCCMNN 10/03  REACTION 180 PRODUCES ONIT
       ponit=.16*r(126)*dn(61)*dn(3)
     1    + .5*r(143)*dn(68)*dn(3) + .5*r(144)*dn(68)*dn(7)*fac_no3
     2    + r(145)*dn(68)*dn(10) + .5*r(146)*dn(68)
     3    + r(180)*dn(72)*dn(7)*fac_no3*fac_isop
c (PIP) isoprene terms
     3 +.5*r(187)*dn(74)*dn(7)*fac_no3+r(188)*dn(76)*dn(7)*fac_no3
     4 +.09*r(189)*dn(73)*dn(3)+.8*r(190)*dn(77)*dn(3)
     5 +r(195)*dn(77)*dn(10)+r(200)*dn(77)
     6 +.059*r(213)*dn(85)*dn(3)+.059*r(214)*dn(86)*dn(3)
       donit = r(140)*dn(9) + phoj(46)
CCCMNN 0803    INCLUDE RAINOUT AND SURFACE DEPOSITION
       donit = donit + drip + deph2o2
C
       chem_tend(42) = petend(xonit,ponit,donit,timinc,tdenom)
C
C
c Acetone source
c      paone = .62*r(126)*dn(61)*dn(3)+.74*r(127)*dn(61)*dn(7)
c     1        *fac_no3 +
c     8    .74*r(219)*dn(85)*dn(7)*fac_no3
c     1   +.74*r(220)*dn(86)*dn(7)*fac_no3+
c     1   .57*r(129)*dn(61) 
c     1    + .15*r(138)*dn(66) 
c     7    +.74*phoj(46)*dn(62) +
c     4    r(139)*.41*dn(65)*dn(9)+
c     3  .07*r(150)*dn(71)*dn(1)*fac_olei 
c     3  + .23*r(152)*dn(71)*dn(9)*fac_olei +
cc (PIP) isoprene terms
c     4  .28*r(186)*dn(76)*dn(1)+.84*r(191)*dn(78)*dn(3)+
c     5  .7*r(193)*dn(80)*dn(3)+.47*r(201)*dn(78)
c     6  +.4*r(205)*dn(82)*dn(9)+.5*r(210)*dn(80)
c     7  +.22*phoj(47)*dn(76)
c     7  +r(214)*dn(86)*dn(3)*.941
c     7  +.57*r(217)*dn(85)
c     7  +.57*r(218)*dn(86)
c       daone = (r(134)*dn(9) + phoj(45))
c       chem_tend(43) = petend(aone,paone,daone,timinc,tdenom)
c
c specify acetone from climatology
       chem_tend(43)=(dn(64)-aone)/timinc

c ROOH source
      if (ipce_rooh .ne. 1) then
       prooh=r(128)*dn(61)*dn(10)+r(137)*dn(66)*dn(10)
#ifndef ISOPRENE_PEROX
CMNN 0106  REMOVE ISOPRENE TERMS.  ISOPRENE PEROXIDE IS
CMNN        CONSIDERED SEPARATELY.
c (PIP) isoprene terms     
     1  +r(194)*dn(73)*dn(10)+r(196)*dn(80)*dn(10)
     2  +r(197)*dn(78)*dn(10)+r(198)*dn(79)*dn(10)
#endif
     3  +.67*r(207)*dn(81)*dn(10)
     4  +r(215)*dn(85)*dn(10)+r(216)*dn(86)*dn(10)
       drooh=r(139)*dn(9)+phoj(52)+deprooh+drip
       chem_tend(44)=petend(rooh,prooh,drooh,timinc,tdenom)
      else
       chem_tend(44) = (dn(65)-rooh)/timinc
      endif

#ifdef ISOPRENE_PEROX
CMNN 0106  INCLUDE RIP, PRDP,MRP, AND VRP SOURCE
C
C RIP  SOURCE
       prip=r(194)*dn(73)*dn(10)
       drrip=r(157)*dn(9)+phoj(52)+deprooh+drip
       chem_tend(20) = petend(rip,prip,drrip,timinc,tdenom)
C
C PRDP SOURCE
       pprdp = r(196)*dn(80)*dn(10)
       dprdp = r(160)*dn(9)+phoj(52)+deprooh+drip
       chem_tend(21) = petend(prdp,pprdp,dprdp,timinc,tdenom)
C
C MRP SOURCE
       pmrp = r(197)*dn(78)*dn(10)
       dmrp = r(159)*dn(9) + phoj(52)+deprooh+drip
       chem_tend(22) = petend(xmrp,pmrp,dmrp,timinc,tdenom)
C
C VRP SOURCE
       pvrp = r(198)*dn(79)*dn(10)
       dvrp = r(158)*dn(9) + phoj(52)+deprooh+drip
       chem_tend(26) = petend(vrp,pvrp,dvrp,timinc,tdenom)
C
#endif

c MGLY source
      if (ipce_mgly .ne. 1) then
       pmgly = .15*r(138)*dn(66)+
     1  .04*r(149)*dn(70)*dn(1) + 
     2  .07*r(150)*dn(71)*dn(1)*fac_olei+
c (PIP) isoprene terms
     3   .9*r(184)*dn(74)*dn(1)+.95*r(185)*dn(75)*dn(1)+
     4   .68*r(186)*dn(76)*dn(1)+.16*r(191)*dn(78)*dn(3)+
     5   .3*r(192)*dn(79)*dn(3)+.39*r(193)*dn(80)*dn(3)+
     6   .53*r(201)*dn(78)+
     7   .3*r(202)*dn(79)+
     8   .5*r(210)*dn(80)
#ifdef ISOPRENE_PEROX
CMNN 0106  INCLUDE TERMS FROM ISOPRENE PEROXIDE REACTIONS
       pmgly = pmgly + (0.15*r(158)*dn(91)+0.08*r(159)*dn(90)+
     1         0.195*r(160)*dn(89))*dn(9)+(0.3*dn(91)+0.16*dn(90))*
     2         phoj(52)
#endif

       dmgly = r(141)*dn(9)+r(142)*dn(7)*fac_no3
     1        +phoj(53)+depmgly+drip
       chem_tend(45)=petend(xmgly,pmgly,dmgly,timinc,tdenom)
      else
       chem_tend(45) = (dn(67)-xmgly)/timinc
      endif                    

c ETH source
       peth=sorceth
       deth=(r(147)*dn(1)+r(148)*dens*dn(9))
       chem_tend(46) = petend(eth,peth,deth,timinc,tdenom)

c XOLET source
       polet=sorcolet + phoj(49)*dn(75)
       dolet=(r(149)*dn(1) + r(151)*dn(9) + r(153)*dn(7)*fac_no3)
       chem_tend(47) = petend(xolet,polet,dolet,timinc,tdenom)

c XOLEI source
       polei=sorcolei
       dolei=(r(150)*dn(1)*fac_olei+r(152)*dn(9)*fac_olei
     1  +r(154)*dn(7)*fac_no3*fac_olei)
       chem_tend(48) = petend(xolei,polei,dolei,timinc,tdenom)
!;     seems no sorcolei at present
!       write(6,*)'chemtend 48',chem_tend(48),'r150',r(150),'dn1',dn(1),'fac_olei',fac_olei,
!     * 'dn9',dn(9),'dn7',dn(7),'fac_no3',fac_no3,'polei',polei,'dolei',dolei
!       call flush(6)
c       if(fac_olei.ne.1)print *,'Olei loss was scaled: ',fac_olei

c XISOP source
c (PIP) add isoprene terms
       pisop=sorcisop
       disop=(r(178)*dn(9)+r(179)*dn(1)+r(180)*dn(7)*fac_no3)
     1        *fac_isop
       chem_tend(49) = petend(xisop,pisop,disop,timinc,tdenom)
c       if(fac_isop.ne.1)print *,'Isop loss was scaled: ',fac_isop
       
c XISOPRD source
c (PIP) add isoprene terms
       pisoprd=.1*r(179)*dn(72)*dn(1)*fac_isop
     1  +.36*r(189)*dn(73)*dn(3)+.2*r(190)*dn(77)*dn(3)
     2  +.38*r(199)*dn(73)
#ifdef ISOPRENE_PEROX
CMNN 0106  INCLUDE TERMS FROM ISOPRENE PEROXIDE REACTIONS
       pisoprd = pisoprd + (0.5*r(157)*dn(9)+phoj(52))*0.39*dn(88)
#endif

       disoprd=(r(183)*dn(9)+r(186)*dn(1)+phoj(47)
     1  +r(188)*dn(7)*fac_no3)
       chem_tend(50) = petend(xisoprd,pisoprd,disoprd,timinc,tdenom)
            
c (PIP) add sources for MACR, MVK, MPAN

c MVK source
       pmvk=.16*r(179)*dn(72)*dn(1)*fac_isop
     1     +.32*r(189)*dn(73)*dn(3)
     2     +.27*r(199)*dn(73)
#ifdef ISOPRENE_PEROX
CMNN 0106  INCLUDE TERMS FROM ISOPRENE PEROXIDE REACTIONS
       pmvk = pmvk + (0.5*r(157)*dn(9)+phoj(52))*0.35*dn(88)
#endif

       dmvk=r(182)*dn(9)+r(185)*dn(1)+phoj(49)
       chem_tend(53)=petend(xmvk,pmvk,dmvk,timinc,tdenom)

c MACR source
       pmacr=.39*r(179)*dn(72)*dn(1)*fac_isop
     1      +.23*r(189)*dn(73)*dn(3)
     2      +.35*r(199)*dn(73)
#ifdef ISOPRENE_PEROX
CMNN 0106  INCLUDE TERMS FROM ISOPRENE PEROXIDE REACTIONS
       pmacr = pmacr + (0.5*r(157)*dn(9)+phoj(52))*0.25*dn(88)
#endif
 
       dmacr=r(181)*dn(9)+r(184)*dn(1)
     1      +r(187)*dn(7)*fac_no3+phoj(48)
       chem_tend(54)=petend(xmacr,pmacr,dmacr,timinc,tdenom)

c MPAN source
       if (ipce_mpan .ne. 1)then
        pmpan = r(203)*dens*dn(81)*dn(4)
        dmpan = r(204)*dens + r(205)*dn(9) + phoj(50)
        chem_tend(55) = petend(xmpan,pmpan,dmpan,timinc,tdenom)
       else
        chem_tend(55) = (dn(82)-xmpan)/timinc
       endif
c
CCCMNN 20080605  HCN AND CH3CN TENDENCIES
c
c HCN source
      phcn = sorchcn
      dhcn = r(161)*dn(9) + dephcn
      chem_tend(56) = phcn - dhcn*hcn
c
c CH3CN source
      pch3cn = sorcch3cn
      dch3cn = r(162)*dn(9) + depch3cn
      chem_tend(57) = pch3cn - dch3cn*ch3cn
c

c METHANOL 
c       pmethanol=r(122)*dn(32)*.34
c       tmethanol=r(212)*dn(9)
c       if(tmethanol.lt.equil)then
c        dn(84)=pmethanol/tmethanol
c        chem_tend(52)=(dn(84)-ch3oh)/timinc
c       else
c        chem_tend(52)=petend(ch3oh,pmethanol,tmethanol,timinc,tdenom)
c       end if       
c specify methanol from climatology
       chem_tend(52)=(dn(84)-ch3oh)/timinc

       if (kdn .lt. 0) then
         dn(25)=save_clo
         dn(44)=save_bro
       endif
       
      else
#ifdef DIAGHTAP
#ifdef DOCHEMJ
        if(iat.eq.120.and.jat.eq.130)then
           write(6,*)'nighttime chemistry comment ',kat,'ktf',ktf,'kdn',kdn
        endif
#endif
#endif
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  nighttime chemistry
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c (JRO) this section should now never be encountered in the
c   troposphere.  Can assume neglible chemistry of the tropospheric
c   nmhc species in nighttime stratosphere...- tendencies set to zero
       dn(3) = xnox_tmp

CCCCC  OX TENDENCY (NIGHTTIME)
C
       dn(1) = frox * ox
       if (dn(1) .gt. dn(3)) then
C
CCCMNN 4/02 modify frox to account for the conversion of NO to NO2
        frox = amax1((frox-dn(3)/ox),1.0e-3)
        dn(1) = frox * ox
        dn(4) = dn(4) + dn(3)
        dn(3) = 0.0
       else
CCCCCCCCC   o3 is less than NO, assume that titration will completely remove O3
CCCC        and there will be some NO present in the night time
ccc
       dn(4) = dn(4) + dn(1)*0.999
       dn(3) = dn(3) - dn(1)*0.999
       frox = 1.0e-3
       dn(1) = ox * frox
       endif
CC
       chem_tend(1) = -(dn(1)*depo3 + drip*dn(5)*hno3g_r +
     1                  hr(1)*dn(13)*dn(12))
      if(isnan(chem_tend(1)))then
         write(6,*)'at bbb dn1',dn(1),'depo3',depo3,dn(5),dn(13),dn(12)
         call flush(6)
      endif
!        if(iat.eq.30.and.jat.eq.15)then
#ifdef DIAGFV3
      if(iat.eq.1.and.jat.eq.1.and.tile.eq.1)then
          write(6,*)'kat',kat,'chem_tend1 bb',chem_tend(1),'kat',kat,'depo3',depo3,'drip',drip,'hr1',hr(1)
          write(6,*)'dn1',dn(1),'dn5',dn(5),'hno3g_r',hno3g_r,'dn13',dn(13),'dn12',dn(12)
          call flush(6)
        endif
#endif
c
c prodloss: 1=P, 2=L_ox, 3=L_hox, 4=L_nox, 5=L_clx, 6=L_brx
c        prodloss(1) = 0.
c        prodloss(2) = 0.
c        prodloss(3) = 0.
c        prodloss(4) = drip*dn(5)*hno3g_r + hr(1)*dn(13)*dn(12)
c        prodloss(5) = 0.
c        prodloss(6) = 0.
c        prodloss(13) = depo3*dn(1)+dephno3*dn(5)+depno2*dn(4)
c       ajl 10/31/2013 new more consistent handling of diagnostic terms
        oxprodloss(1) = 0.
        oxprodloss(2) = 0.
        oxprodloss(3) = 0.
        oxprodloss(4) = drip*dn(5)*hno3g_r + hr(1)*dn(13)*dn(12)
        oxprodloss(5) = 0.
        oxprodloss(6) = 0.
        oxprodloss(9) = depo3*dn(1)+dephno3*dn(5)+depno2*dn(4)
c       ajl 10/31/2013 end new more consistent handling of diagnostic terms

c  partitioning of chlorine and bromine species
CCCMNN 0106  MOD:        call halpart(i,kdn,dens,clx_tmp,brx_tmp)
        call halpart(i,ihet_flag,kdn,ktf,dens,clx_tmp,brx_tmp)

CCCCC   NO3, N2O5, AND NO2 SOURCE TERMS
CCCCC       TEST FOR PCE CONDITION FOR N2O5 AND NO3
CCCCC
        tn2o5i=r(36)*dens+hr(4)*hcl
     1            +hr(1)*dn(13)
        tno3i = r(35)*dens*dn(4)
c
        if (tn2o5i .gt. equili .and. tn2o5i .gt. tno3i) then
CCCMNN020498
CCC     *** N2O5 IN PCE
         dn(12) = r(35)*dens*dn(4)*dn(7)/tn2o5i
         chem_tend(5) = (dn(12)-xn2o5)*tdenom
CCC
CCC         chem_tend(27)=r(14)*dn(1)*(dn(4)+dn(3))
C
         rl = r(35)*dens*dn(4)
         pno3 = r(14)*dn(1)*dn(4)+r(36)*dens*dn(12)
         if (tno3i .gt. equili) then
          dn(7) = pno3/rl
          chem_tend(27)=(dn(7)-xno3)*tdenom
          else
          chem_tend(27)=petend(xno3,pno3,rl,timinc,tdenom)
          endif
CCC
         rl=r(14)*dn(1)+depno2+dens*(r(67)*dn(25)+r(100)*dn(44))
         rl = rl+ r(35)*dens*dn(7)
          if (rl .gt. 0.) then
           ratio = r(36)*dens*dn(12)/rl
           decay = exp(-timinc*rl)
CCC         chem_tend(28)=(xno2*(decay-1.0)+dn(3)*decay)*tdenom
           chem_tend(28)=(ratio*(1.0-decay)+dn(4)*decay-xno2)*tdenom
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'chem_tend(28)e',chem_tend(28)
      endif
#endif
#endif
          else
CCC          chem_tend(28)=dn(3)*tdenom
          chem_tend(28)=(ratio+dn(4)-xno2)*tdenom
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'chem_tend(28)f',chem_tend(28)
      endif
#endif
#endif
         endif
c
        elseif (tno3i .gt. equili) then
CCCMNN020498
CCC      *** NO3 IN PCE
         dn(7) = (r(14)*dn(4)*dn(1)+r(36)*dens*dn(12))/tno3i
         chem_tend(27) = (dn(7)-xno3)*tdenom
CC
         rl=tn2o5i
         if (rl .gt. 0.0) then
          pn2o5 = r(35)*dens*dn(4)*dn(7)
          chem_tend(5)=petend(xn2o5,pn2o5,rl,timinc,tdenom)
CCCCMNN0398
         else
          chem_tend(5)=r(35)*dens*dn(4)*dn(7)
         endif
CCCC
         rl = 2.0*r(14)*dn(1)+depno2+dens*(r(67)*dn(25)+r(100)*dn(44))
         if (rl .gt. 0.0) then
          decay=exp(-timinc*rl)
          chem_tend(28)=(dn(4)*decay-xno2)*tdenom
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'chem_tend(28)g',chem_tend(28)
      endif
#endif
#endif
          else
          chem_tend(28)=(dn(4)-xno2)*tdenom
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'chem_tend(28)h',chem_tend(28)
      endif
#endif
#endif
         endif
C
        else
CCCCCMNN
         rl=tno3i
         if (rl .gt. 0.0) then
          pno3=r(14)*dn(1)*dn(4)+r(36)*dens*dn(12)
          chem_tend(27)=petend(xno3,pno3,rl,timinc,tdenom)
          else
          chem_tend(27)=r(14)*dn(1)*dn(4)+
     1                     r(36)*dens*dn(12)
         endif
CCCCCMNN
         rl=tn2o5i
         if (rl .gt. 0.0) then
          pn2o5 = r(35)*dens*dn(4)*dn(7)
          chem_tend(5) = petend(xn2o5,pn2o5,rl,timinc,tdenom)
          else
          chem_tend(5)=r(35)*dens*dn(4)*dn(7)
         endif
CCC
         rl=r(35)*dens*dn(7)+r(14)*dn(1)+depno2+
     +      dens*(r(67)*dn(25)+r(100)*dn(44))
         if (rl .gt. 0.0) then
          decay=exp(-timinc*rl)
          ratio = r(36)*dens*dn(12)/rl
          chem_tend(28)=(dn(4)*decay + ratio*(1.0-decay)-xno2)*tdenom
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'chem_tend(28)i',chem_tend(28)
      endif
#endif
#endif
          else
          chem_tend(28)=(dn(4)-xno2)*tdenom
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'chem_tend(28)j',chem_tend(28)
      endif
#endif
#endif
         endif
CCC
        endif
c
c  hno4 nighttime source term
      phno4=0.
      dhno4=(r(62)*dens+drip)
      thno4=1./dhno4
      chem_tend(24)=(phno4-dhno4*hno4)
      if (thno4 .lt. equil) then
        hno4_eq=phno4*thno4
        chem_tend(24)=(hno4_eq-hno4)/timinc
      else
        chem_tend(24) = petend(hno4,phno4,dhno4,timinc,tdenom)
      end if
c
CCCMNN 01/08      call haltend(kdn,ktf,ihet_flag,dens)
      call haltend(kdn,ktf,ksf,ihet_flag,dens,
     1             clx_tmp,brx_tmp,br2,temp)

c
c  h2o2 nighttime source term
      ph2o2=0.
      dh2o2=drip*h2o2+deph2o2
      chem_tend(6)=ph2o2-dh2o2
c
c  hno3 nighttime source term
      phno3=(hr(3)*hcl+hr(2)*dn(13))*clno3+hr(9)*dn(47)*dn(13)+
     1      (hr(4)*hcl+2.*hr(1)*dn(13))*xn2o5 + sednat_in
      dhno3=drip*hno3g_r + sednat + dephno3
      if (dhno3 .eq. 0) then
        chem_tend(3)=phno3
      else
        thno3=1./dhno3
        if (thno3 .lt. equil) then
          hno3_eq=phno3*thno3
          chem_tend(3)=(hno3_eq-hno3)/timinc
        else
          chem_tend(3) = petend(hno3,phno3,dhno3,timinc,tdenom)
        end if
      end if
c
c  noy nighttime source term
      anoy=sorcno + sednat_in
      dnoy=drip*(hno3*hno3g_r+hno4) + (sednat+dephno3)*hno3 +
     1     depno2*dn(4) 
CCCMNN     INCLUDE RAINOUT AND DEPOSITION OF ONIT
      dnoy = dnoy + (drip+deph2o2)*xonit
      chem_tend(2)=anoy-dnoy
#ifdef DIAGCHEM
      if(iprn>0)then
        write(300+iam,*)'night anoy',anoy,'dnoy',dnoy
        call flush(300+iam)
      endif
#endif
#ifdef DIAGSNO2
#ifdef DOCHEMJ
      if(iat.eq.99.and.jat.eq.95.and.kat.eq.17)then
        write(6,*)'chem_tend(2)a',chem_tend(2),'anoy',anoy,'dnoy',dnoy
      endif
#endif
#endif

c JAA store NOy tendency and deposition for budgets 2005/05/11
c      prodloss(7) = anoy
c      prodloss(8) = dnoy
c      prodloss(9) = dephno3*dn(5)+depno2*dn(4)+deph2o2*xonit
c     ajl new more consistent handling of diagnostic terms 10/31/2013
      noyprodloss(1) = anoy
c      noyprodloss(2) = dnoy
      noyprodloss(3) = dephno3*dn(5)+depno2*dn(4)+deph2o2*xonit
c     ajl don't want deposion in noyprodloss(2)
      dnoy2=drip*(hno3*hno3g_r+hno4) + sednat*hno3 
      dnoy2 = dnoy2 + drip*xonit
c      if(ksf.eq.1.and.dnoy2.ne.0.0)then
c         write(300+iam,*)'nnoy2',dnoy2,iat,jat,kat,'dephno3',dephno3,'depno2',depno2,
c     *'deph2o2',deph2o2,'dep dn5',dephno3*dn(5),'dep dn4',depno2*dn(4),'xonit',deph2o2*xonit
c        call flush(300+iam)
c      endif
c      if(ksf.eq.1.and.dnoy2.ne.0.0)then
c         write(6,*)'night noyprodloss',noyprodloss,'iat',iat,jat,kat,'dnoy2',dnoy2
c      endif
c      noyprodloss(2)=noyprodloss(2)-noyprodloss(3)
      noyprodloss(2) = dnoy2
c     ajl end new more consistent handling of diagnostic terms 10/31/2013
c
cc ch2o source term
      chem_tend(29) = -(drip+depch2o)*ch2o
c
cc ch3ooh source term
      chem_tend(30) = -(drip+depch3ooh)*ch3ooh
c
cc co source term
      pco = sorcco
!      if(sorcco>0)then
!         write(6,*)'sorcco',sorcco
!         call flush(6)
!      endif
      dco = depco*dn(20)
      chem_tend(31) = (pco-dco)
#ifdef DIAGCHEM
      if(iprn>0)then
        write(300+iam,*)'pco',pco,'dco',dco,'night'
        call flush(300+iam)
      endif
#endif
#ifdef COTRACERS
C     ajl since passive trace with e folding time no surface deposition term
c      dcod25=dco+kd25*xcod25*timinc
      pcod5025 = sorccod5025 
      dcod25=kd25*xcod25
      chem_tend(79)=pcod5025-dcod25
!      if(pcod5025>0.0)then
!      write(6,*)'chemtenda 79',chem_tend(79),pcod5025,dcod25
!      endif
#ifdef XBBCOD25
      pbbcod5025 = sorcbbcod5025 
      dbbcod25=kd25*xbbcod25
      chem_tend(80)=pbbcod5025-dbbcod25
#endif
#endif
#ifdef COTRACERS50
c      dcod50=dco+kd50*xcod50*timinc
      dcod50=kd50*xcod50
      chem_tend(81)=pcod5025-dcod50
      dbbcod50=kd50*xbbcod50
      chem_tend(82)=pbbcod5025-dbbcod50
#endif
c JAA store CO tendency and deposition for budgets 2005/05/11

c     ajl change names from prodloss to coprodloss 10/29/2013

      coprodloss(1) = pco
cd    ajl at sfc layer have deposition as only loss so coprodloss(2)=0.0
c      coprodloss(2) = dco
      coprodloss(2)=0.0
      coprodloss(3) = depco*dn(20)

c     ajl end change names from prodloss to coprodloss 10/29/2013

c
c  n2o nighttime source term
      chem_tend(10)=0.
      if (ksf .eq. 1) chem_tend(10)=
     1          (xn2o_s*dens-xn2o)/equil_fam
      if(abs(chem_tend(10))>1.e37)then
        write(6,*)'cc pn2o',pn2o,dn2o
        call flush(6)
      endif
      if(ksf.eq.1)then
        n2oprodloss(3)=chem_tend(10)
      endif
c   ajl no no2oprodloss above surface at night
c
c  f11 nighttime source term
      chem_tend(11)=0.
      if (ksf .eq. 1) chem_tend(11)=
     1          (f11_s*dens-f11)/equil_fam
c
c  f12 nighttime source term
      chem_tend(12)=0.
      if (ksf .eq. 1) chem_tend(12)=
     1          (f12_s*dens-f12)/equil_fam
c
c  CCl4 nighttime source term
      chem_tend(13)=0.
      if (ksf .eq. 1) chem_tend(13)=
     1          (ccl4_s*dens-ccl4)/equil_fam
c
c  CH3Cl nighttime source term
      chem_tend(14)=0.
      if (ksf .eq. 1) chem_tend(14)=
     1          (ch3cl_s*dens-ch3cl)/equil_fam
c
c  methyl chloroform nighttime source term
      chem_tend(15)=0.
      if (ksf .eq. 1) chem_tend(15)=
     1          (xmtcfm_s*dens-xmtcfm)/equil_fam
c
c  CH3Br nighttime source term
      chem_tend(17)=0.
      if (ksf .eq. 1) chem_tend(17)=
     1          (ch3br_s*dens-ch3br)/equil_fam
c
c  CF3Br nighttime source term  (Halon 1301)
      chem_tend(18)=0.
      if (ksf .eq. 1) chem_tend(18)=
     1          (h1301_s*dens-h1301)/equil_fam
c
c  CF2ClBr nighttime source term  (Halon 1211)
      chem_tend(19)=0.
      if (ksf .eq. 1) chem_tend(19)=
     1          (h1211_s*dens-h1211)/equil_fam

#ifdef ISOPRENE_PEROX
      chem_tend(20)=0.
      chem_tend(21)=0.
      chem_tend(22)=0.
#else
c
c  HF nighttime source term
      chem_tend(20)=(-drip*hf)
c
c  CFClO nighttime source term
      chem_tend(21)=(-drip*cfclo)
c
c  CF2O nighttime source term
      chem_tend(22)=(-drip*cf2o)
#endif
c
c  CH4 nighttime source term
      chem_tend(23)=0.
      if (ksf .eq. 1) chem_tend(23)=
     1          (ch4_s*dens-ch4)/equil_fam
        if(ksf.eq.1)ch4prodloss(3)=chem_tend(23)
C       ajl no ch4prodloss(1:2) at night

#ifdef ISOPRENE_PEROX
      chem_tend(26)=0.
#else
c
c  H2O nighttime source term
      ph2o=sedice_in
      dh2o=sedice*h2otest
      chem_tend(26)=ph2o-dh2o
c  force H2O to climatology in troposphere
      if (ktf .gt. 0) chem_tend(26)=(dn(13)-h2otest)/timinc
     &                              -sedice*h2otest
#endif

c (JRO) set all tendencies for nmhc species in night stratosphere to zero
      do 9999 inmhc=37,55
       chem_tend(inmhc)=0.0
 9999 continue
       
       dn(25)=save_clo
       dn(44)=save_bro

c
c  end of nighttime chemistry
      end if
c
c store NAT sedimentation rate for use as a source in the next layer
      sednat_in = sednat*hno3
#ifndef ISOPRENE_PEROX
      sedice_in = sedice*h2otest
#else
      sedice_in = sedice*saveh2o
#endif

#ifdef DO_AEROSOL
#ifdef AEROSOL_SULFATE
      chem_tend(58) = sorcso2
      chem_tend(59) = sorcso4aer
      chem_tend(60) = sorcdms
      chem_tend(61) = sorcxmsa
#endif
#ifdef AEROSOL_CARBON
      chem_tend(65) = sorcbc1
      chem_tend(66) = sorcbc2
      chem_tend(67) = sorcoc1
      chem_tend(68) = sorcoc2
#endif
#ifdef AEROSOL_SEASALT
      chem_tend(74) = sorcss1
      chem_tend(75) = sorcss2
      chem_tend(76) = sorcss3
      chem_tend(77) = sorcss4
#endif
#ifdef AEROSOL_DUST
      chem_tend(69) = sorcdu1
      chem_tend(70) = sorcdu2
      chem_tend(71) = sorcdu3
      chem_tend(72) = sorcdu4
      chem_tend(73) = sorcdu5
#endif
#endif
c
c cautious check, don't allow negative tendencies for "small" ND
!      if(ox.le.1.)then
!        if(iat.eq.1.and.jat.eq.1)then
!          write(6,*)'ox small ',kat
!          !call flush(6)
!        endif
!      !endif
      if(ox.le.1.) chem_tend(1)=max(chem_tend(1),0.)
      if(xnoy.le.1.) chem_tend(2)=max(chem_tend(2),0.)
      if(hno3.le.1.) chem_tend(3)=max(chem_tend(3),0.)
      if(cly.le.1.) chem_tend(4)=max(chem_tend(4),0.)
      if(xn2o5.le.1.) chem_tend(5)=max(chem_tend(5),0.)
      if(h2o2.le.1.) chem_tend(6)=max(chem_tend(6),0.)
      if(hcl.le.1.) chem_tend(7)=max(chem_tend(7),0.)
      if(clno3.le.1.) chem_tend(8)=max(chem_tend(8),0.)
      if(oclo.le.1.) chem_tend(9)=max(chem_tend(9),0.)
      if(xn2o.le.1.) chem_tend(10)=max(chem_tend(10),0.)
      if(f11.le.1.) chem_tend(11)=max(chem_tend(11),0.)
      if(f12.le.1.) chem_tend(12)=max(chem_tend(12),0.)
      if(ccl4.le.1.) chem_tend(13)=max(chem_tend(13),0.)
      if(ch3cl.le.1.) chem_tend(14)=max(chem_tend(14),0.)
      if(xmtcfm.le.1.) chem_tend(15)=max(chem_tend(15),0.)
      if(bry.le.1.) chem_tend(16)=max(chem_tend(16),0.)
      if(ch3br.le.1.) chem_tend(17)=max(chem_tend(17),0.)
      if(h1301.le.1.) chem_tend(18)=max(chem_tend(18),0.)
      if(h1211.le.1.) chem_tend(19)=max(chem_tend(19),0.)
#ifdef ISOPRENE_PEROX
      if(rip.le.1.) chem_tend(20)=max(chem_tend(20),0.)
      if(prdp.le.1.) chem_tend(21)=max(chem_tend(21),0.)
      if(xmrp.le.1.) chem_tend(22)=max(chem_tend(22),0.)
#else
      if(hf.le.1.) chem_tend(20)=max(chem_tend(20),0.)
      if(cfclo.le.1.) chem_tend(21)=max(chem_tend(21),0.)
      if(cf2o.le.1.) chem_tend(22)=max(chem_tend(22),0.)
#endif
      if(ch4.le.1.) chem_tend(23)=max(chem_tend(23),0.)
      if(hno4.le.1.) chem_tend(24)=max(chem_tend(24),0.)
      if(hocl.le.1.) chem_tend(25)=max(chem_tend(25),0.)
#ifdef ISOPRENE_PEROX
      if(vrp.le.1.) chem_tend(26)=max(chem_tend(26),0.)
#else
      if(h2otest.le.1.) chem_tend(26)=max(chem_tend(26),0.)
#endif
      if(xno3.le.1.) chem_tend(27)=max(chem_tend(27),0.)
      if(xno2.le.1.) chem_tend(28)=max(chem_tend(28),0.)
      if(ch2o.le.1.) chem_tend(29)=max(chem_tend(29),0.)
      if(ch3ooh.le.1.) chem_tend(30)=max(chem_tend(30),0.)
      if(co.le.1.) chem_tend(31)=max(chem_tend(31),0.)
#ifdef COTRACERS
      if(xcod25.le.1.) chem_tend(79)=max(chem_tend(79),0.)
      if(xbbcod25.le.1.) chem_tend(80)=max(chem_tend(80),0.)
#endif
#ifdef COTRACERS50
      if(xcod50.le.1.) chem_tend(81)=max(chem_tend(81),0.)
      if(xbbcod50.le.1.) chem_tend(82)=max(chem_tend(82),0.)
#endif
      if(hbr.le.1.) chem_tend(32)=max(chem_tend(32),0.)
      if(brno3.le.1.) chem_tend(33)=max(chem_tend(33),0.)
      if(hobr.le.1.) chem_tend(34)=max(chem_tend(34),0.)
      if(brcl.le.1.) chem_tend(35)=max(chem_tend(35),0.)
      if(cl2.le.1.) chem_tend(36)=max(chem_tend(36),0.)
      if(c2h6.le.1.) chem_tend(37)=max(chem_tend(37),0.)
      if(ald2.le.1.) chem_tend(38)=max(chem_tend(38),0.)
      if(ethooh.le.1.) chem_tend(39)=max(chem_tend(39),0.)
      if(pan.le.1.) chem_tend(40)=max(chem_tend(40),0.)
      if(par.le.1.) chem_tend(41)=max(chem_tend(41),0.)
      if(xonit.le.1.) chem_tend(42)=max(chem_tend(42),0.)
      if(aone.le.1.) chem_tend(43)=max(chem_tend(43),0.)
      if(rooh.le.1.) chem_tend(44)=max(chem_tend(44),0.)
      if(xmgly.le.1.) chem_tend(45)=max(chem_tend(45),0.)
      if(eth.le.1.) chem_tend(46)=max(chem_tend(46),0.)
      if(xolet.le.1.) chem_tend(47)=max(chem_tend(47),0.)
      if(xolei.le.1.) chem_tend(48)=max(chem_tend(48),0.)
      if(xisop.le.1.) chem_tend(49)=max(chem_tend(49),0.)
      if(xisoprd.le.1.) chem_tend(50)=max(chem_tend(50),0.)
      if(prop_par.le.1.) chem_tend(51)=max(chem_tend(51),0.)
      if(ch3oh.le.1.) chem_tend(52)=max(chem_tend(52),0.)
      if(xmvk.le.1.) chem_tend(53)=max(chem_tend(53),0.)
      if(xmacr.le.1.) chem_tend(54)=max(chem_tend(54),0.)
      if(xmpan.le.1.) chem_tend(55)=max(chem_tend(55),0.)
      if(hcn.le.1.) chem_tend(56)=max(chem_tend(56),0.)
      if(ch3cn.le.1.) chem_tend(57)=max(chem_tend(57),0.)
#ifdef DO_AEROSOL
      if(so2.le.1.) chem_tend(58)=max(chem_tend(58),0.)
      if(so4aer.le.1.) chem_tend(59)=max(chem_tend(59),0.)
      if(dms.le.1.) chem_tend(60)=max(chem_tend(60),0.)
      if(xmsa.le.1.) chem_tend(61)=max(chem_tend(61),0.)
      if(xno3aer.le.1.) chem_tend(62)=max(chem_tend(62),0.)
      if(xnh3.le.1.) chem_tend(63)=max(chem_tend(63),0.)
      if(xnh4aer.le.1.) chem_tend(64)=max(chem_tend(64),0.)
      if(bc1.le.1.) chem_tend(65)=max(chem_tend(65),0.)
      if(bc2.le.1.) chem_tend(66)=max(chem_tend(66),0.)
      if(oc1.le.1.) chem_tend(67)=max(chem_tend(67),0.)
      if(oc2.le.1.) chem_tend(68)=max(chem_tend(68),0.)
      if(du1.le.1.) chem_tend(69)=max(chem_tend(69),0.)
      if(du2.le.1.) chem_tend(70)=max(chem_tend(70),0.)
      if(du3.le.1.) chem_tend(71)=max(chem_tend(71),0.)
      if(du4.le.1.) chem_tend(72)=max(chem_tend(72),0.)
      if(du5.le.1.) chem_tend(73)=max(chem_tend(73),0.)
      if(ss1.le.1.) chem_tend(74)=max(chem_tend(74),0.)
      if(ss2.le.1.) chem_tend(75)=max(chem_tend(75),0.)
      if(ss3.le.1.) chem_tend(76)=max(chem_tend(76),0.)
      if(ss4.le.1.) chem_tend(77)=max(chem_tend(77),0.)
      if(ss5.le.1.) chem_tend(78)=max(chem_tend(78),0.)
#else
#ifdef DO_AEROSOL_BR2
!      write(200+iam,*)'ss5 check',ss5
      !call flush(200+iam)
      if(ss5.le.1.) chem_tend(78)=max(chem_tend(78),0.)
#endif
#endif
!      prodlossf(1)=chem_tend(1)
c     ajl 10/31/2013 use to test all terms ok
      oxtend=chem_tend(1)
      noytend=chem_tend(2)
      cotend=chem_tend(31)
      n2otend=chem_tend(10)
      ch4tend=chem_tend(23)
!      write(200+iam,*)'bottom do_chem',n2otend
!      call flush(200+iam)
      return
      end
c-----------------------------------------------------------------------

CCCMNN 0106      subroutine halpart(i,kdn,dens,clx_tmp,brx_tmp)
      subroutine halpart(i,ihet_flag,kdn,ktf,dens,clx_tmp,brx_tmp)
c partition chlorine and bromine species depending on whether day/night
      include 'comm_defs_24t.chem'
      common /blk4_24/ r(ireac),hr(ihreac),phoj(iphot),dn(inum),
     1              zeta,pur,sad,prodloss(13)
      common/pceinfo/timinc,tdenom,save_clo,save_bro,
     +       ipce_clno3,ipce_hocl,ipce_brno3,ipce_hobr,rbrobr
     +       ,equil_fam
      common/brx_com/pjbr2,rbr_ss,fr_hbrss,tau_ss,dvh,fctr_br

c
C$OMP THREADPRIVATE (/blk4_24/)
C$OMP THREADPRIVATE (/pceinfo/)
C$OMP THREADPRIVATE (/brx_com/)
c

      if (kdn .gt. 0) then   ! Daytime partitioning

c  odd chlorine  (final partitioning)
CCCCMNN0198  CLO/CL EVALUATED USING STEADY STATE FOR CL
C
      rclocl = r(44)*dn(1)+r(47)*dn(18)+r(48)*dn(36)+
     1  r(49)*dn(10)+r(50)*dn(8)+r(9)*dn(19)
CCCMNN 0206   INCLUDE C2H6 + Cl
      rclocl = rclocl + r(108)*dn(54)
CCCMNN 0306   INCLUDE PROP_PAR + Cl
      rclocl = rclocl + (r(155)+r(156))*dn(83)
      if (i .eq. 1 .or. dn(25) .le. 1.0) then
        if (dn(2) .gt. 1.0 .or. dn(3) .gt. 1.0) then
          rclocl = rclocl/(r(45)*dn(2)+r(46)*dn(3))
        else
          rclocl = 1.0e6
        endif
      else
        rclocl = rclocl/(r(45)*dn(2)+r(46)*dn(3)+
     1   (r(102)+r(103))*dn(44)+
     1   (phoj(21)*dn(17)+phoj(26)*dn(38)+
     2   (r(53)*dn(14)+r(86)*dn(23)+3.0*r(31)*dn(37))*
     2   dn(9)+2.0*phoj(29)*dn(40))/dn(25))
      endif
CCCCMNN0198  (END)
      if (ipce_clno3 .eq. 0 .and. dn(25) .gt. 1.) then
        rclono2=dn(17)/dn(25)
      else
        rclono2=r(67)*dn(4)*dens/
     1          (phoj(17)+phoj(21)+r(69)*dn(2)+hr(3)*dn(14)+
     2          hr(2)*dn(13))
      endif
      rhocl=(r(33)*dn(10)+hr(2)*dn(13)*rclono2)/
     1      (phoj(26)+r(42)*dn(2)+r(52)*dn(9)+hr(5)*dn(14)+hr(8)*dn(45))
      rcl2o2=r(60)*dn(25)*dens/(phoj(29)+r(61)*dens)
      roclo=(r(91)*dn(25)+r(101)*dn(44))/phoj(30)
C
      fcl2 = 1.0+2.*rcl2o2+roclo+rhocl*ipce_hocl+
     1           rclono2*ipce_clno3
c
      dn(24)=clx_tmp/(1.+rclocl*fcl2)
      dn(25)=rclocl*dn(24)
      if (ipce_hocl .eq. 1) dn(38)=rhocl*dn(25)
      dn(40)=rcl2o2*dn(25)
      dn(41)=roclo*dn(25)
c
c  odd bromine (final partitioning)
      if (brx_tmp .gt. 0.) then
       rbrno3=ipce_brno3*r(100)*dn(4)*dens/(phoj(35)+hr(9)*dn(13))
     1        +(1-ipce_brno3)*dn(47)/dn(44)
       rhobr=ipce_hobr*(r(98)*dn(10)+hr(9)*dn(13)*rbrno3)/
     1       (phoj(34)+r(89)*dn(2)+hr(6)*dn(45)+hr(7)*dn(14))
     2        +(1-ipce_hobr)*dn(46)/dn(44)
       rhbr=dn(45)/dn(44)
       rbrcl=(r(103)*dn(25)+hr(7)*dn(14)*rhobr+hr(8)*dn(38)*rhbr)/
     1       (phoj(31)+r(63)*dn(2))
CCCMNN 01/08
       rbr2 = (r(104)*0.15*dn(44)+hr(6)*rhobr*dn(45))/pjbr2
       denbr=phoj(32)+r(97)*dn(2)+r(98)*dn(10)+r(99)*dn(3)+
     1       r(100)*dn(4)*dens+(r(101)+r(102)+r(103))*dn(25)
     1       +2.*0.85*r(104)*dn(44)
       rbrobr=(r(94)*dn(1)+dn(2)*rbrobr*(r(63)*rbrcl+r(89)*rhobr))/denbr
       dn(42)=brx_tmp/(1.+rbrobr*(1.+rbrcl+2.*rbr2+
     1        ipce_hobr*rhobr+ipce_brno3*rbrno3))
!       if(iprn>0.and.kprn.eq.1)then
!         write(300+iam,*)'dn42 b ',dn(42),'brx_tmp',brx_tmp
!         call flush(300+iam)
!       endif
       dn(44)=rbrobr*dn(42)
       dn(43)=rbrcl*dn(44)
       dn(92)=rbr2*dn(44)
!      if(isnan(dn(92)))then
!        write(6,*)'rbr2',rbr2,'dn44',dn(44),rbrobr,dn(42)
!        call flush(6)
!      endif
       if (ipce_hobr .eq. 1) dn(46)=rhobr*dn(44)
       if (ipce_brno3 .eq. 1) dn(47)=rbrno3*dn(44)
       dn(44)=max(dn(44),1.)
       rbrobr=min(rbrobr,1.e9)
      endif
c
      dn(34)=(r(55)*dn(24)*dn(35)*dens+phoj(29)*dn(40)+
     1        r(102)*dn(25)*dn(44))/(r(56)*dens)
      dn(29)=((r(59)*dn(34)+r(51)*dn(17))*dn(24)+r(93)*dn(25)*dn(25))
     1        /phoj(18)
c
      else                   ! Nighttime partitioning
c
c  clx nighttime partition (assume that clx=clo+2.*cl2o2)
       if (clx_tmp .gt. 0.) then
        rat_clo=r(61)/(2.*r(60))
c  quadratic equation relating clo to cl2o2
        clo_tmp=(-rat_clo+sqrt(rat_clo*rat_clo+4*rat_clo*clx_tmp))/2.
c  bound clo to greater than zero and less than clx_tmp
        dn(25)=max(min(clo_tmp,clx_tmp),0.)
        dn(40)=(clx_tmp-dn(25))/2.
       end if
c
c  brx nighttime partition (assume that brx=br+bro and equilibrium for br)
       if (brx_tmp .gt. 0.) then
         dbr=r(94)*dn(1)+r(96)*dn(19)
         qbr_a=2.*r(104)
         qbr_b=(r(101)+r(102))*dn(25)+dbr
CCCMNN 01/08
CCCMNN         qbr_c=2.*hr(6)*dn(45)*dn(46)-brx_tmp*dbr
         qbr_c=-brx_tmp*dbr
         discr=qbr_b*qbr_b-4.*qbr_a*qbr_c
         if (discr .gt. 0.) then
           dn(44)=(sqrt(discr)-qbr_b)/(2.*qbr_a)
           dn(44)=max(min(dn(44),brx_tmp),0.)
           dn(42)=brx_tmp-dn(44)
!       if(iprn>0.and.kprn.eq.1)then
!         write(300+iam,*)'dn42 c ',dn(42),'brx_tmp',brx_tmp
!         call flush(300+iam)
!       endif
         endif
       endif
c
c  Bound ClO and/or BrO if loss rate is faster than equilibrium
c   (e.g., to avoid producing more ClONO2 or BrONO2 than available ClO, BrO)
       save_clo=dn(25)
       save_bro=dn(44)
       bb=r(101)+r(103)
       if (dn(25) .gt. 0.) then
         cc=r(91)+r(93)
         tcli=r(67)*dn(4)*dens+bb*dn(44)+cc*dn(25)
         if (tcli .gt. tdenom) dn(25)=dn(25)/(timinc*tcli)
       endif
CCCMNN 01/08       if (dn(44) .gt. 0.) then
CCCcjjj         tbri=r(100)*dn(4)*dens+bb*dn(25)
CCC         tbri=r(100)*dn(4)*dens+bb*save_clo
CCC         if (tbri .gt. tdenom) dn(44)=dn(44)/(timinc*tbri)
CCC       endif
      endif
c
      return
      end
c-----------------------------------------------------------------------

      subroutine haltend(kdn,ktf,ksf,ihet_flag,dens,
     1           clx_tmp,brx_tmp,br2,temp)
      use raqmschem_pmgrid_mod, only : iam
      use chem_types_mod, only : CHEM_KIND_R8
      use raqmschem_pmgrid_mod,only : iatchem,jatchem,katchem,iprn,jprn,kprn
      use raqmschem_pmgrid_mod,only : tile,nstepat,iprnin,jprnin,iamprn

#include <choosechem.h>

c tendencies of chlorine and bromine species depending on whether day/night
      include 'comm_defs_24t.chem'
      real(CHEM_KIND_R8) :: ox,xnoy,hno3,cly,xn2o5,h2o2,hcl,clno3,oclo,xn2o,
     1              f11,f12,ccl4,ch3cl,xmtcfm,bry,ch3br,h1301,h1211,
#ifdef ISOPRENE_PEROX
     2              rip,prdp,xmrp,ch4,hno4,hocl,vrp,
#else
     2              hf,cfclo,cf2o,ch4,hno4,hocl,h2otest,
#endif
     2              xno3,xno2,ch2o,ch3ooh,co,hbr,brno3,hobr,brcl,cl2,
     3              xnat,xice,chem_tend,sednat_in,sedice_in
c (JRO) add new common block for nmhc transported species
      common/blk_nmhc/c2h6,ald2,ethooh,pan,par,xonit,
     5              aone,rooh,xmgly,eth,xolet,xolei,xisop,
     6              xisoprd,prop_par,ch3oh,xmvk,xmacr,xmpan
      common /blk2_24/ ox,xnoy,hno3,cly,xn2o5,h2o2,hcl,clno3,oclo,xn2o,
     1              f11,f12,ccl4,ch3cl,xmtcfm,bry,ch3br,h1301,h1211,
#ifdef ISOPRENE_PEROX
     2              rip,prdp,xmrp,ch4,hno4,hocl,vrp,
#else
     2              hf,cfclo,cf2o,ch4,hno4,hocl,h2otest,
#endif
     2              xno3,xno2,ch2o,ch3ooh,co,hbr,brno3,hobr,brcl,cl2,
     3              xnat,xice,chem_tend(ikmult),sednat_in,sedice_in
      common /blk4_24/ r(ireac),hr(ihreac),phoj(iphot),dn(inum),
     1              zeta,pur,sad,prodloss(13)
      common /srfsnk/ depo3,dephno3,deph2o2,depch2o,
     1       depch3ooh,depno2,depco,sorcno,sorcco,drip,trht
     2       ,sorcc2h6,sorcpar,sorcaone,sorceth,
     +       sorcolet,sorcolei,sorcisop,sorcch2o,sorcald2,
     3       depald2,depethooh,deprooh,depmgly,drip_ch3ooh,
     6       sorcproppar,sorcch3oh
c Additional variables for biomass burning tracers
     6       ,dephcn,depch3cn,sorchcn,sorcch3cn

      common/pceinfo/timinc,tdenom,save_clo,save_bro,
     +       ipce_clno3,ipce_hocl,ipce_brno3,ipce_hobr,rbrobr
     +       ,equil_fam
      common/brx_com/pjbr2,rbr_ss,fr_hbrss,tau_ss,dvh,fctr_br

c
C$OMP THREADPRIVATE (/blk2_24/)
C$OMP THREADPRIVATE (/blk4_24/)
C$OMP THREADPRIVATE (/srfsnk/)
C$OMP THREADPRIVATE (/pceinfo/)
C$OMP THREADPRIVATE (/brx_com/)
c

      if (kdn .gt. 0) then   ! Daytime tendencies
C
CCCMNN 1107    Explicit Integration in the Troposphere
      if (ktf .eq. 1) then
       xdrip = drip
CCCMNN  TEST
      xcl = dn(24)
      xclo = dn(25)
      xhcl = dn(14)
      xclno3 = dn(17)
      xhocl = dn(38)

       call clintg (xdrip,dens,xcl,xclo,xhcl,xclno3,xhocl)
c
        chem_tend(7)=(xhcl-hcl)/timinc
!       if(isnan(chem_tend(7)))then
!          write(6,*)'chemtend7a ',xhcl,hcl,timinc,iat,jat,kat
!          call flush(6)
!       endif
c
        chem_tend(8)=(xclno3-clno3)/timinc
c
        chem_tend(25)=(xhocl-hocl)/timinc
c
       else

c  hcl source term
      phcl=(r(9)*dn(19)+r(47)*dn(18)+r(48)*dn(36)+r(49)*dn(10)+
     1      r(50)*dn(8))*dn(24)+r(81)*dn(9)*dn(25)
CCCMNN 0206  INCLUDE C2H6 + Cl
      phcl = phcl + r(108)*dn(54)*dn(24)
CCCMNN 0306  INCLUDE PROP_PAR + Cl
      phcl = phcl + (r(155)+r(156))*dn(83)*dn(24)
      dhcl=phoj(15)+r(53)*dn(9)+r(54)*dn(2)+r(71)*dn(27)+drip+
     1      hr(3)*dn(17)+hr(4)*dn(12)+hr(5)*dn(38)+hr(7)*dn(46)
      thcl=1./dhcl
      if (thcl .lt. timinc) then
        hcl_eq=phcl*thcl
        chem_tend(7)=(hcl_eq-hcl)/timinc
      else
        chem_tend(7) = petend(hcl,phcl,dhcl,timinc,tdenom)
      end if
!       if(isnan(chem_tend(7)))then
!          write(6,*)'chemtend7b ',thcl,timinc
!          call flush(6)
!       endif
c
c  clno3 source term
      if (ipce_clno3 .ne. 1) then
        pclno3=r(67)*dn(25)*dn(4)*dens
        dclno3=phoj(17)+phoj(21)+r(69)*dn(2)+hr(3)*dn(14)+
     1         hr(2)*dn(13)
        chem_tend(8) = petend(clno3,pclno3,dclno3,timinc,tdenom)
      else
        chem_tend(8)=(dn(17)-clno3)/timinc
      end if
c  limit clono2 production by available clo, no2
      if (chem_tend(8) .gt. 0.) then
        clxnox_loss=chem_tend(8)*timinc
        clxnox_limit=min(dn(4),dn(25))
        if(clxnox_loss.gt.clxnox_limit) chem_tend(8)=clxnox_limit/timinc
      endif
c
c  hocl source term
      if (ipce_hocl .ne. 1) then
        phocl=r(33)*dn(25)*dn(10)+hr(2)*dn(17)*dn(13)
        dhocl=phoj(26)+r(42)*dn(2)+r(52)*dn(9)+hr(5)*dn(14)+hr(8)*dn(45)
        chem_tend(25) = petend(hocl,phocl,dhocl,timinc,tdenom)
      else
        chem_tend(25)=(dn(38)-hocl)/timinc
      end if
CCCC
      endif
CCCCMNN0198
c
c  odd chlorine source term (cl+clo+hocl+hcl+clno3)
      pcly=3.*dn(37)*(phoj(5)+r(31)*dn(9))+dn(16)*(3.*phoj(19)+3.*r(75)*
     1 dn(27))+dn(15)*(2.*phoj(20)+2.*r(74)*dn(27))+4.*phoj(22)*dn(22)+
     2 dn(23)*(phoj(23)+r(86)*dn(9))
      dcly=drip*dn(14)
      chem_tend(4)=pcly-dcly
c
c  source terms for oclo, cl2
      chem_tend(9) = (dn(41)-oclo)/timinc
      chem_tend(36) = (dn(29)-cl2)/timinc
c
c  Bry source term
      pbry=(r(90)*dn(9)+phoj(36))*dn(48)+phoj(37)*dn(49)+phoj(38)*dn(50)
      if(isnan(drip))then
        write(6,*)'drip ',drip
        call flush(6)
      endif
      if(isnan(dn(45)))then
        write(6,*)'dn45',dn(45)
        call flush(6)
      endif
      if(isnan(pbry))then
        write(6,*)'pbry',pbry,r(90),dn(9),phoj(36),dn(48),phoj(37),dn(49),phoj(38),dn(50)
        call flush(6)
      endif
      
      dbry=drip*dn(45)
      chem_tend(16)=(pbry-dbry)
      if(tile.eq.3.and.nstepat>400)then
        if(iatchem.eq.60.and.jatchem.eq.37.and.katchem.eq.1)then
         write(6,*)'chem_tend(16) ',chem_tend(16),katchem,pbry,dbry
         call flush(6)
      endif
      endif
!      if(iatchem.eq.31.and.jatchem.eq.32.and.iam.eq.4)then
!         write(6,*)'chem_tend(16) ',chem_tend(16),katchem,pbry,dbry
!         call flush(6)
!      endif

c
c  source terms for individual bromine species
CCCMNN 1107  Call explicit integration
c
      xdrip = drip
CCCCCMNN TEST
      xbr=dn(42)
!       if(iprn>0.and.kprn.eq.1)then
!         write(300+iam,*)'dn42 f ',dn(42),'brx_tmp',brx_tmp
!         call flush(300+iam)
!       endif
      xbro=dn(44)
      xhbr=dn(45)
      xhobr=dn(46)
      xbrno3=dn(47)
      xbr2=dn(92)
      xbrcl=dn(43)
      sice_br2 = 0.0
      ss_br2 = 0.0

CCCMNN0508      call brintg (kdn,ktf,ihet_flag,xdrip,dens)
!     if(nstepat>440.and.tile.eq.3)then
!       if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem.eq.1)then
!       write(200+iam,*)'nstetpat',nstepat
!       write(200+iam,*)iatchem,iprn,'day call brintg xdrip',xdrip,'dens',dens
!       write(200+iam,*)'in xbr ',xbr,' xbro ',xbro
!       write(200+iam,*)'in xhbr ',xhbr,' xbrno3 ',xbrno3
!       write(200+iam,*)'in xhobr ',xhobr,' xbrcl ',xbrcl
!       write(200+iam,*)'in xbr2 ',xbr2
!       write(200+iam,*)'ox',ox,'xnoy',xnoy,'hno3',hno3,'cly',cly
!       call flush(200+iam)
!     endif
!     endif
      call brintg (kdn,ktf,ihet_flag,xdrip,dens,xbr,xbro,
     1  xhbr,xbrno3,xhobr,xbrcl,xbr2,sice_br2,ss_br2)
!     if(nstepat>440.and.tile.eq.3)then
!       if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=1)then
!       write(200+iam,*)'out xbr ',xbr,' xbro ',xbro,'katchem',katchem
!       write(200+iam,*)'out xhbr ',xhbr,' xbrno3 ',xbrno3
!       write(200+iam,*)'out xhobr ',xhobr,' xbrcl ',xbrcl
!       write(200+iam,*)'out xbr2 ',xbr2
!       call flush(200+iam)
!     endif
!     endif
c
CCC    Bromine source from seaice surface
!     if(isnan(sice_br2))then
!       write(6,*)'sice_br2',sice_br2
!       call flush(6)
!     endif
      chem_tend(16)=chem_tend(16)+sice_br2
CCC    Bromine from seasalt in the PBL
!     if(isnan(ss_br2))then
!       write(6,*)'ss_br2',ss_br2
!       call flush(6)
!     endif
!     if(isnan(fr_hbrss))then
!       write(6,*)'fr_brss',fr_hbrss
!       call flush(6)
!     endif
!     if(isnan(dn(45)))then
!       write(6,*)'dn45',dn(45)
!       call flush(6)
!     endif
!     if(isnan(tau_ss))then
!       write(6,*)'tau_ss',tau_ss
!       call flush(6)
!     endif

      chem_tend(16) = chem_tend(16)+ss_br2
     1                - fr_hbrss*dn(45)/tau_ss
!      if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
!        write(600+iam,*)katchem,'chem_tend(16)',chem_tend(16),'ss_br2',ss_br2,'fr_hbrss',
!     *  fr_hbrss,'dn45',dn(45),'tau=',tau_ss,'sink',- fr_hbrss*dn(45)/tau_ss
!        write(600+iam,*)'sice_br2',sice_br2,'pbry',pbry,dbry
!      endif
!      if(iatchem.eq.31.and.jatchem.eq.32.and.iam.eq.4)then
!        write(6,*)'chem_tend 16 day ',chem_tend(16),katchem
!        call flush(6)
!      endif
c
      chem_tend(32)=(xhbr-hbr)/timinc
c
      chem_tend(33)=(xbrno3-brno3)/timinc
c
      chem_tend(34)=(xhobr-hobr)/timinc
c
      chem_tend(35)=(xbrcl-brcl)/timinc
!     if(iprn>0)then
!       write(280+iam,*)katchem,'day ',kprn,xbrcl,brcl
!       call flush(280+iam)
!     endif
CCCMNN 01/08
!      write(200+iam,*)'aa xbr2',xbr2,br2
!      call flush(200+iam)
      chem_tend(78)=(xbr2-br2)/timinc
!      if(iprn>0)then
!        write(600+iam,*)'chem_tend78 day',chem_tend(78),'xbr2',xbr2,'br2',br2
!        call flush(600+iam)
!      endif
c


c
      else                   ! Nighttime tendencies
c
c   cly nightime source term
      pcly=0.
      dcly=drip*hcl
      chem_tend(4)=pcly-dcly
c
c  hocl nighttime source term
      phocl=hr(2)*clno3*dn(13)
      dhocl=hr(5)*hcl+hr(8)*hbr
      if (dhocl .eq. 0) then
        chem_tend(25)=phocl
      else
        chem_tend(25) = petend(hocl,phocl,dhocl,timinc,tdenom)
      end if
c
c  hcl nighttime source term
      phcl=0.
      dhcl=drip+hr(3)*clno3+hr(4)*xn2o5+hr(5)*hocl+hr(7)*hobr
      if (dhcl .eq. 0.) then
        chem_tend(7)=0.
      else
        chem_tend(7) = petend(hcl,phcl,dhcl,timinc,tdenom)
      endif
!     if(isnan(chem_tend(7)))then
!         write(6,*)'chemtend7c ',dhcl
!     endif
c
c  clno3 nighttime source term
c   (limit clno3 production by available no2; already limited wrt clo, above)
      pclno3=r(67)*dn(25)*dn(4)*dens
      clxnox_loss=pclno3*timinc
      clxnox_limit=dn(4)
      if(clxnox_loss .gt. clxnox_limit) pclno3=clxnox_limit/timinc
      dclno3=hr(3)*hcl+hr(2)*dn(13)
      if (dclno3 .eq. 0.) then
        chem_tend(8)=pclno3
      else
        chem_tend(8) = petend(clno3,pclno3,dclno3,timinc,tdenom)
      end if

c  oclo, cl2 nighttime source terms
      chem_tend(9)=(r(91)*dn(25)+r(101)*dn(44))*dn(25)
      chem_tend(36)=r(93)*dn(25)*dn(25)+
     1              (hr(3)*dn(17)+hr(5)*dn(38))*dn(14)
c
c  Bry nighttime source term
      pbry = 0.0
      dbry=drip*dn(45)
!     if(isnan(dbry))then
!         write(6,*)'night',drip,dn(45)
!         call flush(6)
!     endif
      chem_tend(16)=pbry-dbry
c
c  source terms for individual bromine species
c
      xdrip = drip
CCCCMNN TEST
      xbr=dn(42)
      xbro=dn(44)
      xhbr=dn(45)
      xhobr=dn(46)
      xbrno3=dn(47)
      xbr2=dn(92)
!     if(isnan(xbr2))then
!       write(6,*)'dn92'
!       call flush(6)
!     endif
      xbrcl=dn(43)
      sice_br2 = 0.0
      ss_br2 = 0.0

CCCMNN0508      call brintg (kdn,ktf,ihet_flag,xdrip,dens)
!     if(nstepat>440.and.tile.eq.3)then
!       if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem.eq.1)then
!       write(200+iam,*)'nstetpat',nstepat
!       write(200+iam,*)iatchem,iprn,'nit call brintg xdrip',xdrip,'dens',dens
!       write(200+iam,*)'in xbr ',xbr,' xbro ',xbro
!       write(200+iam,*)'in xhbr ',xhbr,' xbrno3 ',xbrno3
!       write(200+iam,*)'in xhobr ',xhobr,' xbrcl ',xbrcl
!       write(200+iam,*)'in xbr2 ',xbr2
!       call flush(200+iam)
!     endif
!     endif
      call brintg (kdn,ktf,ihet_flag,xdrip,dens,xbr,xbro,
     1    xhbr,xbrno3,xhobr,xbrcl,xbr2,sice_br2,ss_br2)
!     if(nstepat>440.and.tile.eq.3)then
!       if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem.eq.1)then
!       write(200+iam,*)'out xbr ',xbr,' xbro ',xbro
!       write(200+iam,*)'out xhbr ',xhbr,' xbrno3 ',xbrno3
!       write(200+iam,*)'out xhobr ',xhobr,' xbrcl ',xbrcl
!       write(200+iam,*)'out xbr2 ',xbr2
!       call flush(200+iam)
!     endif
!     endif
c
CCC      Bromine source from seaice
!      if(isnan(sice_br2))then
!         write(6,*)'sice_br2 night',sice_br2
!         call flush(6)
!      endif
      chem_tend(16)=chem_tend(16)+sice_br2
c
CCCMNN0508   Bromine from seasalt in the PBL
!     if(isnan(ss_br2))then
!       write(6,*)'nss_br2',ss_br2
!       call flush(6)
!     endif
!     if(isnan(fr_hbrss))then
!       write(6,*)'nfr_brss',fr_hbrss
!       call flush(6)
!     endif
!     if(isnan(dn(45)))then
!       write(6,*)'ndn45',dn(45)
!       call flush(6)
!     endif
!     if(isnan(tau_ss))then
!       write(6,*)'ntau_ss',tau_ss
!       call flush(6)
!     endif
      chem_tend(16) = chem_tend(16) + ss_br2
     1                - fr_hbrss*dn(45)/tau_ss
!      if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
!        write(600+iam,*)katchem,'chem_tend(16)',chem_tend(16),'ss_br2',ss_br2,'fr_hbrss',
!     *  fr_hbrss,'dn45',dn(45),'tau=',tau_ss,'sink',- fr_hbrss*dn(45)/tau_ss
!        write(600+iam,*)'night sice_br2',sice_br2,'pbry',pbry,'dbry',dbry
!        call flush(600+iam)

!      endif
!      if(iatchem.eq.31.and.jatchem.eq.32.and.iam.eq.4)then
!         write(6,*)'night chemem_tend(16) ',chem_tend(16),katchem
!         call flush(6)
!      !endif

c
      chem_tend(32)=(xhbr-hbr)/timinc
c
      chem_tend(33)=(xbrno3-brno3)/timinc
c
      chem_tend(34)=(xhobr-hobr)/timinc
c
      chem_tend(35)=(xbrcl-brcl)/timinc
!     if(iprn>0)then
!       write(280+iam,*)katchem,'night ',kprn,xbrcl,brcl
!       call flush(280+iam)
!     endif
c
!      write(200+iam,*)'xbr2',xbr2,br2,'timinc',timinc
!      call flush(200+iam)
      chem_tend(78)=(xbr2-br2)/timinc
!      if(iprn>0)then
!        write(600+iam,*)'chem_tend78 nig',chem_tend(78),'xbr2',xbr2,'br2',br2
!        call flush(600+iam)
!      endif
c

      end if
c
      return
      end
c-----------------------------------------------------------------------

      subroutine peroxyrate(temp,totperoxy,dens,kdn)
      include 'comm_defs_24t.chem'
      common /blk4_24/ r(ireac),hr(ihreac),phoj(iphot),dn(inum),
     1              zeta,pur,sad,prodloss(13)
c
C$OMP THREADPRIVATE (/blk4_24/)
c
c JRO nmhc additions
c PIP isop additions - isopp, isopn, isopo2 have 5C;
c                      macro2, mvko2, mpac have 4C
c   Get peroxy rermutation reaction rate constants
c      currently set up for dn(32) ch3o2
c                           dn(55) ethp
c                           dn(58) pac
c                           dn(61) ro2
c                           dn(66) ano2
c                           dn(68) nap
c                           dn(63) xo2
c                           dn(73) isopp
c                           dn(77) isopn
c                           dn(78) macro2
c                           dn(79) mvko2
c                           dn(80) isopo2
c                           dn(81) mpac
c                           dn(85) po2-n
c                           dn(86) po2-i

        totperoxy=dn(32)+dn(55)+dn(58)+dn(61)+dn(66)+
     &   dn(68)+dn(63)+dn(73)+dn(77)+dn(78)+dn(79)
     &     +dn(80)+dn(81)
     &     +dn(85)+dn(86)
        if(totperoxy.le.0)then
c          r(122)=0.
c          r(123)=0.
c          r(124)=0.
c          r(129)=0.
c          r(133)=0.
c          r(138)=0.
c          r(146)=0.
c          r(199)=0.
c          r(200)=0.
c          r(201)=0.
c          r(202)=0.
c          r(209)=0.
c          r(210)=0.
c          r(217)=0.
c          r(218)=0.
          r(122)=2.*2.5E-13*exp(190./temp)
          r(123)=2.*6.8E-14
          r(124)=2.0*2.9E-12*exp(500./temp)
          r(129)=2.0*5.3E-16*exp(1980./temp)
          r(133)=2.0*3.1E-14*exp(1000./temp)
          r(138)=2.*8.0E-12
          r(146)=2.0*1.0E-12
          r(199)=2.0*3.1E-14*exp(1000./temp)
          r(200)=2.0*3.1E-14*exp(1000./temp)
          r(201)=2.0*3.1E-14*exp(1000./temp)
          r(202)=2.0*3.1E-14*exp(1000./temp)
          r(209)=2.0*2.9E-12*exp(500./temp)
          r(210)=2.0*3.1E-14*exp(1000./temp)
          r(217)=2.*5.3E-16*exp(1980./temp)
          r(218)=2.*5.3E-16*exp(1980./temp)
          return
        end if

c r(122) = CH3O2 +peroxy
       r(122)=2.*2.5E-13*exp(190./temp)*dn(32)+
     1          2.6E-13*exp(95./temp)*dn(55)+
     2          1.3E-12*exp(640./temp)*dn(58)+
     3          2.3E-14*exp(1085./temp)*dn(61)+
     4          2.8E-12*exp(95./temp)*dn(66)+
     5          1.E-12*exp(95./temp)*dn(68)+
     6          1.8E-13*exp(595./temp)*dn(63)+
     7          1.8E-13*exp(595./temp)*dn(73)+
     8          1.8E-13*exp(595./temp)*dn(77)+
     9          1.8E-13*exp(595./temp)*dn(80)+
     1          1.8E-13*exp(595./temp)*dn(78)+
     2          1.8E-13*exp(595./temp)*dn(79)+
     3          1.3E-12*exp(640./temp)*dn(81)+
     1          2.3E-14*exp(1085./temp)*dn(85)+
     2          2.3E-14*exp(1085./temp)*dn(86)

c r(123) = ethp + peroxy
       r(123)= 2.6E-13*exp(95./temp)*dn(32)+
     1         2.*6.8E-14*exp(0./temp)*dn(55)+
     2         8.9E-13*exp(250./temp)*dn(58)+
     3         1.2E-14*exp(990./temp)*dn(61)+
     4         1.5E-12*exp(0./temp)*dn(66)+
     5         5.2E-13*exp(0./temp)*dn(68)+
     6         9.2E-14*exp(500./temp)*dn(63)+
     7         9.2E-14*exp(500./temp)*dn(73)+
     8         9.2E-14*exp(500./temp)*dn(77)+
     9         9.2E-14*exp(500./temp)*dn(80)+
     1         9.2E-14*exp(500./temp)*dn(78)+
     2         9.2E-14*exp(500./temp)*dn(79)+
     3         8.9E-13*exp(250./temp)*dn(81)+
     1         1.2E-14*exp(990./temp)*dn(85)+
     2         1.2E-14*exp(990./temp)*dn(86)

c r(124) = pac + peroxy     
       r(124)=1.3E-12*exp(640./temp)*dn(32)+
     1        8.9E-13*exp(250./temp)*dn(55)+
     2        2.0*2.9E-12*exp(500./temp)*dn(58)+
     3        7.8E-14*exp(1240./temp)*dn(61)+
     4        9.6E-12*exp(250./temp)*dn(66)+
     5        3.4E-12*exp(250./temp)*dn(68)+
     6        6.0E-13*exp(750./temp)*dn(63)+
     7        6.0E-13*exp(750./temp)*dn(73)+
     8        6.0E-13*exp(750./temp)*dn(77)+
     9        6.0E-13*exp(750./temp)*dn(80)+
     1        6.0E-13*exp(750./temp)*dn(78)+
     2        6.0E-13*exp(750./temp)*dn(79)+
     3        2.9E-12*exp(500./temp)*dn(81)+
     1        7.8E-14*exp(1240./temp)*dn(85)+
     1        7.8E-14*exp(1240./temp)*dn(86)


c r(129) = ro2 + peroxy     
       r(129)=2.3E-14*exp(1085./temp)*dn(32)+
     1        1.2E-14*exp(990./temp)*dn(55)+
     2        7.8E-14*exp(1240./temp)*dn(58)+
     3        2.0*5.3E-16*exp(1980./temp)*dn(61)+
     4        1.3E-13*exp(990./temp)*dn(66)+
     5        4.6E-14*exp(990./temp)*dn(68)+
     6        8.1E-15*exp(1490./temp)*dn(63)+
     7        8.1E-15*exp(1490./temp)*dn(73)+
     8        8.1E-15*exp(1490./temp)*dn(77)+
     9        8.1E-15*exp(1490./temp)*dn(80)+
     1        8.1E-15*exp(1490./temp)*dn(78)+
     2        8.1E-15*exp(1490./temp)*dn(79)+
     3        7.8E-14*exp(1240./temp)*dn(81)+
     3        5.3E-16*exp(1980./temp)*dn(85)+
     3        5.3E-16*exp(1980./temp)*dn(86)
          
c r(133) = xo2 + peroxy
       r(133)=1.8E-13*exp(595./temp)*dn(32)+
     1        9.2E-14*exp(500./temp)*dn(55)+
     2        6.0E-13*exp(750./temp)*dn(58)+
     3        8.1E-15*exp(1490./temp)*dn(61)+
     4        1.0E-12*exp(500./temp)*dn(66)+
     5        3.5E-13*exp(500./temp)*dn(68)+
     6        2.0*3.1E-14*exp(1000./temp)*dn(63)+
     7        6.2E-14*exp(1000./temp)*dn(73)+
     8        6.2E-14*exp(1000./temp)*dn(77)+
     9        6.2E-14*exp(1000./temp)*dn(80)+
     1        6.2E-14*exp(1000./temp)*dn(78)+
     2        6.2E-14*exp(1000./temp)*dn(79)+
     3        6.0E-13*exp(750./temp)*dn(81)+
     3        8.1E-15*exp(1490./temp)*dn(85)+
     3        8.1E-15*exp(1490./temp)*dn(86)

c r(138) = ano2 + peroxy
       r(138)=2.8E-12*exp(95./temp)*dn(32)+
     1        1.5E-12*exp(0./temp)*dn(55)+
     2        9.6E-12*exp(250./temp)*dn(58)+
     3        1.3E-13*exp(990./temp)*dn(61)+
     4        2.*8.0E-12*exp(0./temp)*dn(66)+
     5        5.7E-12*exp(0./temp)*dn(68)+
     6        1.0E-12*exp(500./temp)*dn(63)+
     7        1.0E-12*exp(500./temp)*dn(73)+
     8        1.0E-12*exp(500./temp)*dn(77)+
     9        1.0E-12*exp(500./temp)*dn(80)+
     1        1.0E-12*exp(500./temp)*dn(78)+
     2        1.0E-12*exp(500./temp)*dn(79)+
     3        9.6E-12*exp(250./temp)*dn(81)+
     3        1.3E-13*exp(990./temp)*dn(85)+
     3        1.3E-13*exp(990./temp)*dn(86)

     
c r(146) = nap + peroxy
       r(146)=1.0E-12*exp(95./temp)*dn(32)+
     1        5.2E-13*exp(0./temp)*dn(55)+
     2        3.4E-12*exp(250./temp)*dn(58)+
     3        4.6E-14*exp(990./temp)*dn(61)+
     4        5.7E-12*exp(0./temp)*dn(66)+
     5        2.0*1.0E-12*exp(0./temp)*dn(68)+
     6        3.5E-13*exp(500./temp)*dn(63)+
     7        3.5E-13*exp(500./temp)*dn(73)+
     8        3.5E-13*exp(500./temp)*dn(77)+
     9        3.5E-13*exp(500./temp)*dn(80)+
     1        3.5E-13*exp(500./temp)*dn(78)+
     2        3.5E-13*exp(500./temp)*dn(79)+
     3        3.4E-12*exp(250./temp)*dn(81)+
     3        4.6E-14*exp(990./temp)*dn(85)+
     3        4.6E-14*exp(990./temp)*dn(86)

c r(217) = po2-n + peroxy      (model directly from ro2+peroxy)
       r(217)=2.3E-14*exp(1085./temp)*dn(32)+
     1        1.2E-14*exp(990./temp)*dn(55)+
     2        7.8E-14*exp(1240./temp)*dn(58)+
     3        5.3E-16*exp(1980./temp)*dn(61)+
     4        1.3E-13*exp(990./temp)*dn(66)+
     5        4.6E-14*exp(990./temp)*dn(68)+
     6        8.1E-15*exp(1490./temp)*dn(63)+
     7        8.1E-15*exp(1490./temp)*dn(73)+
     8        8.1E-15*exp(1490./temp)*dn(77)+
     9        8.1E-15*exp(1490./temp)*dn(80)+
     1        8.1E-15*exp(1490./temp)*dn(78)+
     2        8.1E-15*exp(1490./temp)*dn(79)+
     3        7.8E-14*exp(1240./temp)*dn(81)+
     3        2.*5.3E-16*exp(1980./temp)*dn(85)+
     3        5.3E-16*exp(1980./temp)*dn(86)
          
c r(218) = po2-i + peroxy      (model directly from ro2+peroxy)
       r(218)=2.3E-14*exp(1085./temp)*dn(32)+
     1        1.2E-14*exp(990./temp)*dn(55)+
     2        7.8E-14*exp(1240./temp)*dn(58)+
     3        5.3E-16*exp(1980./temp)*dn(61)+
     4        1.3E-13*exp(990./temp)*dn(66)+
     5        4.6E-14*exp(990./temp)*dn(68)+
     6        8.1E-15*exp(1490./temp)*dn(63)+
     7        8.1E-15*exp(1490./temp)*dn(73)+
     8        8.1E-15*exp(1490./temp)*dn(77)+
     9        8.1E-15*exp(1490./temp)*dn(80)+
     1        8.1E-15*exp(1490./temp)*dn(78)+
     2        8.1E-15*exp(1490./temp)*dn(79)+
     3        7.8E-14*exp(1240./temp)*dn(81)+
     3        5.3E-16*exp(1980./temp)*dn(85)+
     3        2.*5.3E-16*exp(1980./temp)*dn(86)
       
c r(199) = isopp + peroxy
        r(199)=1.8E-13*exp(595./temp)*dn(32)+
     1         9.2E-14*exp(500./temp)*dn(55)+
     2         6.0E-13*exp(750./temp)*dn(58)+
     3         8.1E-15*exp(1490./temp)*dn(61)+
     4         1.0E-12*exp(500./temp)*dn(66)+
     5         3.5E-13*exp(500./temp)*dn(68)+
     6         6.2E-14*exp(1000./temp)*dn(63)+
     7         2.0*3.1E-14*exp(1000./temp)*dn(73)+
     8         6.2E-14*exp(1000./temp)*dn(77)+
     9         6.2E-14*exp(1000./temp)*dn(80)+
     1         6.2E-14*exp(1000./temp)*dn(78)+
     2         6.2E-14*exp(1000./temp)*dn(79)+
     3         6.0E-13*exp(750./temp)*dn(81)+
     4         8.1E-15*exp(1490./temp)*dn(85)+
     5         8.1E-15*exp(1490./temp)*dn(86)

c     
c r(200) = isopn + peroxy
        r(200)=1.8E-13*exp(595./temp)*dn(32)+
     1         9.2E-14*exp(500./temp)*dn(55)+
     2         6.0E-13*exp(750./temp)*dn(58)+
     3         8.1E-15*exp(1490./temp)*dn(61)+
     4         1.0E-12*exp(500./temp)*dn(66)+
     5         3.5E-13*exp(500./temp)*dn(68)+
     6         6.2E-14*exp(1000./temp)*dn(63)+
     7         6.2E-14*exp(1000./temp)*dn(73)+
     8         2.0*3.1E-14*exp(1000./temp)*dn(77)+
     9         6.2E-14*exp(1000./temp)*dn(80)+
     1         6.2E-14*exp(1000./temp)*dn(78)+
     2         6.2E-14*exp(1000./temp)*dn(79)+
     3         6.0E-13*exp(750./temp)*dn(81)+
     4         8.1E-15*exp(1490./temp)*dn(85)+
     5         8.1E-15*exp(1490./temp)*dn(86)

c     
cc r(210) = isopo2 + peroxy
        r(210)=1.8E-13*exp(595./temp)*dn(32)+
     1         9.2E-14*exp(500./temp)*dn(55)+
     2         6.0E-13*exp(750./temp)*dn(58)+
     3         8.1E-15*exp(1490./temp)*dn(61)+
     4         1.0E-12*exp(500./temp)*dn(66)+
     5         3.5E-13*exp(500./temp)*dn(68)+
     6         6.2E-14*exp(1000./temp)*dn(63)+
     7         6.2E-14*exp(1000./temp)*dn(73)+
     8         6.2E-14*exp(1000./temp)*dn(77)+
     9         2.0*3.1E-14*exp(1000./temp)*dn(80)+
     1         6.2E-14*exp(1000./temp)*dn(78)+
     2         6.2E-14*exp(1000./temp)*dn(79)+
     3         6.0E-13*exp(750./temp)*dn(81)+
     4         8.1E-15*exp(1490./temp)*dn(85)+
     5         8.1E-15*exp(1490./temp)*dn(86)

c
cc r(201) = macro2 + peroxy
        r(201)=1.8E-13*exp(595./temp)*dn(32)+
     1         9.2E-14*exp(500./temp)*dn(55)+
     2         6.0E-13*exp(750./temp)*dn(58)+
     3         8.1E-15*exp(1490./temp)*dn(61)+
     4         1.0E-12*exp(500./temp)*dn(66)+
     5         3.5E-13*exp(500./temp)*dn(68)+
     6         6.2E-14*exp(1000./temp)*dn(63)+
     7         6.2E-14*exp(1000./temp)*dn(73)+
     8         6.2E-14*exp(1000./temp)*dn(77)+
     9         6.2E-14*exp(1000./temp)*dn(80)+
     1         2.0*3.1E-14*exp(1000./temp)*dn(78)+
     2         6.2E-14*exp(1000./temp)*dn(79)+
     3         6.0E-13*exp(750./temp)*dn(81)+
     4         8.1E-15*exp(1490./temp)*dn(85)+
     5         8.1E-15*exp(1490./temp)*dn(86)

c
cc r(202) = mvko2 + peroxy
        r(202)=1.8E-13*exp(595./temp)*dn(32)+
     1         9.2E-14*exp(500./temp)*dn(55)+
     2         6.0E-13*exp(750./temp)*dn(58)+
     3         8.1E-15*exp(1490./temp)*dn(61)+
     4         1.0E-12*exp(500./temp)*dn(66)+
     5         3.5E-13*exp(500./temp)*dn(68)+
     6         6.2E-14*exp(1000./temp)*dn(63)+
     7         6.2E-14*exp(1000./temp)*dn(73)+
     8         6.2E-14*exp(1000./temp)*dn(77)+
     9         6.2E-14*exp(1000./temp)*dn(80)+
     1         6.2E-14*exp(1000./temp)*dn(78)+
     2         2.0*3.1E-14*exp(1000./temp)*dn(79)+
     3         6.0E-13*exp(750./temp)*dn(81)+
     4         8.1E-15*exp(1490./temp)*dn(85)+
     5         8.1E-15*exp(1490./temp)*dn(86)

c
cc r(209) = mpac + peroxy
        r(209)=1.3E-12*exp(640./temp)*dn(32)+
     1        8.9E-13*exp(250./temp)*dn(55)+
     2        2.9E-12*exp(500./temp)*dn(58)+
     3        7.8E-14*exp(1240./temp)*dn(61)+
     4        9.6E-12*exp(250./temp)*dn(66)+
     5        3.4E-12*exp(250./temp)*dn(68)+
     6        6.0E-13*exp(750./temp)*dn(63)+
     7        6.0E-13*exp(750./temp)*dn(73)+
     8        6.0E-13*exp(750./temp)*dn(77)+
     9        6.0E-13*exp(750./temp)*dn(80)+
     1        6.0E-13*exp(750./temp)*dn(78)+
     2        6.0E-13*exp(750./temp)*dn(79)+
     3        2.0*2.9E-12*exp(500./temp)*dn(81)+
     1        7.8E-14*exp(1240./temp)*dn(85)+
     1        7.8E-14*exp(1240./temp)*dn(86)

 
       return
       end
c-----------------------------------------------------------------------

      function petend(conc,prod,xloss,dt,fact)
c
c Compute chemical tendency using exact solution to constituent
c  continuity equation with constant production and loss: dc/dt=P-Lc
c
c    conc :  c, constituent concentration as a number density (molec/cm^3)
c    prod :  P, production rate (molec/cm^3/s)
c    xloss:  L, loss frequency (1/s)
c    dt   :  time interval over which the tendency will be applied (s)
c    fact :  1/dt
c
      ratio = prod/xloss
      decay = exp(-dt*xloss)
      petend = (ratio-conc)*(1.-decay)*fact
CCCMNN 1203  SET PETEND=0.0 IF PROD=0.0 AND CONC .LE. 1.0
cjjj      if (prod .eq. 0.0 .and. conc .le. 1.0) petend=0.0
      if (prod .le. 0.0 .and. conc .le. 1.0) petend=0.0
      if (conc .le. 1.0) petend=max(petend,0.0)
      return
      end
c-----
      subroutine intg (x10,x20,x30,p1,rl1,p2,rl2,rl3,rr1,
     1         rr2,rr3,ct,timinc,fac_no3)
      use raqmschem_pmgrid_mod, only : iam
      use raqmschem_pmgrid_mod,only : iatchem,jatchem,katchem
c
      dimension ct(3)
!      write(300+iam,*)'tine intg',x10,x20,x30,p1,rl1,p2,rl2,rl3,rr1,fac_no3
!      call flush(300+iam)
c
      t=0.0
      n=0
      dt=10.0
      do i=1,3
       ct(i) = 0.0
       end do
      x1=x10
      x2=x20
      x3=x30
      sumno3=0.0
c
10    continue
      t = t + dt
      n = n+1
      if (t .gt. timinc) then
       t= t-dt
       dt = timinc+0.1- t
       t = timinc+0.1
       endif
c
cc      dx1dt=p1 + rr3*x3 - (rr1 + rr2*x2 + rl1)*x1
c      dx2dt=p2 + rr1*x1 + rr3*x3 - (rr2*x1 + rl2)*x2
c      dx3dt=rr2*x1*x2 - (rr3 + rl3)*x3
c      x1=x1+dx1dt*dt
c      x2=x2+dx2dt*dt
c      x3=x3+dx3dt*dt
c
       x2n=(x2+(p2+rr1*x1+rr3*x3)*dt)/(1.0+(rr2*x1+rl2)*dt)
       x1n=(x1+(p1+rr3*x3)*dt)/(1.0+(rr1+rr2*x2+rl1)*dt)
!       write(300+iam,*)'x1n',x1n
       !call flush(300+iam)
!       if(abs(x1n)>1.e20)then
!         write(6,*)iam,'x1n',x1n,'x1','p1',p1,'rr3',rr3,'x3',x3,'dt',dt,'rr1',rr1,rr2,x2,rl1
!         call flush(6)
!       endif
!      ajl check for too big a change in x1n compared to x1 when x1 is not too small
!      11/24/2016
       if(x1>1.e6)then
         if(x1n>1.e8)then
           if(x1n/x1>3.0)then
             dt=dt*.5
             denom=(1.0+(rr1+rr2*x2+rl1)*dt)
             write(6,*)iam,'new dt ',dt,iatchem,jatchem,katchem,'ratio',x1n/x1
             write(6,'("x1n ",1pe10.3," x2 ",1pe10.3," x3 ",1pe10.3)')x1n,x2n,x3
             write(6,'(" p1 ",1pe10.3," p1dt ",1pe10.3," rr3x3 ",1pe10.3)')p1,p1*dt,rr3*x3*dt
             call flush(6)
             write(6,'(" denom ",1pe10.3," x1 ",1pe10.3)')denom,x1
             call flush(6)
             x2n=(x2+(p2+rr1*x1+rr3*x3)*dt)/(1.0+(rr2*x1+rl2)*dt)
             x1n=(x1+(p1+rr3*x3)*dt)/(1.0+(rr1+rr2*x2+rl1)*dt)
           endif
         endif
       endif
!       if((.not.x1n<=0.0.and..not.x1n>=0.0).or.abs(x1n)>1.e15)then
!           write(6,*)iam,'t',t,'x1n nan',x1,p1,rr3,x3,dt,'rr1',rr1,rr2,x2,rl1
!           write(6,*)iam,'rr2',rr2,'x3',x3,'x1',x1,'x2',x2,'dt',dt
!           write(6,*)iam,'rr3',rr3,'rl3',rl3,'denom',(1.0+(rr3+rl3)*dt)
!           call flush(6)
!           if((.not.x1n<=0.0.and..not.x1n>=0.0))then
!           call killit('x1')
!           endif
!       endif
       x3n=(x3+rr2*x1*x2*dt)/(1.0+(rr3+rl3)*dt)
CCCMNN 1003
       sumno3 = sumno3 + 0.5*(x2+x2n)*dt
       x1=x1n
       x2=x2n
       x3=x3n
c
      if (t .lt. timinc) go to 10
c
c
       ct(1)=x1
       ct(2)=x2
       ct(3)=x3
c
CCCMNN 1003
      if (x20 .gt. 0.0) fac_no3 = sumno3/(x20*timinc)
      return
      end

      function quadr (a,b,c)
c
c     solution for quadratic equation a*x*x+b*x+c=0.0
c
      if ((4.0*a*c/b**2) .gt. 1.0e-4) then
       quadr = (-b+sqrt(b**2+4.0*a*c))/(2.0*a)
       else
       quadr = c/b
       endif
      return
      end
c-----------------------------------------------------------------------


CCCMNN0508      subroutine brintg (kdn,ktf,ihet_flag,drip,dens)
#ifdef BRINTGLIN
      subroutine brintg (kdn,ktf,ihet_flag,drip,dens,xbr,xbro,
     1  xhbr,xbrno3,xhobr,xbrcl,xbr2,sice_br2,ss_br2)
      use raqmschem_pmgrid_mod, only : iam,iatchem,jatchem,katchem,
     *nstepat,iprn,jprn,kprn,tile,iprnin,jprnin,iamprn
#ifdef DIAGBRINTG
      use raqmschemcomm_mod, only : nper,sumper,numper,maxper,permax,sumbr2,sumpertot
#endif
#ifdef DOPERCENT
      use raqmschemcomm_mod, only : izerobr,ismallbr,iadj
#endif
      use raqmschemcomm_mod, only : brintgsmall
c
      include 'comm_defs_24t.chem'
      common /blk4_24/ r(ireac),hr(ihreac),phoj(iphot),dn(inum),
     1              zeta,pur,sad,prodloss(13)
      common/pceinfo/timinc,tdenom,save_clo,save_bro,
     +       ipce_clno3,ipce_hocl,ipce_brno3,ipce_hobr,rbrobr
     +       ,equil_fam
      common/brx_com/pjbr2,rbr_ss,fr_hbrss,tau_ss,dvh,fctr_br
      real*8 xhbrold,xbrno3old,xhobrold,xbrclold,xbr2old,xbroold
      real*8 dtxhbr,dtxbrno3,dtxhobr,dtxbrcl,dtxbr2,dtxbro
      real*8 xbrold,dtxbr,dt,dhobr,dhobrdt,phobr,term1,term2
      character *3 ciam,cstep*4,clevel*1
      real*8 dtmin,dtmax,dtadj,dtxmax,dlimit,znew,zold,zfin,xexp,dtlog
!      real,parameter :: permax=.05
!      real,parameter :: permax=.10
      real,parameter :: permax=.50
      real*8,parameter :: ONE=1.0
      integer ibin
      dtmin=.2
      dtmax=10.


c
C$OMP THREADPRIVATE (/blk4_24/)
C$OMP THREADPRIVATE (/pceinfo/)
C$OMP THREADPRIVATE (/brx_com/)
c
c
      t = 0.
      n = 0
      dt = dtmin
c
cccccc  DAYTIME
cc
      if (kdn .eq. 1) then
10      continue
        t = t+dt
        n = n+1
        if (t .gt. timinc) then
          t = t - dt
          dt = timinc+0.1-t
          t = timinc + 0.1
        endif
        xhbrold=xhbr
        xhobrold=xhobr
        xbrclold=xbrcl
        xbr2old=xbr2
        xbroold=xbro
        xbrno3old=xbrno3
        xbrold=xbr

c
        pbr = (phoj(32)+r(97)*dn(2)+r(99)*dn(3)+
     1       (r(101)+r(102))*dn(25)
     1       +2.*0.85*r(104)*xbro)*xbro + r(105)*dn(9)*xhbr
     1       +phoj(31)*xbrcl + phoj(34)*xhobr
     1       +0.29*phoj(35)*xbrno3+ 2.0*pjbr2*xbr2
        dbr = r(94)*dn(1)+r(95)*dn(10)+r(96)*dn(19)
c
        pbro = r(94)*xbr*dn(1)+(r(63)*xbrcl+r(89)*xhobr)*dn(2)
     1       +0.71*phoj(35)*xbrno3
        dbro = phoj(32)+r(97)*dn(2)+r(98)*dn(10)+r(99)*dn(3)+
     1       r(100)*dn(4)*dens+(r(101)+r(102)+r(103))*dn(25)
     1       +2.*r(104)*xbro
        phbr = (r(95)*dn(10)+r(96)*dn(19))*xbr 
        dhbr = phoj(33)+r(105)*dn(9)+r(88)*dn(2)+hr(6)*xhobr+hr(8)*dn(38)
     1       +drip+fr_hbrss/tau_ss
c
        phobr = r(98)*xbro*dn(10)+hr(9)*xbrno3*dn(13)
        dhobr = phoj(34)+r(89)*dn(2)+hr(6)*xhbr+hr(7)*dn(14)
CCCMNN0508    loss of hobr on seaice
        dhobr = dhobr + dvh*fctr_br
c
        pbrno3 = r(100)*dn(4)*dens*xbro
        dbrno3 = phoj(35)+hr(9)*dn(13)
c
c
        pbrcl = r(103)*dn(25)*xbro+hr(7)*dn(14)*xhobr+
     1        hr(8)*dn(38)*xhbr
        dbrcl = phoj(31)+r(63)*dn(2)
c
        pbr2 = r(104)*0.15*xbro*xbro+hr(6)*xhobr*xhbr
!CCMNN0508    Br2 source at seaice
        pbr2 = pbr2 + dvh*fctr_br*xhobr
!CCMNN0508    Br2 from seasalt within the PBL
        if (xhobr .gt. dens*1.0e-15) then
          pbr2 = pbr2 + rbr_ss
          ss_br2 = ss_br2 + rbr_ss*dt/timinc
        endif
        dbr2 = pjbr2
c
        sice_br2 = sice_br2+dvh*fctr_br*xhobr*dt/timinc
c
CCCMNN 0608
        dtinv = 1.0/dt
        if(dbr*dt>=brintgsmall)then
          xbr=pbr/dbr + (xbr - pbr/dbr)*exp(-dbr*dt)
        else
          xbr=pbr*dt+xbr*(one-dbr*dt)
        endif
        if(dbro*dt>=brintgsmall)then
          xbro=pbro/dbro + (xbro - pbro/dbro)*exp(-dbro*dt)
        else
          xbro=pbro*dt+xbro*(one-dbro*dt)
        endif
        xbrcl=pbrcl/dbrcl + (xbrcl-pbrcl/dbrcl)*exp(-dbrcl*dt)
        if(dbr2*dt>=brintgsmall)then
          xbr2=pbr2/dbr2 + (xbr2-pbr2/dbr2)*exp(-dbr2*dt)
        elseif(dbr2==0.0)then
          xbr2=xbr2+pbr2*dt
        else
          xbr2=xbr2*(one-dbr2*dt)+pbr2*dt
        endif
        xhbr=phbr/dhbr + (xhbr - phbr/dhbr)*exp(-dhbr*dt)
#ifdef DOPERCENT
        if(dbr*dt<brintgsmall)then
          if(dbr*dt==0.0)then
            if(pbr/=0.0)then
              izerobr(1,1)=izerobr(1,1)+1
            endif
          else
            ismallbr(1,1)=ismallbr(1,12)+1
          endif
        endif
        if(dbro*dt<brintgsmall)then
          if(dbro*dt==0.0)then
            if(pbro/=0.0)then
              izerobr(2,1)=izerobr(2,1)+1
            endif
          else
            ismallbr(2,1)=ismallbr(2,1)+1
          endif
        endif
        if(dbrcl*dt<brintgsmall)then
          if(dbrcl*dt==0.0)then
            if(pbrcl/=0.0)then
              izerobr(3,1)=izerobr(3,1)+1
            endif
          else
            ismallbr(3,1)=ismallbr(3,1)+1
          endif
        endif
        if(dbr2*dt<brintgsmall)then
          if(dbr2*dt==0.0)then
            if(pbr2/=0.0)then
              izerobr(4,1)=izerobr(4,1)+1
            endif
          else
            ismallbr(4,1)=ismallbr(4,1)+1
          endif
        endif
        if(dhbr*dt<brintgsmall)then
          if(dhbr*dt==0.0)then
            if(phbr/=0.0)then
              izerobr(5,1)=izerobr(5,1)+1
            endif
          else
            ismallbr(5,1)=ismallbr(5,1)+1
          endif
        endif
#endif
        if(dhobr*dt>=brintgsmall)then
          xhobr=phobr/dhobr + (xhobr - phobr/dhobr)*exp(-dhobr*dt)
          xexp=exp(-dhobr*dt)
        else ! ajl new
#ifdef DOPERCENT
          if(dhobr*dt==0.0)then
            if(phobr/=0.0)then
              izerobr(6,1)=izerobr(6,1)+1
            endif
          else
            ismallbr(6,1)=ismallbr(6,1)+1
          endif
#endif
          xhobr=xhobr*(one-dhobr*dt)+phobr*dt ! ajl new
          xexp=exp(-dhobr*dt)
        endif
        if(dbrno3*dt>=brintgsmall)then ! ajl new
          xtmp=pbrno3/dbrno3 + (xbrno3 - pbrno3/dbrno3)*exp(-dbrno3*dt)
        else
          xtmp=xbrno3*(one-dbrno3*dt)+pbrno3*dt
#ifdef DOPERCENT
          if(dbrno3*dt==0.0)then
            if(pbrno3/=0.0)then
              izerobr(7,1)=izerobr(7,1)+1
            endif
          else
            ismallbr(7,1)=ismallbr(7,1)+1
          endif
#endif
        endif
        if ((xtmp-xbrno3)/dt .gt. dn(4)/timinc) then
          xbrno3=xbrno3+dn(4)*dt/timinc
        else
          xbrno3 = xtmp
        endif

c
        if (t .lt. timinc) then
!         check if change is too big
!#ifdef DODTXBR
          dtxbr=abs(xbr-xbrold)/max(2.e4,xbrold)
!          write(6,*)'xbr',xbr,'old',xbrold,'n',n,'dt',dt,'dtxbr',dtxbr
          dtxhbr=abs(xhbr-xhbrold)/max(2.e4,xhbrold)
!          write(6,*)'dtxhbr',dtxhbr
          dtxbro=abs(xbro-xbroold)/max(2.e4,xbroold)
          dtxbrcl=abs(xbrcl-xbrclold)/max(2.e4,xbrclold)
          dtxbr2=abs(xbr2-xbr2old)/max(2.e4,xbr2old)
!          write(6,'(i3,"dtxbr ",e10.3," dtxhbr ",e10.3)')n,dtxbr,dtxhbr
!          write(91,'(i3,"dtxbr ",e10.3," dtxhbr ",e10.3)')n,dtxbr,dtxhbr
!          call flush(91)
!          write(91,'("dtxbro ",e10.3," dtxbrcl ",e10.3," dtxbr2 ",e10.3)')dtxbro,dtxbrcl,dtxbr2
!          call flush(91)
!          write(500+iam,*)'xhobr',xhobr,'old',xhobrold
!          write(500+iam,*)'xbrno3',xbrno3,xbrno3old
!          call flush(500+iam)
          dtxhobr=abs(xhobr-xhobrold)/max(2.e4,xhobrold)
          dtxbrno3=abs(xbrno3-xbrno3old)/max(2.e4,xbrno3old)
!          write(6,*)'dtxbr',dtxbr,' dtxhbr ',dtxhbr,' dtxbro ',dtxbro,'n ',n
!          write(6,*)'dtxbrcl ',dtxbrcl,' dtxbr2 ',dtxbr2
!          write(100,'(i3,"hbr",f10.3," bro ",f10.3," brcl ",f10.3," br2 ",f10.3," hobr ",f10.3,
!     *" brno3 ",f10.3," br *",f10.3)')n,dtxhbr,dtxbro,dtxbrcl,dtxbr2,dtxhobr,dtxbrno3,dtxbr
       
          if(dtxhbr>permax.or.dtxbro>permax.or.dtxbrcl>permax.or.dtxbr2>permax.or.
     *      dtxhobr>permax.or.dtxbrno3>permax.or.dtxbr>permax)then
            dtxmax=max(dtxhbr,dtxbro,dtxbrcl,dtxbr2,dtxhobr,dtxbrno3,dtxbr)
!            write(6,*)'day dtxmax',dtxmax,'permax',permax
            if(dtxhbr==dtxmax)then
!              write(6,*)'hbr limit'
              dlimit=dbr
              znew=phbr/dhbr
              zold=xhbrold
              zfin=xhbr
              ibin=5
            elseif(dtxbro==dtxmax)then
!              write(6,*)'bro limit'
              dlimit=dbro
              znew=pbro/dbro
              zold=xbroold
              zfin=xbro
              ibin=2
            elseif(dtxbrcl==dtxmax)then
!              write(6,*)'brcl limit'
              dlimit=dbrcl
              znew=pbrcl/dbrcl
              zold=xbrclold
              zfin=xbrcl
              ibin=3
            elseif(dtxbr2==dtxmax)then
!              write(6,*)'br2 limit'
              dlimit=dbr2
              znew=pbr2/dbr2
              zold=xbr2old
              zfin=xbr2
              ibin=4
            elseif(dtxhobr==dtxmax)then
!              write(6,*)'hobr limit'
              dlimit=dhobr
              znew=phobr/dhobr
              zold=xhobrold 
              zfin=xhobr
              ibin=6
            elseif(dtxbrno3==dtxmax)then
!              write(6,*)'brno3 limit'
              dlimit=dbrno3
              znew=pbrno3/dbrno3
              zold=xbrno3old
              zfin=xbrno3
              ibin=7
            elseif(dtxbr==dtxmax)then
!              write(6,*)'br limit'
              dlimit=dbr
              znew=pbr/dbr
              zold=xbrold
              zfin=xbr
              ibin=1
            endif
            dtlog=1.-permax*max(1.e4,zold)/abs(znew-zold)
            dt=-log(1.-permax*max(1.e4,zold)/abs(znew-zold))/dlimit/1.2
#ifdef DOPERCENT
            iadj(ibin,1)=iadj(ibin,1)+1
#endif
            go to 10
          endif !dtxmax
!#endif
          dt = dt*1.2
          dt = min(dt,10.)
          go to 10
        endif
c
c
cccccc     NIGHTTIME
      else
c
20      continue
        t = t+dt
        n = n+1
        if (t .gt. timinc) then
          t = t - dt
          dt = timinc+0.1-t
          t = timinc + 0.1
        endif
c
        xhobrold=xhobr
        xhbrold=xhbr
        xbroold=xbro
        xbrno3old=xbrno3
        xbrold=xbr
        pbr = (r(99)*dn(3)+
     1       (r(101)+r(102))*dn(25)
     1       +2.*0.85*r(104)*xbro)*xbro + r(105)*dn(9)*xhbr
        dbr = r(94)*dn(1)+r(95)*dn(10)+r(96)*dn(19)
c
        pbro = r(94)*xbr*dn(1)
        dbro = r(98)*dn(10)+r(99)*dn(3)+
     1       r(100)*dn(4)*dens+(r(101)+r(102)+r(103))*dn(25)
     1       +2.*r(104)*xbro
        phbr = (r(95)*dn(10)+r(96)*dn(19))*xbr
        dhbr = r(105)*dn(9)+hr(6)*xhobr+hr(8)*dn(38)
     1     +drip + fr_hbrss/tau_ss
c
c
        phobr = r(98)*xbro*dn(10)+hr(9)*xbrno3*dn(13)
        dhobr = hr(6)*xhbr+hr(7)*dn(14)
CCCMNN0508     loss on seaice
        dhobr = dhobr + dvh*fctr_br
!        if(dhobr>0.0.and.dhobr<1.e-20)then
!          write(6,*)'dhobr',dhobr,'dvn',dvn,'fctr_br',fctr_br
!          write(6,*)'hr6',hr(6),'xhbr',xhbr,'hr7',hr(7),'dn14',dn(14)
!          call flush(6)
!        endif
c
        pbrno3 = r(100)*dn(4)*dens*xbro
        dbrno3 = hr(9)*dn(13)
c
        pbr2 = r(104)*0.15*xbro*xbro+hr(6)*xhbr*xhobr
CCCMNN0508     source on seaice
        pbr2 = pbr2 + dvh*fctr_br*xhobr
CCCMNN0508     Br2 from seasalt
        if (xhobr .gt. dens*1.0e-15) then
         pbr2  = pbr2 + rbr_ss
         ss_br2 = ss_br2 + rbr_ss*dt/timinc
        endif
        dbr2=0.0
c
        pbrcl = r(103)*dn(25)*xbro+hr(7)*dn(14)*xhobr+
     1        hr(8)*dn(38)*xhbr
        dbrcl = 0.0
c
        sice_br2 = sice_br2+dvh*fctr_br*xhobr*dt/timinc
c
CCCMNN 0608
        dtinv = 1.0/dt
        if(dbr*dt>=brintgsmall)then
          xbr=pbr/dbr + (xbr - pbr/dbr)*exp(-dbr*dt)
        else
          xbr=xbr*(one-dbr*dt)+pbr*dt
        endif
        if(dbro*dt>brintgsmall)then
          xbro=pbro/dbro + (xbro - pbro/dbro)*exp(-dbro*dt)
        elseif(dbro==0.0)then
          xbro=xbro+pbro*dt
        else
          xbro=xbro*(one-dbro*dt)+pbro*dt
        endif
        if (dhbr >= brintgsmall) then
          xhbr=phbr/dhbr + (xhbr - phbr/dhbr)*exp(-dhbr*dt)
        else
          xhbr = xhbr*(one-dhbr*dt) + phbr*dt
        endif
        if (dhobr*dt >= brintgsmall) then
          xhobr=phobr/dhobr + (xhobr - phobr/dhobr)*exp(-dhobr*dt)
        elseif(dhobr==0.0)then
          xhobr = xhobr + phobr*dt
#ifdef DOPERCENT
          if(phobr/=0.0)then
            izerobr(6,2)=izerobr(6,2)+1
          endif
#endif
        else
          xhobr=xhobr*(one-dhobr*dt)+phobr*dt
#ifdef DOPERCENT
          ismallbr(6,2)=ismallbr(6,2)+1
#endif
        endif
        if (dbrno3*dt >=brintgsmall) then
          xtmp=pbrno3/dbrno3 + (xbrno3 - pbrno3/dbrno3)*exp(-dbrno3*dt)
        elseif(dbrno3==0.0)then
          xtmp = xbrno3 + pbrno3*dt
#ifdef DOPERCENT
          if(pbrno3/=0.0)then
            izerobr(7,2)=izerobr(7,2)+1
          endif
#endif
        else
          xtmp = xbrno3*(one-dbrno3*dt) + pbrno3*dt
#ifdef DOPERCENT
            ismallbr(7,2)=ismallbr(7,2)+1
#endif
        endif
        if ((xtmp-xbrno3)/dt .gt. dn(4)/timinc) then
          xbrno3=xbrno3+dn(4)*dt/timinc
        else
          xbrno3=xtmp
        endif

        xbrcl = xbrcl + pbrcl * dt
        xbr2 = xbr2 + pbr2 * dt
#ifdef DOPERCENT
        if(dbr*dt<brintgsmall)then
          if(dbr*dt==0.0)then
            if(pbr/=0.0)then
              izerobr(1,2)=izerobr(1,2)+1
            endif
          else
            ismallbr(1,2)=ismallbr(1,2)+1
          endif
        endif
        if(dbro*dt<brintgsmall)then
          if(dbro*dt==0.0)then
            if(pbro/=0.0)then
              izerobr(2,2)=izerobr(2,2)+1
            endif
          else
            ismallbr(2,2)=ismallbr(2,2)+1
          endif
        endif
        if(dhbr*dt<brintgsmall)then
          if(dhbr*dt==0.0)then
            if(phbr/=0.0)then
              izerobr(1,2)=izerobr(1,2)+1
            endif
          else
            ismallbr(1,2)=ismallbr(1,2)+1
          endif
        endif
#endif

c
        if (t .lt. timinc) then
!         check if diff too big
!#ifdef DODTXBR
          dtxbr=abs(xbr-xbrold)/max(2.e4,xbrold)
          dtxhbr=abs(xhbr-xhbrold)/max(2.e4,xhbrold)
          dtxbro=abs(xbro-xbroold)/max(2.e4,xbroold)
!          dtxbrcl=abs(xbrcl-xbrclold)/max(2.e4,xbrclold)
!          dtxbr2=abs(xbr2-xbr2old)/max(2.e4,xbr2old)
!          write(500+iam,*)'xhobr',xhobr,'old',xhobrold
!          write(500+iam,*)'xbrno3',xbrno3,xbrno3old
!          call flush(500+iam)
          dtxhobr=abs(xhobr-xhobrold)/max(2.e4,xhobrold)
          dtxbrno3=abs(xbrno3-xbrno3old)/max(2.e4,xbrno3old)
!          write(500+iam,*)'dtxhobr',dtxhobr,dtxbrno3,iatchem,jatchem,katchem
!          call flush(500+iam)
!         real xhbrold,xbrno3old,xhobrold,xbrclold,xbr2old,xbroold
!          dtxmax=max(dtxhbr,dtxbro,dtxbrcl,dtxbr2,dtxhobr,dtxbrno3,dtxbr)
          if(dxbrno3>0.0)then
            dtxmax=max(dtxhbr,dtxbro,dtxhobr,dtxbrno3,dtxbr)
          else
            dtxmax=max(dtxhbr,dtxbro,dtxhobr,dtxbr)
          endif
          if(dtxmax>permax)then
!            write(6,*)'night dtxmax',dtxmax
            if(dtxhbr==dtxmax)then
!              write(6,*)'hbr limit'
              dlimit=dbr
              znew=phbr/dhbr
              zold=xhbrold
              zfin=xhbr
              if(dlimit<1.e-15)then
                write(6,*)'small dbr'
              endif
              ibin=5
            elseif(dtxbro==dtxmax)then
!              write(6,*)'bro limit'
              dlimit=dbro
              znew=pbro/dbro
              zold=xbroold
              if(dlimit<1.e-15)then
                write(6,*)'small dbro'
              endif
              zfin=xbro
              ibin=2
!            elseif(dtxbrcl==dtxmax)then
!              write(6,*)'brcl limit'
!              dlimit=dbrcl
!              znew=pbrcl/dbrcl
!              zold=xbrclold
!            elseif(dtxbr2==dtxmax)then
!              write(6,*)'br2 limit'
!              dlimit=dbr2
!              znew=pbr2/dbr2
!              zold=xbr2old
            elseif(dtxhobr==dtxmax)then
!              write(6,*)'hobr limit'
              dlimit=dhobr
              znew=phobr/dhobr
              zold=xhobrold
              zfin=xhobr
              ibin=6
            elseif(dtxbrno3==dtxmax)then
!              write(6,*)'brno3 limit'
              dlimit=dbrno3
              znew=pbrno3/dbrno3
              zold=xbrno3old
              zfin=xbrno3
              ibin=7
            elseif(dtxbr==dtxmax)then
!              write(6,*)'br limit'
              dlimit=dbr
              znew=pbr/dbr
              zold=xbrold
              zfin=xbr
              ibin=1
            endif
            dtlog=1.-permax*max(1.e4,zold)/abs(znew-zold)
            dt=-log(1.-permax*max(1.e4,zold)/abs(znew-zold))/dlimit/1.2
#ifdef DOPERCENT
            iadj(ibin,2)=iadj(ibin,2)+1
#endif
            go to 20
          endif ! dtxmax
!#endif
          dt = dt*1.2
          dt = min(dt,10.)
          go to 20
        endif ! t lt
c
c
      endif ! idn
      return
      end subroutine brintg
#else
#ifdef NEWBRINTG
CCCMNN0508      subroutine brintg (kdn,ktf,ihet_flag,drip,dens)
      subroutine brintg (kdn,ktf,ihet_flag,drip,dens,xbr,xbro,
     1  xhbr,xbrno3,xhobr,xbrcl,xbr2,sice_br2,ss_br2)
      use raqmschem_pmgrid_mod, only : iam,iatchem,jatchem,katchem,
     *nstepat,iprn,jprn,kprn,tile,iprnin,jprnin,iamprn
c
      include 'comm_defs_24t.chem'
      common /blk4_24/ r(ireac),hr(ihreac),phoj(iphot),dn(inum),
     1              zeta,pur,sad,prodloss(13)
      common/pceinfo/timinc,tdenom,save_clo,save_bro,
     +       ipce_clno3,ipce_hocl,ipce_brno3,ipce_hobr,rbrobr
     +       ,equil_fam
      common/brx_com/pjbr2,rbr_ss,fr_hbrss,tau_ss,dvh,fctr_br
      real*8 xhbrold,xbrno3old,xhobrold,xbrclold,xbr2old,xbroold
      real*8 dtxhbr,dtxbrno3,dtxhobr,dtxbrcl,dtxbr2,dtxbro
      real*8 xbrold,dtxbr,dt,dhobr,dhobrdt,phobr,term1,term2
      character *3 ciam,cstep*4,clevel*1
      real,parameter :: dtmin=.1,dtmax=10.


c
C$OMP THREADPRIVATE (/blk4_24/)
C$OMP THREADPRIVATE (/pceinfo/)
C$OMP THREADPRIVATE (/brx_com/)
c
c
      t = 0.
      n = 0
      dt = dtmin
c
cccccc  DAYTIME
cc
      write(clevel,'(i1.1)')katchem
      write(ciam,'(i3.3)')iam
      write(cstep,'(i4.4)')nstepat
!      if(iam.eq.iamprn)then
!        write(6,*)'iprnin',iprnin,jprnin,'tile',tile,'iatchem',iatchem,jatchem,katchem,'nstepat',nstepat
!        call flush(6)
!      endif
      if(nstepat>400.and.tile.eq.3)then
       if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
        open(800+iam,file='newbrintg.'//ciam//'.'//cstep//'.'//clevel,form='unformatted')
        write(800+iam)ireac,iphot,inum,kdn
        write(800+iam)timinc,ihet_flag
        write(800+iam)pjbr2,rbr_ss,fr_hbrss,tau_ss,dvh,fctr_br
        write(800+iam)phoj
        write(800+iam)r
        write(800+iam)dn
        write(800+iam)hr
        write(800+iam)dens
        write(800+iam)xbr
        write(800+iam)xbr2
        write(800+iam)xbro
        write(800+iam)xhbr
        write(800+iam)xbrno3
        write(800+iam)xhobr
        write(800+iam)xbrcl
        write(800+iam)sice_br2
        write(800+iam)ss_br2
        call flush(800+iam)
        close(800+iam)
       endif
      endif
      if (kdn .eq. 1) then
        if(nstepat>400.and.tile.eq.3)then
          if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
             write(600+iam,*)'top kdn',kdn
             write(600+iam,*)'ihet_flag',ihet_flag,'katchem',katchem,'nstepat',nstepat
             write(600+iam,'("dens ",e12.5)')dens
             write(600+iam,'("xbr ",e12.5)')xbr
             write(600+iam,'("xbr2 ",e12.5)')xbr2
             write(600+iam,'("xbro ",e12.5)')xbro
             write(600+iam,'("xhbr ",e12.5)')xhbr
             write(600+iam,'("xbrno3 ",e12.5)')xbrno3
             write(600+iam,'("xhobr ",e12.5)')xhobr
             write(600+iam,'("xbrcl ",e12.5)')xbrcl
             write(600+iam,'("sice_br2 ",e12.5)')sice_br2
             write(600+iam,'("ss_br2 ",e12.5)')ss_br2
             call flush(600+iam)
          endif
        endif
!       if(iprn>0.and.kprn.eq.1)then
!         write(300+iam,*)'drip',drip,'xbr',xbr,'xbro',xbro
!         write(300+iam,*)'xhbr',xhbr,'xbrno3',xbrno3,'xhobr',xhobr
!         write(300+iam,*)'xbrcl',xbrcl,'xbr2',xbr2
!         write(300+iam,*)'sice_br2',sice_br2,'ss_br2',ss_br2
!         write(300+iam,*)'pjbr2',pjbr2,'rbr_ss',rbr_ss,'fr_hbrss',fr_hbrss
!         write(300+iam,*)'tau_ss',tau_ss,'dvh',dvh,'fctr_br',fctr_br
!         call flush(300+iam)
!       endif
10      continue
        t = t+dt
        n = n+1
        if (t .gt. timinc) then
          t = t - dt
          dt = timinc+0.1-t
          t = timinc + 0.1
        endif
        if(nstepat.ge.750.and.tile.eq.3)then
          if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
             write(600+iam,*)'kdn',kdn,'t',t,'dt',dt,'n',n
             write(600+iam,*)'ihet_flag',ihet_flag,'katchem',katchem,'nstepat',nstepat
             write(600+iam,'("dens ",e12.5)')dens
             write(600+iam,'("xbr ",e12.5)')xbr
             write(600+iam,'("xbr2 ",e12.5)')xbr2
             write(600+iam,'("xbro ",e12.5)')xbro
             write(600+iam,'("xhbr ",e12.5)')xhbr
             write(600+iam,'("xbrno3 ",e12.5)')xbrno3
             write(600+iam,'("xhobr ",e12.5)')xhobr
             write(600+iam,'("xbrcl ",e12.5)')xbrcl
             write(600+iam,'("sice_br2 ",e12.5)')sice_br2
             write(600+iam,'("ss_br2 ",e12.5)')ss_br2
             call flush(600+iam)
          endif
        endif
        xhbrold=xhbr
        xhobrold=xhobr
        xbrclold=xbrcl
        xbr2old=xbr2
        xbroold=xbro
        xbrno3old=xbrno3
        xbrold=xbr

!      if(n>10)then
!        write(200+iam,*)'n',n,'t',t,'dt',dt,'timinc',timinc,'kind',kind(timinc),
!     *  'i',iatchem,jatchem,katchem,'xhobr',xhobr,'xbro',xbro,'xbr2',xbr2,
!     *   'xbrno3',xbrno3,'tau_ss',tau_ss,'fr_hbrss',fr_hbrss,'drip',
!     *   drip,'xbr',xbr,'xhbr',xhbr,'dvn',dvn,'sice_br2',sice_br2
!        call flush(200+iam)
!      endif
!     if(isnan(xhobr))then
!       write(6,*)'top xhobr ',xhobr,'n',n,'t',t,'dt',dt,iatchem,jatchem,katchem
!       call flush(6)
!     endif
c
      pbr = (phoj(32)+r(97)*dn(2)+r(99)*dn(3)+
     1       (r(101)+r(102))*dn(25)
     1       +2.*0.85*r(104)*xbro)*xbro + r(105)*dn(9)*xhbr
     1       +phoj(31)*xbrcl + phoj(34)*xhobr
     1       +0.29*phoj(35)*xbrno3+ 2.0*pjbr2*xbr2
      dbr = r(94)*dn(1)+r(95)*dn(10)+r(96)*dn(19)
c
      pbro = r(94)*xbr*dn(1)+(r(63)*xbrcl+r(89)*xhobr)*dn(2)
     1       +0.71*phoj(35)*xbrno3
#ifdef DIAGXBR
      if(pbro>2.e8)then
        write(200+iam,*)n,'xbr',xbr,'xbrcl',xbrcl,'xhobr',xhobr,'xbrno3',
     *  xbrno3,iatchem,jatchem,katchem
        write(200+iam,*)n,'r94',r(94),'dn1',dn(1),'r63',r(63),'r89',r(89),'dn2',dn(2)
        write(200+iam,*)'phoj35',phoj(35),'term1 ',r(94)*xbr*dn(1),' term2 ',
     *  r(63)*xbrcl*dn(2),' term3 ',r(89)*xhobr*dn(2)
        call flush(200+iam)
      endif
#endif
      dbro = phoj(32)+r(97)*dn(2)+r(98)*dn(10)+r(99)*dn(3)+
     1       r(100)*dn(4)*dens+(r(101)+r(102)+r(103))*dn(25)
     1       +2.*r(104)*xbro
      phbr = (r(95)*dn(10)+r(96)*dn(19))*xbr 
      dhbr = phoj(33)+r(105)*dn(9)+r(88)*dn(2)+hr(6)*xhobr+hr(8)*dn(38)
     1       +drip+fr_hbrss/tau_ss
c
      phobr = r(98)*xbro*dn(10)+hr(9)*xbrno3*dn(13)
      dhobr = phoj(34)+r(89)*dn(2)+hr(6)*xhbr+hr(7)*dn(14)
CCCMNN0508    loss of hobr on seaice
      dhobr = dhobr + dvh*fctr_br
c
      pbrno3 = r(100)*dn(4)*dens*xbro
      dbrno3 = phoj(35)+hr(9)*dn(13)
c
c
      pbrcl = r(103)*dn(25)*xbro+hr(7)*dn(14)*xhobr+
     1        hr(8)*dn(38)*xhbr
      dbrcl = phoj(31)+r(63)*dn(2)
c
      pbr2 = r(104)*0.15*xbro*xbro+hr(6)*xhobr*xhbr
!     if(nstepat>440.and.tile.eq.3)then
!       if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
!         write(200+iam,*)n,nstepat,'dt',dt,'katchem',katchem
!         write(200+iam,'("pbr ",2e12.5)')pbr,dbr
!         write(200+iam,'("pbro ",2e12.5)')pbro,dbro
!         write(200+iam,'("phbr ",2e12.5)')phbr,dhbr
!         write(200+iam,'("phobr ",2e12.5)')phobr,dhobr
!         write(200+iam,'("pbrno3",2e12.5)')pbrno3,dbrno3
!         write(200+iam,'("pbrcl",2e12.5)')pbrcl,dbrcl
!         write(200+iam,'("pbr2 ",e12.5)')pbr2
!         write(200+iam,'("xbro ",e12.5)')xbro
!         write(200+iam,'("xhobr ",e12.5)')xhobr
!         write(200+iam,'("xhbr ",e12.5)')xhbr
!         write(200+iam,*)'r104',r(104),'hr6',hr(6)
!         call flush(6)
!         write(500+iam,*)'pbr2 one ',pbr2,'r104',r(104),'xbro',xbro,'hr6',hr(6),'xhobr',xhobr,'xhbr',xhbr
!         write(500+iam,*)'pbrno3',pbrno3,'r100',r(100),'dn4',dn(4),'dens',dens,'xbro',xbro
!         write(500+iam,*)'dbrno3',dbrno3,'phoj35',phoj(35),'hr9',hr(9),'dn',dn(13)
!         write(500+iam,*)'pbr',pbr,dbr
!         write(500+iam,*)'pbro',pbro,dbro
!         write(500+iam,*)'phbr',phbr,dhbr
!         write(500+iam,*)'phobr',phobr,dhobr
!         write(500+iam,*)'pbrno3',pbrno3,dbrno3
!         write(500+iam,*)'pbrcl',pbrcl,dbrcl
!       endif
!     endif
      if(abs(pbr2)>1.e40)then
!       add in other terms
        write(400+iam,*)'phoj',phoj,'iatchem',iatchem,jatchem,katchem
        write(400+iam,*)'pjbr2',pjbr2,'rbr_ss',rbr_ss,'fr_hbrss',fr_hbrss,'tau_ss',tau_ss,'dvh',dvh,'fctr_br',fctr_br
        write(400+iam,*)'r',r
        write(400+iam,*)'dn',dn
        write(400+iam,*)'hr',hr
        call flush(400+iam)
        write(200+iam,*)'pbr2',pbr2,iatchem,jatchem,katchem
        call flush(200+iam)
        write(200+iam,*)'xbro',xbro,'hr6',hr(6),'xhobr',xhobr,'xhbr',xhbr
        call flush(200+iam)
        write(200+iam,*)'t',t,'n',n,'timinc',timinc,'dt',dt
        call flush(200+iam)
      endif
!     if(isnan(pbr2))then
!        write(200+iam,*)'pbr2 aa ',pbr2,'t',t,n
!        call flush(200+iam)
!     endif
!CCMNN0508    Br2 source at seaice
      pbr2 = pbr2 + dvh*fctr_br*xhobr
!      if(nstepat>440.and.tile.eq.3)then
!        if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
!          write(500+iam,*)'dvh',dvh,'fctr_b',fctr_b,'xhobr',xhobr
!          call flush(500+iam)
!        endif
!      endif
!     if(abs(pbr2)>1.e40)then
!         write(200+iam,*)'iatchem',iatchem,jatchem,katchem
!         write(200+iam,*)'pbr2 b big ',pbr2,'dvh',dvh,fctr_br,xhobr
!         call flush(200+iam)
!     endif

!     if(isnan(pbr2))then
!        write(200+iam,*)'pbr2 bb ',pbr2,'t',t,n
!        call flush(200+iam)
!     endif
!CCMNN0508    Br2 from seasalt within the PBL
      if (xhobr .gt. dens*1.0e-15) then
       pbr2 = pbr2 + rbr_ss
!      if(nstepat>440.and.tile.eq.3)then
!        if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
!          write(500+iam,*)'pbr2 new ',pbr2,'rbr_ss',rbr_ss
!          call flush(500+iam)
!        endif
!      endif
!     if(abs(pbr2)>1.e40)then
!         write(200+iam,*)'iatchem',iatchem,jatchem,katchem
!       write(200+iam,*)'pbr2 c big ',pbr2,'rbr_ss',rbr_ss
!       call flush(200+iam)
!     endif
       ss_br2 = ss_br2 + rbr_ss*dt/timinc
       endif
      dbr2 = pjbr2
c
      sice_br2 = sice_br2+dvh*fctr_br*xhobr*dt/timinc
!      if(nstepat>440.and.tile.eq.3)then
!        if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
!      write(500+iam,*)'pbr2',pbr2,'dbr2',dbr2,n,dt
!      write(500+iam,*)'sice_br2',sice_br2
!      call flush(500+iam)
!       endif
!       endif
!     if(isnan(sice_br2).or.abs(sice_br2)>1.e40)then
!        write(6,*)'at b dvh',dvh,'fctr_br',fctr_br,iatchem,jatchem,
!    *   katchem,'xhobr',xhobr,'dt',dt,'timinc',timinc,'t',t,n
!     endif
c
CCCMNN 0608
      dtinv = 1.0/dt
cc      xbr = xbr+petend(xbr,pbr,dbr,dt,dtinv)*dt
cc      xbro = xbro+petend(xbro,pbro,dbro,dt,dtinv)*dt
cc      xbrcl = xbrcl+petend(xbrcl,pbrcl,dbrcl,dt,dtinv)*dt
cc      xbr2 = xbr2+petend(xbr2,pbr2,dbr2,dt,dtinv)*dt
cc      xhbr = xhbr+petend(xhbr,phbr,dhbr,dt,dtinv)*dt
cc      xhobr = xhobr+petend(xhobr,phobr,dhobr,dt,dtinv)*dt
CCCMNN  Limit brno3 production by available NO2
cc      xbrno3 = xbrno3+min(petend(xbrno3,pbrno3,dbrno3,dt,dtinv),
cc     1         dn(4)/timinc)*dt
cc      xbrno3 = xbrno3+petend(xbrno3,pbrno3,dbrno3,dt,dtinv)*dt


      xbr=pbr/dbr + (xbr - pbr/dbr)*exp(-dbr*dt)
      xbro=pbro/dbro + (xbro - pbro/dbro)*exp(-dbro*dt)
      if(dbrcl>0.0)then
        xbrcl=pbrcl/dbrcl + (xbrcl-pbrcl/dbrcl)*exp(-dbrcl*dt)
      else
        xbrcl=xbrcl+pbrcl*dt ! ajl new
      endif
!     if(isnan(xbr2))then
!         write(200+iam,*)'iatchem',iatchem,jatchem,katchem
!      write(200+iam,*)'abover br2'
!      call flush(200+iam)
!     endif
      if(dbr2>0.0)then
        xbr2=pbr2/dbr2 + (xbr2-pbr2/dbr2)*exp(-dbr2*dt)
      else
        xbr2=xbr2+pdr2*dt
      endif
      dtxbr2=abs(xbr2-xbr2old)/max(10000.,xbr2old)
!      if(dtxbr2>.2)then
!        write(600+iam,*)'xbr2 ',xbr2,' old ',xbr2old,' exp ',exp(-dbr2*dt)
!        write(600+iam,*)'new ',pbr2/dbr2,' idff ',xbr2old-pbr2/dbr2
!      endif
!     if(isnan(xbr2))then
!         write(200+iam,*)'iatchem',iatchem,jatchem,katchem
!       write(200+iam,*)' bb xbr2',xbr2,'pbr2',pbr2,'dbr2',dbr2,'dt',dt,'xbr',xbr,'dbr',dbr
!       call flush(200+iam)
!     endif
      if (dhbr .gt. 0.0) then ! ajl add
        xhbr=phbr/dhbr + (xhbr - phbr/dhbr)*exp(-dhbr*dt)
      else
        xhbr = xhbr + phbr*dt ! ajl add
      endif
      if (dhobr .gt. 0.0) then ! ajl add
        xhobr=phobr/dhobr + (xhobr - phobr/dhobr)*exp(-dhobr*dt)
      else
        xhobr=xhobr+phbr*dt ! ajl add
      endif
      xtmp=pbrno3/dbrno3 + (xbrno3 - pbrno3/dbrno3)*exp(-dbrno3*dt)
      if ((xtmp-xbrno3)/dt .gt. dn(4)/timinc) then
       xbrno3=xbrno3+dn(4)*dt/timinc
       else
       xbrno3 = xtmp
       endif

c
      if (t .lt. timinc) then
       dt = dt*1.2
       dt = min(dt,dtmax)
!       if(n>25)then ajl new
       if(n>4)then
!      real dtxhbr,dtxbrno3,dtxhobr,dtxbrcl,dtxbr2,dtxbro
       dtxbr=abs(xbr-xbrold)/max(10000.,xbrold)
       dtxhbr=abs(xhbr-xhbrold)/max(10000.,xhbrold)
       dtxbro=abs(xbro-xbroold)/max(10000.,xbroold)
       dtxbrcl=abs(xbrcl-xbrclold)/max(10000.,xbrclold)
       dtxbr2=abs(xbr2-xbr2old)/max(10000.,xbr2old)
!       write(500+iam,*)'xhobr',xhobr,'old',xhobrold
!       write(500+iam,*)'xbrno3',xbrno3,xbrno3old
!       call flush(500+iam)
       dtxhobr=abs(xhobr-xhobrold)/max(10000.,xhobrold)
       dtxbrno3=abs(xbrno3-xbrno3old)/max(10000.,xbrno3old)
!       write(500+iam,*)'dtxhobr',dtxhobr,dtxbrno3,iatchem,jatchem,katchem
!       call flush(500+iam)
!      real xhbrold,xbrno3old,xhobrold,xbrclold,xbr2old,xbroold
       if(dtxhbr>.20.or.dtxbro>.20.or.dtxbrcl>.20.or.dtxbr2>.20.or.
     *    dtxhobr>.20.or.dtxbrno3>.20.or.dtxbr>.20)then
!          dt=dt*.5
!          dt=max(.2,dt)
!          ajl try going back to .2 again to settle down too positive feed back
           dt=dtmin
 !          write(600+iam,*)'new reset day dtxhbr',dtxhbr,'dtxbro',dtxbro,'dtxbrcl',dtxbrcl
 !          write(600+iam,*)'dtxbr2',dtxbr2,'dtxhobr',dtxhobr,'dtxbrno3',dtxbrno3,'dtxbr',dtgxbr
 !          write(600+iam,*)'pbr2',pbr2,'dbr2=',dbr2,'n',n,'dt',dt
#ifdef DIAGXBR
      if(nstepat>440.and.tile.eq.3)then
        if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
         write(200+iam,*)'night phobr/dhobr',phobr/dhobr,'xhobr',xhobr,'dhobr',dhobr
         write(200+iam,*)'nstepat',nstepat,' dt ',dt,'dtxbr',dtxbr,'k',katchem
         write(200+iam,*)n,dt,'iatchem',iatchem,jatchem,katchem,
     *   ' dtxhbr ',dtxhbr,' dtxbro ',dtxbro,
    
     *   ' dtxbrcl ',dtxbrcl,' dtxbr2 ',dtxbr2,' xhobr ',
     *   dtxhobr,' dtbrno3 ',dtxbrno3
         write(200+iam,*)'xhobrold ',xhobr,xhobrold,
     *  ' xbrno3old ',xbrno3,xbrno3old
         call flush(200+iam)
!      xbro=pbro/dbro + (xbro - pbro/dbro)*exp(-dbro*dt)
        write(200+iam,*)'n',n,'xbro',xbro,'pbro',pbro,'dbro',dbro
        write(200+iam,*)'ratio ',pbro/dbro,'exp',-dbro*dt
        write(200+iam,*)'xbrno3',xbrno3
        write(200+iam,*)'xbr',xbr,'xhobr',xhobr
        call flush(200+iam)
        endif
        endif
#endif
       endif
       endif
       go to 10
       endif
c
c
cccccc     NIGHTTIME
      else
c
!       if(nstepat>400.and.tile.eq.3)then
!         if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
!            write(600+iam,*)'top kdn',kdn
!            write(600+iam,*)'night ihet_flag',ihet_flag,'katchem',katchem,'nstepat',nstepat
!            write(600+iam,'("dens ",e12.5)')dens
!            write(600+iam,'("xbr ",e12.5)')xbr
!            write(600+iam,'("xbr2 ",e12.5)')xbr2
!            write(600+iam,'("xbro ",e12.5)')xbro
!            write(600+iam,'("xhbr ",e12.5)')xhbr
!            write(600+iam,'("xbrno3 ",e12.5)')xbrno3
!            write(600+iam,'("xhobr ",e12.5)')xhobr
!            write(600+iam,'("xbrcl ",e12.5)')xbrcl
!            write(600+iam,'("sice_br2 ",e12.5)')sice_br2
!            write(600+iam,'("ss_br2 ",e12.5)')ss_br2
!            call flush(600+iam)
!         endif
!       endif
20    continue
      t = t+dt
      n = n+1
      if (t .gt. timinc) then
       t = t - dt
       dt = timinc+0.1-t
       t = timinc + 0.1
       endif
!       if(nstepat.ge.750.and.tile.eq.3)then
!         if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
!            write(600+iam,*)'kdn',kdn,'t',t,'dt',dt,'n',n
!            write(600+iam,*)'ihet_flag',ihet_flag,'katchem',katchem,'nstepat',nstepat
!            write(600+iam,'("dens ",e12.5)')dens
!            write(600+iam,'("xbr ",e12.5)')xbr
!            write(600+iam,'("xbr2 ",e12.5)')xbr2
!            write(600+iam,'("xbro ",e12.5)')xbro
!            write(600+iam,'("xhbr ",e12.5)')xhbr
!            write(600+iam,'("xbrno3 ",e12.5)')xbrno3
!            write(600+iam,'("xhobr ",e12.5)')xhobr
!            write(600+iam,'("xbrcl ",e12.5)')xbrcl
!            write(600+iam,'("sice_br2 ",e12.5)')sice_br2
!            write(600+iam,'("ss_br2 ",e12.5)')ss_br2
!            call flush(600+iam)
!         endif
!       endif
c
      xhobrold=xhobr
      xhbrold=xhbr
      xbroold=xbro
      xbrno3old=xbrno3
      xbrold=xbr
      pbr = (r(99)*dn(3)+
     1       (r(101)+r(102))*dn(25)
     1       +2.*0.85*r(104)*xbro)*xbro + r(105)*dn(9)*xhbr
      dbr = r(94)*dn(1)+r(95)*dn(10)+r(96)*dn(19)
c
      pbro = r(94)*xbr*dn(1)
      dbro = r(98)*dn(10)+r(99)*dn(3)+
     1       r(100)*dn(4)*dens+(r(101)+r(102)+r(103))*dn(25)
     1       +2.*r(104)*xbro
      phbr = (r(95)*dn(10)+r(96)*dn(19))*xbr
      dhbr = r(105)*dn(9)+hr(6)*xhobr+hr(8)*dn(38)
     1     +drip + fr_hbrss/tau_ss
c
c
      phobr = r(98)*xbro*dn(10)+hr(9)*xbrno3*dn(13)
      dhobr = hr(6)*xhbr+hr(7)*dn(14)
CCCMNN0508   loss on seaice
      dhobr = dhobr + dvh*fctr_br
c
      pbrno3 = r(100)*dn(4)*dens*xbro
      dbrno3 = hr(9)*dn(13)
c
      pbr2 = r(104)*0.15*xbro*xbro+hr(6)*xhbr*xhobr
CCCMNN0508   source on seaice
      pbr2 = pbr2 + dvh*fctr_br*xhobr
CCCMNN0508   Br2 from seasalt
      if (xhobr .gt. dens*1.0e-15) then
       pbr2  = pbr2 + rbr_ss
       ss_br2 = ss_br2 + rbr_ss*dt/timinc
      endif
      dbr2=0.0
c
      pbrcl = r(103)*dn(25)*xbro+hr(7)*dn(14)*xhobr+
     1        hr(8)*dn(38)*xhbr
      dbrcl = 0.0
c
      sice_br2 = sice_br2+dvh*fctr_br*xhobr*dt/timinc
!     if(isnan(sice_br2).or.abs(sice_br2)>1.e40)then
!        write(6,*)'at a dvh',iatchem,jatchem,katchem,dvh,'fctr_br',
!    *fctr_br,'xhobr',xhobr,'dt',dt,'timinc',timinc,'t',t,'n',n
!        call flush(6)
!     endif
c
CCCMNN 0608
      dtinv = 1.0/dt
cc      xbr = xbr+petend(xbr,pbr,dbr,dt,dtinv)*dt
cc      xbro = xbro+petend(xbro,pbro,dbro,dt,dtinv)*dt
cc      xbrcl = xbrcl+petend(xbrcl,pbrcl,dbrcl,dt,dtinv)*dt
cc      xbr2 = xbr2+petend(xbr2,pbr2,dbr2,dt,dtinv)*dt
cc      xhbr = xhbr+petend(xhbr,phbr,dhbr,dt,dtinv)*dt
cc      xhobr = xhobr+petend(xhobr,phobr,dhobr,dt,dtinv)*dt
CCCMNN  Limit brno3 production by available NO2
cc      xbrno3 = xbrno3+min(petend(xbrno3,pbrno3,dbrno3,dt,dtinv),
cc     1         dn(4)/timinc)*dt
cc      xbrno3 = xbrno3+petend(xbrno3,pbrno3,dbrno3,dt,dtinv)*dt


      xbr=pbr/dbr + (xbr - pbr/dbr)*exp(-dbr*dt)
      xbro=pbro/dbro + (xbro - pbro/dbro)*exp(-dbro*dt)
      if (dhbr .gt. 0.0) then
        xhbr=phbr/dhbr + (xhbr - phbr/dhbr)*exp(-dhbr*dt)
      else
        xhbr = xhbr + phbr*dt
      endif
      if (dhobr .gt. 0.0) then
        xhobr=phobr/dhobr + (xhobr - phobr/dhobr)*exp(-dhobr*dt)
      else
        xhobr = xhobr + phobr*dt
      endif
      if (dbrno3 .gt. 0.0) then
cc      xbrno3=pbrno3/dbrno3 + (xbrno3 - pbrno3/dbrno3)*exp(-dbrno3*dt)
cc      else
cc      xbrno3 = xbrno3 + pbrno3*dt
cc      endif
        xtmp=pbrno3/dbrno3 + (xbrno3 - pbrno3/dbrno3)*exp(-dbrno3*dt)
      else
        xtmp = xbrno3 + pbrno3*dt
      endif
      if ((xtmp-xbrno3)/dt .gt. dn(4)/timinc) then
        xbrno3=xbrno3+dn(4)*dt/timinc
      else
        xbrno3=xtmp
      endif

      xbrcl = xbrcl + pbrcl * dt
      xbr2 = xbr2 + pbr2 * dt
      if(n>4)then
        dtxhobr=abs(xhobr-xhobrold)/max(10000.,xhobrold)
        dtxhbr=abs(xhbr-xhbrold)/max(10000.,xhbrold)
        dtxbr=abs(xbr-xbrold)/max(10000.,xbrold)
        dtxbro=abs(xbro-xbroold)/max(10000.,xbroold)
        dtxbrno3=abs(xbrno3-xbrno3old)/max(10000.,xbrno3old)
      
        if(dtxhobr>.20.or.dtxhbr>.20.or.dtxbr>.20.or.dtxbro>.20.or.dtxbrno3>.20)then
!          write(600+iam,*)'dtxhbr',dtxhbr,'dtxbr',dtxbr,'dtxbro',dtxbro,'dtxbrno3',dtxbrno3
!          write(600+iam,*)'new reset night dt dtxhobr',dtxhobr,' n ',n,' nstepat ',nstepat,' dt',dt
!          call flush(600+iam)
          if(dtxhobr>.9)then
            write(600+iam,*)'iatchem',iatchem,jatchem,katchem
            write(600+iam,*)'-dhobr*dt ',-dhobr*dt
            write(600+iam,*)'xhobr',xhobr,'xhobrold',xhobrold
            write(600+iam,*)'phobr',phobr,'dhobr',dhobr,'exp',exp(-dhobr*dt)
            write(600+iam,*)'phobr/dhobr',phobr/dhobr
          endif
          if(dtxbro>.9)then
            write(600+iam,*)'iatchem',iatchem,jatchem,katchem
            write(600+iam,*)'xbro ',xbro,' xbroold ',xbroold
            write(600+iam,*)'pbro',pbro,'dbro',dbro,'exp',exp(-dbro*dt)
            write(600+iam,*)'pbro/dbro',pbro/dbro
            call flush(600+iam)
          endif
          if(dtxbr>.90)then
            write(600+iam,*)'iatchem',iatchem,jatchem,katchem
            write(600+iam,*)'xhbr',xhbr,xhbrold,'n',n,'dt',dt,'nstepat',nstepat
!      xbr=pbr/dbr + (xbr - pbr/dbr)*exp(-dbr*dt)
            write(600+iam,*)'pbr/dbr',pbr/dbr,'xbrold',xbrold,'exp',exp(-dbr*dt)
            call flush(600+iam)
          endif
          dt=dtmin
        endif
      endif
      
        if(nstepat>400.and.tile.eq.3)then
          if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jpnin.and.katchem<=2)then
    
             write(600+iam,*)'night ihet_flag',ihet_flag,' n ',n,' dt ',dt,'k',katchem
             write(600+iam,'("dens ",e12.5)')dens
             write(600+iam,'("xbr ",e12.5)')xbr
             write(600+iam,'("xbr2 ",e12.5)')xbr2
             write(600+iam,'("xbro ",e12.5)')xbro
             write(600+iam,'("xhbr ",e12.5)')xhbr
             write(600+iam,'("xbrno3 ",e12.5)')xbrno3
             write(600+iam,'("xhobr ",e12.5)')xhobr
             write(600+iam,'("xbrcl ",e12.5)')xbrcl
             write(600+iam,'("sice_br2 ",e12.5)')sice_br2
             write(600+iam,'("ss_br2 ",e12.5)')ss_br2
             call flush(600+iam)
        write(ciam,'(i3.3)')iam
        write(cstep,'(i4.4)')nstepat
        open(800+iam,file='night.newbrintg.'//ciam//'.'//cstep//'.'//clevel,form='unformatted')
        write(800+iam)ireac,iphot,inum
        write(800+iam)timinc,ihet_flag
        write(800+iam)pjbr2,rbr_ss,fr_hbrss,tau_ss,dvh,fctr_br
        write(800+iam)phoj
        write(800+iam)r
        write(800+iam)dn
        write(800+iam)hr
        write(800+iam)dens
        write(800+iam)xbr
        write(800+iam)xbr2
        write(800+iam)xbro
        write(800+iam)xhbr
        write(800+iam)xbrno3
        write(800+iam)xhobr
        write(800+iam)xbrcl
        write(800+iam)sice_br2
        write(800+iam)ss_br2
        call flush(800+iam)
          endif
        endif

c
      if (t .lt. timinc) then
       dt = dt*1.2
       dt = min(dt,dtmax)
       go to 20
       endif
c
c
      endif
      return
      end
#else
CCCMNN0508      subroutine brintg (kdn,ktf,ihet_flag,drip,dens)
      subroutine brintg (kdn,ktf,ihet_flag,drip,dens,xbr,xbro,
     1  xhbr,xbrno3,xhobr,xbrcl,xbr2,sice_br2,ss_br2)
      use raqmschem_pmgrid_mod, only : iam,iatchem,jatchem,katchem,
     *nstepat,iprn,jprn,kprn,tile,iprnin,jprnin,iamprn
c
      include 'comm_defs_24t.chem'
      common /blk4_24/ r(ireac),hr(ihreac),phoj(iphot),dn(inum),
     1              zeta,pur,sad,prodloss(13)
      common/pceinfo/timinc,tdenom,save_clo,save_bro,
     +       ipce_clno3,ipce_hocl,ipce_brno3,ipce_hobr,rbrobr
     +       ,equil_fam
      common/brx_com/pjbr2,rbr_ss,fr_hbrss,tau_ss,dvh,fctr_br
      real*8 xhbrold,xbrno3old,xhobrold,xbrclold,xbr2old,xbroold
      real*8 dtxhbr,dtxbrno3,dtxhobr,dtxbrcl,dtxbr2,dtxbro
      real*8 xbrold,dtxbr,dt,dhobr,dhobrdt,phobr,term1,term2
      character *3 ciam,cstep*4,clevel*1


c
C$OMP THREADPRIVATE (/blk4_24/)
C$OMP THREADPRIVATE (/pceinfo/)
C$OMP THREADPRIVATE (/brx_com/)
c
c
      t = 0.
      n = 0
      dt = 0.2
c
cccccc  DAYTIME
cc
      write(clevel,'(i1.1)')katchem
      write(ciam,'(i3.3)')iam
      write(cstep,'(i4.4)')nstepat
!      if(iam.eq.iamprn)then
!        write(6,*)'iprnin',iprnin,jprnin,'tile',tile,'iatchem',iatchem,jatchem,katchem,'nstepat',nstepat
!        call flush(6)
!      endif
      if(nstepat>400.and.tile.eq.3)then
       if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
        open(800+iam,file='brintg.'//ciam//'.'//cstep//'.'//clevel,form='unformatted')
        write(800+iam)ireac,iphot,inum,kdn
        write(800+iam)timinc,ihet_flag
        write(800+iam)pjbr2,rbr_ss,fr_hbrss,tau_ss,dvh,fctr_br
        write(800+iam)phoj
        write(800+iam)r
        write(800+iam)dn
        write(800+iam)hr
        write(800+iam)dens
        write(800+iam)xbr
        write(800+iam)xbr2
        write(800+iam)xbro
        write(800+iam)xhbr
        write(800+iam)xbrno3
        write(800+iam)xhobr
        write(800+iam)xbrcl
        write(800+iam)sice_br2
        write(800+iam)ss_br2
        call flush(800+iam)
        close(800+iam)
       endif
      endif
      if (kdn .eq. 1) then
        if(nstepat>400.and.tile.eq.3)then
          if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
             write(600+iam,*)'top kdn',kdn
             write(600+iam,*)'ihet_flag',ihet_flag,'katchem',katchem,'nstepat',nstepat
             write(600+iam,'("dens ",e12.5)')dens
             write(600+iam,'("xbr ",e12.5)')xbr
             write(600+iam,'("xbr2 ",e12.5)')xbr2
             write(600+iam,'("xbro ",e12.5)')xbro
             write(600+iam,'("xhbr ",e12.5)')xhbr
             write(600+iam,'("xbrno3 ",e12.5)')xbrno3
             write(600+iam,'("xhobr ",e12.5)')xhobr
             write(600+iam,'("xbrcl ",e12.5)')xbrcl
             write(600+iam,'("sice_br2 ",e12.5)')sice_br2
             write(600+iam,'("ss_br2 ",e12.5)')ss_br2
             call flush(600+iam)
          endif
        endif
!       if(iprn>0.and.kprn.eq.1)then
!         write(300+iam,*)'drip',drip,'xbr',xbr,'xbro',xbro
!         write(300+iam,*)'xhbr',xhbr,'xbrno3',xbrno3,'xhobr',xhobr
!         write(300+iam,*)'xbrcl',xbrcl,'xbr2',xbr2
!         write(300+iam,*)'sice_br2',sice_br2,'ss_br2',ss_br2
!         write(300+iam,*)'pjbr2',pjbr2,'rbr_ss',rbr_ss,'fr_hbrss',fr_hbrss
!         write(300+iam,*)'tau_ss',tau_ss,'dvh',dvh,'fctr_br',fctr_br
!         call flush(300+iam)
!       endif
10      continue
        t = t+dt
        n = n+1
        if (t .gt. timinc) then
          t = t - dt
          dt = timinc+0.1-t
          t = timinc + 0.1
        endif
        if(nstepat.ge.750.and.tile.eq.3)then
          if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
             write(600+iam,*)'kdn',kdn,'t',t,'dt',dt,'n',n
             write(600+iam,*)'ihet_flag',ihet_flag,'katchem',katchem,'nstepat',nstepat
             write(600+iam,'("dens ",e12.5)')dens
             write(600+iam,'("xbr ",e12.5)')xbr
             write(600+iam,'("xbr2 ",e12.5)')xbr2
             write(600+iam,'("xbro ",e12.5)')xbro
             write(600+iam,'("xhbr ",e12.5)')xhbr
             write(600+iam,'("xbrno3 ",e12.5)')xbrno3
             write(600+iam,'("xhobr ",e12.5)')xhobr
             write(600+iam,'("xbrcl ",e12.5)')xbrcl
             write(600+iam,'("sice_br2 ",e12.5)')sice_br2
             write(600+iam,'("ss_br2 ",e12.5)')ss_br2
             call flush(600+iam)
          endif
        endif
        xhbrold=xhbr
        xhobrold=xhobr
        xbrclold=xbrcl
        xbr2old=xbr2
        xbroold=xbro
        xbrno3old=xbrno3
        xbrold=xbr

!      if(n>10)then
!        write(200+iam,*)'n',n,'t',t,'dt',dt,'timinc',timinc,'kind',kind(timinc),
!     *  'i',iatchem,jatchem,katchem,'xhobr',xhobr,'xbro',xbro,'xbr2',xbr2,
!     *   'xbrno3',xbrno3,'tau_ss',tau_ss,'fr_hbrss',fr_hbrss,'drip',
!     *   drip,'xbr',xbr,'xhbr',xhbr,'dvn',dvn,'sice_br2',sice_br2
!        call flush(200+iam)
!      endif
!     if(isnan(xhobr))then
!       write(6,*)'top xhobr ',xhobr,'n',n,'t',t,'dt',dt,iatchem,jatchem,katchem
!       call flush(6)
!     endif
c
      pbr = (phoj(32)+r(97)*dn(2)+r(99)*dn(3)+
     1       (r(101)+r(102))*dn(25)
     1       +2.*0.85*r(104)*xbro)*xbro + r(105)*dn(9)*xhbr
     1       +phoj(31)*xbrcl + phoj(34)*xhobr
     1       +0.29*phoj(35)*xbrno3+ 2.0*pjbr2*xbr2
      dbr = r(94)*dn(1)+r(95)*dn(10)+r(96)*dn(19)
c
      pbro = r(94)*xbr*dn(1)+(r(63)*xbrcl+r(89)*xhobr)*dn(2)
     1       +0.71*phoj(35)*xbrno3
#ifdef DIAGXBR
      if(pbro>2.e8)then
        write(200+iam,*)n,'xbr',xbr,'xbrcl',xbrcl,'xhobr',xhobr,'xbrno3',
     *  xbrno3,iatchem,jatchem,katchem
        write(200+iam,*)n,'r94',r(94),'dn1',dn(1),'r63',r(63),'r89',r(89),'dn2',dn(2)
        write(200+iam,*)'phoj35',phoj(35),'term1 ',r(94)*xbr*dn(1),' term2 ',
     *  r(63)*xbrcl*dn(2),' term3 ',r(89)*xhobr*dn(2)
        call flush(200+iam)
      endif
#endif
      dbro = phoj(32)+r(97)*dn(2)+r(98)*dn(10)+r(99)*dn(3)+
     1       r(100)*dn(4)*dens+(r(101)+r(102)+r(103))*dn(25)
     1       +2.*r(104)*xbro
      phbr = (r(95)*dn(10)+r(96)*dn(19))*xbr 
      dhbr = phoj(33)+r(105)*dn(9)+r(88)*dn(2)+hr(6)*xhobr+hr(8)*dn(38)
     1       +drip+fr_hbrss/tau_ss
c
      phobr = r(98)*xbro*dn(10)+hr(9)*xbrno3*dn(13)
      dhobr = phoj(34)+r(89)*dn(2)+hr(6)*xhbr+hr(7)*dn(14)
CCCMNN0508    loss of hobr on seaice
      dhobr = dhobr + dvh*fctr_br
c
      pbrno3 = r(100)*dn(4)*dens*xbro
      dbrno3 = phoj(35)+hr(9)*dn(13)
c
c
      pbrcl = r(103)*dn(25)*xbro+hr(7)*dn(14)*xhobr+
     1        hr(8)*dn(38)*xhbr
      dbrcl = phoj(31)+r(63)*dn(2)
c
      pbr2 = r(104)*0.15*xbro*xbro+hr(6)*xhobr*xhbr
      if(nstepat>440.and.tile.eq.3)then
        if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
          write(200+iam,*)n,nstepat,'dt',dt,'katchem',katchem
          write(200+iam,'("pbr ",2e12.5)')pbr,dbr
          write(200+iam,'("pbro ",2e12.5)')pbro,dbro
          write(200+iam,'("phbr ",2e12.5)')phbr,dhbr
          write(200+iam,'("phobr ",2e12.5)')phobr,dhobr
          write(200+iam,'("pbrno3",2e12.5)')pbrno3,dbrno3
          write(200+iam,'("pbrcl",2e12.5)')pbrcl,dbrcl
          write(200+iam,'("pbr2 ",e12.5)')pbr2
          write(200+iam,'("xbro ",e12.5)')xbro
          write(200+iam,'("xhobr ",e12.5)')xhobr
          write(200+iam,'("xhbr ",e12.5)')xhbr
          write(200+iam,*)'r104',r(104),'hr6',hr(6)
          call flush(6)
          write(500+iam,*)'pbr2 one ',pbr2,'r104',r(104),'xbro',xbro,'hr6',hr(6),'xhobr',xhobr,'xhbr',xhbr
          write(500+iam,*)'pbrno3',pbrno3,'r100',r(100),'dn4',dn(4),'dens',dens,'xbro',xbro
          write(500+iam,*)'dbrno3',dbrno3,'phoj35',phoj(35),'hr9',hr(9),'dn',dn(13)
          write(500+iam,*)'pbr',pbr,dbr
          write(500+iam,*)'pbro',pbro,dbro
          write(500+iam,*)'phbr',phbr,dhbr
          write(500+iam,*)'phobr',phobr,dhobr
          write(500+iam,*)'pbrno3',pbrno3,dbrno3
          write(500+iam,*)'pbrcl',pbrcl,dbrcl
        endif
      endif
      if(abs(pbr2)>1.e40)then
!       add in other terms
        write(400+iam,*)'phoj',phoj,'iatchem',iatchem,jatchem,katchem
        write(400+iam,*)'pjbr2',pjbr2,'rbr_ss',rbr_ss,'fr_hbrss',fr_hbrss,'tau_ss',tau_ss,'dvh',dvh,'fctr_br',fctr_br
        write(400+iam,*)'r',r
        write(400+iam,*)'dn',dn
        write(400+iam,*)'hr',hr
        call flush(400+iam)
        write(200+iam,*)'pbr2',pbr2,iatchem,jatchem,katchem
        call flush(200+iam)
        write(200+iam,*)'xbro',xbro,'hr6',hr(6),'xhobr',xhobr,'xhbr',xhbr
        call flush(200+iam)
        write(200+iam,*)'t',t,'n',n,'timinc',timinc,'dt',dt
        call flush(200+iam)
      endif
!     if(isnan(pbr2))then
!        write(200+iam,*)'pbr2 aa ',pbr2,'t',t,n
!        call flush(200+iam)
!     endif
!CCMNN0508    Br2 source at seaice
      pbr2 = pbr2 + dvh*fctr_br*xhobr
      if(nstepat>440.and.tile.eq.3)then
        if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
          write(500+iam,*)'dvh',dvh,'fctr_b',fctr_b,'xhobr',xhobr
          call flush(500+iam)
        endif
      endif
!     if(abs(pbr2)>1.e40)then
!         write(200+iam,*)'iatchem',iatchem,jatchem,katchem
!         write(200+iam,*)'pbr2 b big ',pbr2,'dvh',dvh,fctr_br,xhobr
!         call flush(200+iam)
!     endif

!     if(isnan(pbr2))then
!        write(200+iam,*)'pbr2 bb ',pbr2,'t',t,n
!        call flush(200+iam)
!     endif
!CCMNN0508    Br2 from seasalt within the PBL
      if (xhobr .gt. dens*1.0e-15) then
       pbr2 = pbr2 + rbr_ss
      if(nstepat>440.and.tile.eq.3)then
        if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
          write(500+iam,*)'pbr2 new ',pbr2,'rbr_ss',rbr_ss
          call flush(500+iam)
        endif
      endif
!     if(abs(pbr2)>1.e40)then
!         write(200+iam,*)'iatchem',iatchem,jatchem,katchem
!       write(200+iam,*)'pbr2 c big ',pbr2,'rbr_ss',rbr_ss
!       call flush(200+iam)
!     endif
       ss_br2 = ss_br2 + rbr_ss*dt/timinc
       endif
      dbr2 = pjbr2
c
      sice_br2 = sice_br2+dvh*fctr_br*xhobr*dt/timinc
!      if(nstepat>440.and.tile.eq.3)then
!        if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
!      write(500+iam,*)'pbr2',pbr2,'dbr2',dbr2,n,dt
!      write(500+iam,*)'sice_br2',sice_br2
!      call flush(500+iam)
!       endif
!       endif
!     if(isnan(sice_br2).or.abs(sice_br2)>1.e40)then
!        write(6,*)'at b dvh',dvh,'fctr_br',fctr_br,iatchem,jatchem,
!    *   katchem,'xhobr',xhobr,'dt',dt,'timinc',timinc,'t',t,n
!     endif
c
CCCMNN 0608
      dtinv = 1.0/dt
cc      xbr = xbr+petend(xbr,pbr,dbr,dt,dtinv)*dt
cc      xbro = xbro+petend(xbro,pbro,dbro,dt,dtinv)*dt
cc      xbrcl = xbrcl+petend(xbrcl,pbrcl,dbrcl,dt,dtinv)*dt
cc      xbr2 = xbr2+petend(xbr2,pbr2,dbr2,dt,dtinv)*dt
cc      xhbr = xhbr+petend(xhbr,phbr,dhbr,dt,dtinv)*dt
cc      xhobr = xhobr+petend(xhobr,phobr,dhobr,dt,dtinv)*dt
CCCMNN  Limit brno3 production by available NO2
cc      xbrno3 = xbrno3+min(petend(xbrno3,pbrno3,dbrno3,dt,dtinv),
cc     1         dn(4)/timinc)*dt
cc      xbrno3 = xbrno3+petend(xbrno3,pbrno3,dbrno3,dt,dtinv)*dt


      xbr=pbr/dbr + (xbr - pbr/dbr)*exp(-dbr*dt)
      xbro=pbro/dbro + (xbro - pbro/dbro)*exp(-dbro*dt)
      xbrcl=pbrcl/dbrcl + (xbrcl-pbrcl/dbrcl)*exp(-dbrcl*dt)
!     if(isnan(xbr2))then
!         write(200+iam,*)'iatchem',iatchem,jatchem,katchem
!      write(200+iam,*)'abover br2'
!      call flush(200+iam)
!     endif
      xbr2=pbr2/dbr2 + (xbr2-pbr2/dbr2)*exp(-dbr2*dt)
!     if(isnan(xbr2))then
!         write(200+iam,*)'iatchem',iatchem,jatchem,katchem
!       write(200+iam,*)' bb xbr2',xbr2,'pbr2',pbr2,'dbr2',dbr2,'dt',dt,'xbr',xbr,'dbr',dbr
!       call flush(200+iam)
!     endif
      if (dhbr .gt. 0.0) then ! ajl add
        xhbr=phbr/dhbr + (xhbr - phbr/dhbr)*exp(-dhbr*dt)
      else
        xhbr = xhbr + phbr*dt ! ajl add
      endif
      if (dhobr .gt. 0.0) then ! ajl add
        xhobr=phobr/dhobr + (xhobr - phobr/dhobr)*exp(-dhobr*dt)
      else
        xhobr=xhobr+phbr*dt ! ajl add
      endif
      xtmp=pbrno3/dbrno3 + (xbrno3 - pbrno3/dbrno3)*exp(-dbrno3*dt)
      if ((xtmp-xbrno3)/dt .gt. dn(4)/timinc) then
       xbrno3=xbrno3+dn(4)*dt/timinc
       else
       xbrno3 = xtmp
       endif

c
      if (t .lt. timinc) then
       dt = dt*1.2
       dt = min(dt,10.)
!       if(n>25)then ajl new
       if(n>5)then
!      real dtxhbr,dtxbrno3,dtxhobr,dtxbrcl,dtxbr2,dtxbro
       dtxbr=abs(xbr-xbrold)/max(1.e-20,xbrold)
       dtxhbr=abs(xhbr-xhbrold)/max(1.e-20,xhbrold)
       dtxbro=abs(xbro-xbroold)/max(1.e-20,xbroold)
       dtxbrcl=abs(xbrcl-xbrclold)/max(1.e-20,xbrclold)
       dtxbr2=abs(xbr2-xbr2old)/max(1.e-20,xbr2old)
!       write(500+iam,*)'xhobr',xhobr,'old',xhobrold
!       write(500+iam,*)'xbrno3',xbrno3,xbrno3old
!       call flush(500+iam)
       dtxhobr=abs(xhobr-xhobrold)/max(1.e-20,xhobrold)
       dtxbrno3=abs(xbrno3-xbrno3old)/max(1.e-20,xbrno3old)
!       write(500+iam,*)'dtxhobr',dtxhobr,dtxbrno3,iatchem,jatchem,katchem
!       call flush(500+iam)
!      real xhbrold,xbrno3old,xhobrold,xbrclold,xbr2old,xbroold
       if(dtxhbr>.90.or.dtxbro>.90.or.dtxbrcl>.90.or.dtxbr2>.90.or.
     *    dtxhobr>.90.or.dtxbrno3>.90.or.dtxbr>.90)then
!          dt=dt*.5
!          dt=max(.2,dt)
!          ajl try going back to .2 again to settle down too positive feed back
           dt=.2
         if(pbr>1.e13)then
           dt=.1
         endif
         if(pbr>1.e15)then
           dt=.01
         endif
         if(pbr2>1.e16)then
           dt=.001
         endif
!#ifdef DIAGXBR
      if(nstepat>440.and.tile.eq.3)then
        if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
         write(200+iam,*)'night phobr/dhobr',phobr/dhobr,'xhobr',xhobr,'dhobr',dhobr
         write(200+iam,*)'nstepat',nstepat,' dt ',dt,'dtxbr',dtxbr,'k',katchem
         write(200+iam,*)n,dt,'iatchem',iatchem,jatchem,katchem,
     *   ' dtxhbr ',dtxhbr,' dtxbro ',dtxbro,
    
     *   ' dtxbrcl ',dtxbrcl,' dtxbr2 ',dtxbr2,' xhobr ',
     *   dtxhobr,' dtbrno3 ',dtxbrno3
         write(200+iam,*)'xhobrold ',xhobr,xhobrold,
     *  ' xbrno3old ',xbrno3,xbrno3old
         call flush(200+iam)
!      xbro=pbro/dbro + (xbro - pbro/dbro)*exp(-dbro*dt)
        write(200+iam,*)'n',n,'xbro',xbro,'pbro',pbro,'dbro',dbro
        write(200+iam,*)'ratio ',pbro/dbro,'exp',-dbro*dt
        write(200+iam,*)'xbrno3',xbrno3
        write(200+iam,*)'xbr',xbr,'xhobr',xhobr
        call flush(200+iam)
        endif
        endif
!#endif
       endif
       endif
       go to 10
       endif
c
c
cccccc     NIGHTTIME
      else
c
        if(nstepat>400.and.tile.eq.3)then
          if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
             write(600+iam,*)'top kdn',kdn
             write(600+iam,*)'night ihet_flag',ihet_flag,'katchem',katchem,'nstepat',nstepat
             write(600+iam,'("dens ",e12.5)')dens
             write(600+iam,'("xbr ",e12.5)')xbr
             write(600+iam,'("xbr2 ",e12.5)')xbr2
             write(600+iam,'("xbro ",e12.5)')xbro
             write(600+iam,'("xhbr ",e12.5)')xhbr
             write(600+iam,'("xbrno3 ",e12.5)')xbrno3
             write(600+iam,'("xhobr ",e12.5)')xhobr
             write(600+iam,'("xbrcl ",e12.5)')xbrcl
             write(600+iam,'("sice_br2 ",e12.5)')sice_br2
             write(600+iam,'("ss_br2 ",e12.5)')ss_br2
             call flush(600+iam)
          endif
        endif
20    continue
      t = t+dt
      n = n+1
      if (t .gt. timinc) then
       t = t - dt
       dt = timinc+0.1-t
       t = timinc + 0.1
       endif
        if(nstepat.ge.750.and.tile.eq.3)then
          if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jprnin.and.katchem<=2)then
             write(600+iam,*)'kdn',kdn,'t',t,'dt',dt,'n',n
             write(600+iam,*)'ihet_flag',ihet_flag,'katchem',katchem,'nstepat',nstepat
             write(600+iam,'("dens ",e12.5)')dens
             write(600+iam,'("xbr ",e12.5)')xbr
             write(600+iam,'("xbr2 ",e12.5)')xbr2
             write(600+iam,'("xbro ",e12.5)')xbro
             write(600+iam,'("xhbr ",e12.5)')xhbr
             write(600+iam,'("xbrno3 ",e12.5)')xbrno3
             write(600+iam,'("xhobr ",e12.5)')xhobr
             write(600+iam,'("xbrcl ",e12.5)')xbrcl
             write(600+iam,'("sice_br2 ",e12.5)')sice_br2
             write(600+iam,'("ss_br2 ",e12.5)')ss_br2
             call flush(600+iam)
          endif
        endif
c
      xhobrold=xhobr
      xhbrold=xhbr
      xbroold=xbro
      xbrno3old=xbrno3
      xbrold=xbr
      pbr = (r(99)*dn(3)+
     1       (r(101)+r(102))*dn(25)
     1       +2.*0.85*r(104)*xbro)*xbro + r(105)*dn(9)*xhbr
      dbr = r(94)*dn(1)+r(95)*dn(10)+r(96)*dn(19)
c
      pbro = r(94)*xbr*dn(1)
      dbro = r(98)*dn(10)+r(99)*dn(3)+
     1       r(100)*dn(4)*dens+(r(101)+r(102)+r(103))*dn(25)
     1       +2.*r(104)*xbro
      phbr = (r(95)*dn(10)+r(96)*dn(19))*xbr
      dhbr = r(105)*dn(9)+hr(6)*xhobr+hr(8)*dn(38)
     1     +drip + fr_hbrss/tau_ss
c
c
      phobr = r(98)*xbro*dn(10)+hr(9)*xbrno3*dn(13)
      dhobr = hr(6)*xhbr+hr(7)*dn(14)
CCCMNN0508   loss on seaice
      dhobr = dhobr + dvh*fctr_br
c
      pbrno3 = r(100)*dn(4)*dens*xbro
      dbrno3 = hr(9)*dn(13)
c
      pbr2 = r(104)*0.15*xbro*xbro+hr(6)*xhbr*xhobr
CCCMNN0508   source on seaice
      pbr2 = pbr2 + dvh*fctr_br*xhobr
CCCMNN0508   Br2 from seasalt
      if (xhobr .gt. dens*1.0e-15) then
       pbr2  = pbr2 + rbr_ss
       ss_br2 = ss_br2 + rbr_ss*dt/timinc
      endif
      dbr2=0.0
c
      pbrcl = r(103)*dn(25)*xbro+hr(7)*dn(14)*xhobr+
     1        hr(8)*dn(38)*xhbr
      dbrcl = 0.0
c
      sice_br2 = sice_br2+dvh*fctr_br*xhobr*dt/timinc
!     if(isnan(sice_br2).or.abs(sice_br2)>1.e40)then
!        write(6,*)'at a dvh',iatchem,jatchem,katchem,dvh,'fctr_br',
!    *fctr_br,'xhobr',xhobr,'dt',dt,'timinc',timinc,'t',t,'n',n
!        call flush(6)
!     endif
c
CCCMNN 0608
      dtinv = 1.0/dt
cc      xbr = xbr+petend(xbr,pbr,dbr,dt,dtinv)*dt
cc      xbro = xbro+petend(xbro,pbro,dbro,dt,dtinv)*dt
cc      xbrcl = xbrcl+petend(xbrcl,pbrcl,dbrcl,dt,dtinv)*dt
cc      xbr2 = xbr2+petend(xbr2,pbr2,dbr2,dt,dtinv)*dt
cc      xhbr = xhbr+petend(xhbr,phbr,dhbr,dt,dtinv)*dt
cc      xhobr = xhobr+petend(xhobr,phobr,dhobr,dt,dtinv)*dt
CCCMNN  Limit brno3 production by available NO2
cc      xbrno3 = xbrno3+min(petend(xbrno3,pbrno3,dbrno3,dt,dtinv),
cc     1         dn(4)/timinc)*dt
cc      xbrno3 = xbrno3+petend(xbrno3,pbrno3,dbrno3,dt,dtinv)*dt


      xbr=pbr/dbr + (xbr - pbr/dbr)*exp(-dbr*dt)
      xbro=pbro/dbro + (xbro - pbro/dbro)*exp(-dbro*dt)
      if (dhbr .gt. 0.0) then
        xhbr=phbr/dhbr + (xhbr - phbr/dhbr)*exp(-dhbr*dt)
      else
        xhbr = xhbr + phbr*dt
      endif
      if (dhobr .gt. 0.0) then
        xhobr=phobr/dhobr + (xhobr - phobr/dhobr)*exp(-dhobr*dt)
      else
        xhobr = xhobr + phobr*dt
      endif
      if (dbrno3 .gt. 0.0) then
cc      xbrno3=pbrno3/dbrno3 + (xbrno3 - pbrno3/dbrno3)*exp(-dbrno3*dt)
cc      else
cc      xbrno3 = xbrno3 + pbrno3*dt
cc      endif
        xtmp=pbrno3/dbrno3 + (xbrno3 - pbrno3/dbrno3)*exp(-dbrno3*dt)
      else
        xtmp = xbrno3 + pbrno3*dt
      endif
      if ((xtmp-xbrno3)/dt .gt. dn(4)/timinc) then
        xbrno3=xbrno3+dn(4)*dt/timinc
      else
        xbrno3=xtmp
      endif

      xbrcl = xbrcl + pbrcl * dt
      xbr2 = xbr2 + pbr2 * dt
      if(n>5)then
        dtxhobr=0.0
        dtxhbr=0.0
        dtxbr=0.0
        dtxbro=0.0
        dtxbrno3=0.0
        if(xhobr>10000.)then
          dtxhobr=abs(xhobr-xhobrold)/max(10.,xhobrold)
        endif
        if(xhbr>10000.)then
          dtxhbr=abs(xhbr-xhbrold)/max(10.,xhbrold)
        endif
        if(xbr>10000.)then
          dtxbr=abs(xbr-xbrold)/max(10.,xbrold)
        endif
        if(xbro>10000.)then
          dtxbro=abs(xbro-xbroold)/max(10.,xbroold)
        endif
        if(xbrno3>10000.)then
        dtxbrno3=abs(xbrno3-xbrno3old)/max(10.,xbrno3old)
        endif
      
        if(dtxhobr>.90.or.dtxhbr>.90.or.dtxbr>.90.or.dtxbro>.90.or.dtxbrno3>.90)then
          write(600+iam,*)'dtxhbr',dtxhbr,'dtxbr',dtxbr,'dtxbro',dtxbro,'dtxbrno3',dtxbrno3
          write(600+iam,*)'reset night dt dtxhobr',dtxhobr,' n ',n,' nstepat ',nstepat,' dt',dt
          call flush(600+iam)
          if(dtxhobr>.9)then
            write(600+iam,*)'iatchem',iatchem,jatchem,katchem
            write(600+iam,*)'-dhobr*dt ',-dhobr*dt
            write(600+iam,*)'xhobr',xhobr,'xhobrold',xhobrold
            write(600+iam,*)'phobr',phobr,'dhobr',dhobr,'exp',exp(-dhobr*dt)
            write(600+iam,*)'phobr/dhobr',phobr/dhobr
          endif
          if(dtxbro>.9)then
            write(600+iam,*)'iatchem',iatchem,jatchem,katchem
            write(600+iam,*)'xbro ',xbro,' xbroold ',xbroold
            write(600+iam,*)'pbro',pbro,'dbro',dbro,'exp',exp(-dbro*dt)
            write(600+iam,*)'pbro/dbro',pbro/dbro
            call flush(600+iam)
          endif
          if(dtxbr>.90)then
            write(600+iam,*)'iatchem',iatchem,jatchem,katchem
            write(600+iam,*)'xhbr',xhbr,xhbrold,'n',n,'dt',dt,'nstepat',nstepat
!      xbr=pbr/dbr + (xbr - pbr/dbr)*exp(-dbr*dt)
            write(600+iam,*)'pbr/dbr',pbr/dbr,'xbrold',xbrold,'exp',exp(-dbr*dt)
            call flush(600+iam)
          endif
          dt=.2
         if(pbr>1.e13)then
           dt=.1
         endif
         if(pbr>1.e15)then
           dt=.01
         endif
         if(pbr2>1.e16)then
           dt=.001
         endif
        endif
      endif
      
        if(nstepat>400.and.tile.eq.3)then
          if(iam.eq.iamprn.and.iatchem.eq.iprnin.and.jatchem.eq.jpnin.and.katchem<=2)then
    
             write(600+iam,*)'night ihet_flag',ihet_flag,' n ',n,' dt ',dt,'k',katchem
             write(600+iam,'("dens ",e12.5)')dens
             write(600+iam,'("xbr ",e12.5)')xbr
             write(600+iam,'("xbr2 ",e12.5)')xbr2
             write(600+iam,'("xbro ",e12.5)')xbro
             write(600+iam,'("xhbr ",e12.5)')xhbr
             write(600+iam,'("xbrno3 ",e12.5)')xbrno3
             write(600+iam,'("xhobr ",e12.5)')xhobr
             write(600+iam,'("xbrcl ",e12.5)')xbrcl
             write(600+iam,'("sice_br2 ",e12.5)')sice_br2
             write(600+iam,'("ss_br2 ",e12.5)')ss_br2
             call flush(600+iam)
        write(ciam,'(i3.3)')iam
        write(cstep,'(i4.4)')nstepat
        open(800+iam,file='night.brintg.'//ciam//'.'//cstep//'.'//clevel,form='unformatted')
        write(800+iam)ireac,iphot,inum
        write(800+iam)timinc,ihet_flag
        write(800+iam)pjbr2,rbr_ss,fr_hbrss,tau_ss,dvh,fctr_br
        write(800+iam)phoj
        write(800+iam)r
        write(800+iam)dn
        write(800+iam)hr
        write(800+iam)dens
        write(800+iam)xbr
        write(800+iam)xbr2
        write(800+iam)xbro
        write(800+iam)xhbr
        write(800+iam)xbrno3
        write(800+iam)xhobr
        write(800+iam)xbrcl
        write(800+iam)sice_br2
        write(800+iam)ss_br2
        call flush(800+iam)
          endif
        endif

c
      if (t .lt. timinc) then
       dt = dt*1.2
       dt = min(dt,10.)
       go to 20
       endif
c
c
      endif
      return
      end
#endif
#endif
c-----------------------------------------------------------------------

      subroutine clintg (drip,dens,xcl,xclo,xhcl,xclno3,xhocl)
      use raqmschem_pmgrid_mod, only : iam
      use chem_types_mod, only : CHEM_KIND_R8
c
      include 'comm_defs_24t.chem'
      common /blk4_24/ r(ireac),hr(ihreac),phoj(iphot),dn(inum),
     1              zeta,pur,sad,prodloss(13)
      common/pceinfo/timinc,tdenom,save_clo,save_bro,
     +       ipce_clno3,ipce_hocl,ipce_brno3,ipce_hobr,rbrobr
     +       ,equil_fam
      real(CHEM_KIND_R8) :: xhcl,dhcl,phcl,xdl,pcl
c
C$OMP THREADPRIVATE (/blk4_24/)
C$OMP THREADPRIVATE (/pceinfo/)
c
      t = 0.
      n = 0
      dt = 0.2
c
10    continue
      t = t+dt
      n = n+1
      if (t .gt. timinc) then
       t = t - dt
       dt = timinc+0.1-t
       t = timinc + 0.1
       endif
c
      pcl = (r(45)*dn(2)+r(46)*dn(3))*xclo +
     1      phoj(21)*xclno3+phoj(26)*xhocl +
     1      (r(53)*xhcl+r(86)*dn(23)+3.0*r(31)*dn(37))*dn(9)
      dcl = r(44)*dn(1)+r(47)*dn(18)+r(48)*dn(36)+
     1  r(49)*dn(10)+r(50)*dn(8)+r(9)*dn(19)
c
      pclo = r(44)*dn(1)*xcl + phoj(17)*xclno3
      dclo = r(45)*dn(2)+r(46)*dn(3)+r(67)*dn(4)*dens+
     1       r(33)*dn(10)+(r(101)+r(102)+r(103))*dn(44)
c
      phcl = (r(9)*dn(19)+r(47)*dn(18)+r(48)*dn(36)+r(49)*dn(10)+
     1      r(50)*dn(8))*xcl+r(81)*dn(9)*xclo
!      if(phcl.eq.0)then
!         write(200+iam,*)'phcl',phcl,'dn19',dn(19),'dn18',dn(18),'dn36',dn(36)
!         write(200+iam,*)'dn10',dn(10),'dn8',dn(8),'dn9',dn(9),'xclo',xclo
!         !write(200+iam,*)'r9',r(9),r(47),r(48),r(49),r(50),r(81)
!         call flush(200+iam)
!      endif
      dhcl=phoj(15)+r(53)*dn(9)+r(54)*dn(2)+r(71)*dn(27)+drip+
     1      hr(3)*xclno3+hr(4)*dn(12)+hr(5)*xhocl+hr(7)*dn(46)
!     if(abs(dhcl)>.001)then
!        write(200+iam,*)'dhcl',dhcl,'phoj',phoj(15),'dn9',dn(9),'dn2',dn(2)
!        write(200+iam,*)'dn27',dn(27),'drip',drip,'xclno3',xclno3,'dn12',dn(12),'xhocl',xhocl,'dn46',dn(46)
!        call flush(200+iam)
!      endif
c
        pclno3=r(67)*xclo*dn(4)*dens
        dclno3=phoj(17)+phoj(21)+r(69)*dn(2)+hr(3)*xhcl+
     1         hr(2)*dn(13)
c
        phocl=r(33)*xclo*dn(10)+hr(2)*xclno3*dn(13)
        dhocl=phoj(26)+r(42)*dn(2)+r(52)*dn(9)+hr(5)*xhcl+hr(8)*dn(45)
c
!      write(200+iam,*)'pcl',pcl,'dcl',dcl,'xdl',xcl,'dt',dt
!      call flush(200+iam)
      xcl = pcl/dcl + (xcl - pcl/dcl)*exp(-dcl*dt)
      xclo = pclo/dclo + (xclo - pclo/dclo)*exp(-dclo*dt)
!      write(200+iam,*)'dhcl',dhcl,'dt',dt,'phcl',phcl,'xhcl',xhcl
!      call flush(200+iam)
      xhcl = phcl/dhcl + (xhcl - phcl/dhcl)*exp(-dhcl*dt)
!      write(200+iam,*)'xhcl',xhcl
!      call flush(200+iam)
      xclno3 = pclno3/dclno3 + (xclno3 - pclno3/dclno3)*exp(-dclno3*dt)
!      write(200+iam,*)'xclno3',xclno3
!      call flush(200+iam)
    
      xhocl = phocl/dhocl + (xhocl - phocl/dhocl)*exp(-dhocl*dt)
!      write(200+iam,*)'xhocl',xhocl,'t',t,'timinc',timinc,'dt',dt
!      call flush(200+iam)
  
c
      if (t .lt. timinc) then
       dt = dt*1.2
       dt = min(dt,10.)
       go to 10
       endif
c
c
      return
      end
