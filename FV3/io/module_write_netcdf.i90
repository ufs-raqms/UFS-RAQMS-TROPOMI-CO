# 1 "module_write_netcdf.F90"
!#define ESMF_ERR_ABORT(rc) \
!if (rc /= ESMF_SUCCESS) write(0,*) 'rc=',rc,"module_write_netcdf.F90",2; \
!   if (ESMF_LogFoundError(rc, msg=ESMF_LOGERR_PASSTHRU, line=3, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)



# 9


module module_write_netcdf

  use esmf
  use netcdf

  implicit none
  private
  public write_netcdf

  contains

!----------------------------------------------------------------------------------------
  subroutine write_netcdf(fieldbundle, wrtfb, filename, mpi_comm, mype, im, jm, rc)
!
    type(ESMF_FieldBundle), intent(in) :: fieldbundle
    type(ESMF_FieldBundle), intent(in) :: wrtfb
    character(*), intent(in)           :: filename
    integer, intent(in)                :: mpi_comm
    integer, intent(in)                :: mype
    integer, intent(in)                :: im, jm
    integer, optional,intent(out)      :: rc
!
!** local vars
    integer :: i,j,m,n,k
    integer :: lm

    integer, dimension(:), allocatable     :: fldlev
    real(4), dimension(:,:), allocatable   :: arrayr4
    real(8), dimension(:,:), allocatable   :: arrayr8
    real(4), dimension(:,:,:), allocatable :: arrayr4_3d
    real(8), dimension(:,:,:), allocatable :: arrayr8_3d

    integer :: fieldCount, fieldDimCount, gridDimCount
    integer, dimension(:), allocatable   :: ungriddedLBound, ungriddedUBound

    type(ESMF_Field), allocatable        :: fcstField(:)
    type(ESMF_TypeKind_Flag)             :: typekind
    type(ESMF_TypeKind_Flag)             :: attTypeKind
    type(ESMF_Grid)                      :: wrtgrid
    type(ESMF_Array)                     :: array

    integer :: attcount
    character(len=ESMF_MAXSTR) :: attName, fldName

    integer :: varival
    real(4) :: varr4val
    real(8) :: varr8val
    character(len=ESMF_MAXSTR) :: varcval

    character(128) :: time_units

    integer :: ncerr
    integer :: ncid
    integer :: oldMode
    integer :: im_dimid, jm_dimid, pfull_dimid, phalf_dimid, time_dimid
    integer :: im_varid, jm_varid, lm_varid, time_varid
    integer, dimension(:), allocatable :: varids
!
!!
!
    call ESMF_FieldBundleGet(fieldbundle, fieldCount=fieldCount, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=71, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)

    allocate(fldlev(fieldCount)) ; fldlev = 0
    allocate(fcstField(fieldCount))
    allocate(varids(fieldCount))

    call ESMF_FieldBundleGet(fieldbundle, fieldList=fcstField, grid=wrtGrid, &
!                             itemorderflag=ESMF_ITEMORDER_ADDORDER, &
                             rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=79, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)

    call ESMF_GridGet(wrtgrid, dimCount=gridDimCount, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=81, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)

    do i=1,fieldCount
       call ESMF_FieldGet(fcstField(i), dimCount=fieldDimCount, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=84, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
       if (fieldDimCount > 3) then
          write(0,*)"write_netcdf: Only 2D and 3D fields are supported!"
          stop
       end if
       if (fieldDimCount > gridDimCount) then
         allocate(ungriddedLBound(fieldDimCount-gridDimCount))
         allocate(ungriddedUBound(fieldDimCount-gridDimCount))
         call ESMF_FieldGet(fcstField(i), &
                            ungriddedLBound=ungriddedLBound, &
                            ungriddedUBound=ungriddedUBound, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=94, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
         fldlev(i) = ungriddedUBound(fieldDimCount-gridDimCount) - &
                     ungriddedLBound(fieldDimCount-gridDimCount) + 1
         deallocate(ungriddedLBound)
         deallocate(ungriddedUBound)
       else if (fieldDimCount == 2) then
         fldlev(i) = 1
       end if
    end do

    lm = maxval(fldlev(:))

    allocate(arrayr4(im,jm))
    allocate(arrayr8(im,jm))
    allocate(arrayr4_3d(im,jm,lm))
    allocate(arrayr8_3d(im,jm,lm))

! create netcdf file and enter define mode
    if (mype==0) then

    ncerr = nf90_create(trim(filename), cmode=IOR(NF90_CLOBBER,NF90_64BIT_OFFSET), ncid=ncid); if (ncerr /= nf90_noerr) write(0,*) "line ", 114, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    ncerr = nf90_set_fill(ncid, NF90_NOFILL, oldMode); if (ncerr /= nf90_noerr) write(0,*) "line ", 115, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)

! define dimensions
    ncerr = nf90_def_dim(ncid, "grid_xt", im, im_dimid); if (ncerr /= nf90_noerr) write(0,*) "line ", 118, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    ncerr = nf90_def_dim(ncid, "grid_yt", jm, jm_dimid); if (ncerr /= nf90_noerr) write(0,*) "line ", 119, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)

! define coordinate variables
    ncerr = nf90_def_var(ncid, "grid_xt", NF90_DOUBLE, (/im_dimid,jm_dimid/), im_varid); if (ncerr /= nf90_noerr) write(0,*) "line ", 122, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    ncerr = nf90_put_att(ncid, im_varid, "long_name", "T-cell longitude"); if (ncerr /= nf90_noerr) write(0,*) "line ", 123, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    ncerr = nf90_put_att(ncid, im_varid, "units", "degrees_E"); if (ncerr /= nf90_noerr) write(0,*) "line ", 124, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    ncerr = nf90_put_att(ncid, im_varid, "cartesian_axis", "X"); if (ncerr /= nf90_noerr) write(0,*) "line ", 125, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)

    ncerr = nf90_def_var(ncid, "grid_yt", NF90_DOUBLE, (/im_dimid,jm_dimid/), jm_varid); if (ncerr /= nf90_noerr) write(0,*) "line ", 127, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    ncerr = nf90_put_att(ncid, jm_varid, "long_name", "T-cell latitude"); if (ncerr /= nf90_noerr) write(0,*) "line ", 128, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    ncerr = nf90_put_att(ncid, jm_varid, "units", "degrees_N"); if (ncerr /= nf90_noerr) write(0,*) "line ", 129, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    ncerr = nf90_put_att(ncid, jm_varid, "cartesian_axis", "Y"); if (ncerr /= nf90_noerr) write(0,*) "line ", 130, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)

    if (lm > 1) then
      call add_dim(ncid, "pfull", pfull_dimid, wrtgrid, rc)
      call add_dim(ncid, "phalf", phalf_dimid, wrtgrid, rc)
    end if

    call add_dim(ncid, "time", time_dimid, wrtgrid, rc)

    call get_global_attr(wrtfb, ncid, rc)

    do i=1, fieldCount
      call ESMF_FieldGet(fcstField(i), name=fldName, typekind=typekind, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=142, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)

! define variables
      if (fldlev(i) == 1) then
        if (typekind == ESMF_TYPEKIND_R4) then
          ncerr = nf90_def_var(ncid, trim(fldName), NF90_FLOAT, &
                               (/im_dimid,jm_dimid,time_dimid/), varids(i)); if (ncerr /= nf90_noerr) write(0,*) "line ", 148, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
        else if (typekind == ESMF_TYPEKIND_R8) then
          ncerr = nf90_def_var(ncid, trim(fldName), NF90_DOUBLE, &
                               (/im_dimid,jm_dimid,time_dimid/), varids(i)); if (ncerr /= nf90_noerr) write(0,*) "line ", 151, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
        else
          write(0,*)'Unsupported typekind ', typekind
          stop
        end if
      else if (fldlev(i) > 1) then
         if (typekind == ESMF_TYPEKIND_R4) then
           ncerr = nf90_def_var(ncid, trim(fldName), NF90_FLOAT, &
                                (/im_dimid,jm_dimid,pfull_dimid,time_dimid/), varids(i)); if (ncerr /= nf90_noerr) write(0,*) "line ", 159, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
         else if (typekind == ESMF_TYPEKIND_R8) then
           ncerr = nf90_def_var(ncid, trim(fldName), NF90_DOUBLE, &
                                (/im_dimid,jm_dimid,pfull_dimid,time_dimid/), varids(i)); if (ncerr /= nf90_noerr) write(0,*) "line ", 162, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
        else
          write(0,*)'Unsupported typekind ', typekind
          stop
         end if
      end if

! define variable attributes
      call ESMF_AttributeGet(fcstField(i), convention="NetCDF", purpose="FV3", &
                             attnestflag=ESMF_ATTNEST_OFF, Count=attcount, &
                             rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=172, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)

      do j=1,attCount
        call ESMF_AttributeGet(fcstField(i), convention="NetCDF", purpose="FV3", &
                               attnestflag=ESMF_ATTNEST_OFF, attributeIndex=j, &
                               name=attName, typekind=attTypeKind, itemCount=n, &
                               rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=178, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)

        if ( index(trim(attName),"ESMF") /= 0 ) then
           cycle
        endif

        if (attTypeKind==ESMF_TYPEKIND_I4) then
           call ESMF_AttributeGet(fcstField(i), convention="NetCDF", purpose="FV3", &
                                  name=trim(attName), value=varival, &
                                  rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=187, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
           ncerr = nf90_put_att(ncid, varids(i), trim(attName), varival); if (ncerr /= nf90_noerr) write(0,*) "line ", 188, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)

        else if (attTypeKind==ESMF_TYPEKIND_R4) then
           call ESMF_AttributeGet(fcstField(i), convention="NetCDF", purpose="FV3", &
                                  name=trim(attName), value=varr4val, &
                                  rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=193, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
           ncerr = nf90_put_att(ncid, varids(i), trim(attName), varr4val); if (ncerr /= nf90_noerr) write(0,*) "line ", 194, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)

        else if (attTypeKind==ESMF_TYPEKIND_R8) then
           call ESMF_AttributeGet(fcstField(i), convention="NetCDF", purpose="FV3", &
                                  name=trim(attName), value=varr8val, &
                                  rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=199, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
           ncerr = nf90_put_att(ncid, varids(i), trim(attName), varr8val); if (ncerr /= nf90_noerr) write(0,*) "line ", 200, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)

        else if (attTypeKind==ESMF_TYPEKIND_CHARACTER) then
           call ESMF_AttributeGet(fcstField(i), convention="NetCDF", purpose="FV3", &
                                  name=trim(attName), value=varcval, &
                                  rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=205, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
           ncerr = nf90_put_att(ncid, varids(i), trim(attName), trim(varcval)); if (ncerr /= nf90_noerr) write(0,*) "line ", 206, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)

        end if

      end do ! j=1,attCount

    end do   ! i=1,fieldCount

    ncerr = nf90_enddef(ncid); if (ncerr /= nf90_noerr) write(0,*) "line ", 214, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    end if

! end of define mode

! write grid_xt, grid_yt values
    call ESMF_GridGetCoord(wrtGrid, coordDim=1, array=array, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=220, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    call ESMF_ArrayGather(array, arrayr8, rootPet=0, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=221, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    if (mype==0) then
    ncerr = nf90_put_var(ncid, im_varid, values=arrayr8, start=(/1,1/),count=(/im,jm/) ); if (ncerr /= nf90_noerr) write(0,*) "line ", 223, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    end if

    call ESMF_GridGetCoord(wrtGrid, coordDim=2, array=array, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=226, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    call ESMF_ArrayGather(array, arrayr8, rootPet=0, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=227, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    if (mype==0) then
    ncerr = nf90_put_var(ncid, jm_varid, values=arrayr8, start=(/1,1/),count=(/im,jm/) ); if (ncerr /= nf90_noerr) write(0,*) "line ", 229, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    end if

    do i=1, fieldCount

       call ESMF_FieldGet(fcstField(i),typekind=typekind, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=234, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)

       if (fldlev(i) == 1) then
         if (typekind == ESMF_TYPEKIND_R4) then
           call ESMF_FieldGather(fcstField(i), arrayr4, rootPet=0, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=238, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
           if (mype==0) then
             ncerr = nf90_put_var(ncid, varids(i), values=arrayr4, start=(/1,1,1/),count=(/im,jm,1/) ); if (ncerr /= nf90_noerr) write(0,*) "line ", 240, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
           end if
         else if (typekind == ESMF_TYPEKIND_R8) then
           call ESMF_FieldGather(fcstField(i), arrayr8, rootPet=0, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=243, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
           if (mype==0) then
             ncerr = nf90_put_var(ncid, varids(i), values=arrayr8, start=(/1,1,1/),count=(/im,jm,1/) ); if (ncerr /= nf90_noerr) write(0,*) "line ", 245, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
           end if
         end if
      else if (fldlev(i) > 1) then
         if (typekind == ESMF_TYPEKIND_R4) then
           call ESMF_FieldGather(fcstField(i), arrayr4_3d, rootPet=0, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=250, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
           if (mype==0) then
             ncerr = nf90_put_var(ncid, varids(i), values=arrayr4_3d, start=(/1,1,1/),count=(/im,jm,lm,1/) ); if (ncerr /= nf90_noerr) write(0,*) "line ", 252, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
           end if
         else if (typekind == ESMF_TYPEKIND_R8) then
           call ESMF_FieldGather(fcstField(i), arrayr8_3d, rootPet=0, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=255, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
           if (mype==0) then
             ncerr = nf90_put_var(ncid, varids(i), values=arrayr8_3d, start=(/1,1,1/),count=(/im,jm,lm,1/) ); if (ncerr /= nf90_noerr) write(0,*) "line ", 257, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
           end if
         end if

      end if

    end do

    deallocate(arrayr4)
    deallocate(arrayr8)
    deallocate(arrayr4_3d)
    deallocate(arrayr8_3d)

    deallocate(fcstField)
    deallocate(varids)

    if (mype==0) then
    ncerr = nf90_close(ncid=ncid); if (ncerr /= nf90_noerr) write(0,*) "line ", 274, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    end if

  end subroutine write_netcdf

!----------------------------------------------------------------------------------------
  subroutine get_global_attr(fldbundle, ncid, rc)
    type(ESMF_FieldBundle), intent(in) :: fldbundle
    integer, intent(in)                :: ncid
    integer, intent(out)               :: rc

! local variable
    integer :: i, attcount
    integer :: ncerr
    character(len=ESMF_MAXSTR) :: attName
    type(ESMF_TypeKind_Flag)   :: typekind

    integer :: varival
    real(ESMF_KIND_R4) :: varr4val
    real(ESMF_KIND_R4), dimension(:), allocatable :: varr4list
    real(ESMF_KIND_R8) :: varr8val
    real(ESMF_KIND_R8), dimension(:), allocatable :: varr8list
    integer :: itemCount
    character(len=ESMF_MAXSTR) :: varcval
!
    call ESMF_AttributeGet(fldbundle, convention="NetCDF", purpose="FV3", &
                           attnestflag=ESMF_ATTNEST_OFF, Count=attcount, &
                           rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=301, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)


    do i=1,attCount

      call ESMF_AttributeGet(fldbundle, convention="NetCDF", purpose="FV3", &
                             attnestflag=ESMF_ATTNEST_OFF, attributeIndex=i, name=attName, &
                             typekind=typekind, itemCount=itemCount, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=308, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)

      if (typekind==ESMF_TYPEKIND_I4) then
         call ESMF_AttributeGet(fldbundle, convention="NetCDF", purpose="FV3", &
                                name=trim(attName), value=varival, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=312, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
         ncerr = nf90_put_att(ncid, NF90_GLOBAL, trim(attName), varival); if (ncerr /= nf90_noerr) write(0,*) "line ", 313, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)

      else if (typekind==ESMF_TYPEKIND_R4) then
         allocate (varr4list(itemCount))
         call ESMF_AttributeGet(fldbundle, convention="NetCDF", purpose="FV3", &
                                name=trim(attName), valueList=varr4list, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=318, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
         ncerr = nf90_put_att(ncid, NF90_GLOBAL, trim(attName), varr4list); if (ncerr /= nf90_noerr) write(0,*) "line ", 319, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
         deallocate(varr4list)

      else if (typekind==ESMF_TYPEKIND_R8) then
         allocate (varr8list(itemCount))
         call ESMF_AttributeGet(fldbundle, convention="NetCDF", purpose="FV3", &
                                name=trim(attName), valueList=varr8list, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=325, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
         ncerr = nf90_put_att(ncid, NF90_GLOBAL, trim(attName), varr8list); if (ncerr /= nf90_noerr) write(0,*) "line ", 326, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
         deallocate(varr8list)

      else if (typekind==ESMF_TYPEKIND_CHARACTER) then
         call ESMF_AttributeGet(fldbundle, convention="NetCDF", purpose="FV3", &
                                name=trim(attName), value=varcval, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=331, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
         ncerr = nf90_put_att(ncid, NF90_GLOBAL, trim(attName), trim(varcval)); if (ncerr /= nf90_noerr) write(0,*) "line ", 332, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)

      end if

    end do

  end subroutine get_global_attr
!
!----------------------------------------------------------------------------------------
  subroutine get_grid_attr(grid, prefix, ncid, varid, rc)
    type(ESMF_Grid), intent(in)  :: grid
    character(len=*), intent(in) :: prefix
    integer, intent(in)          :: ncid
    integer, intent(in)          :: varid
    integer, intent(out)         :: rc

! local variable
    integer :: i, attcount, n, ind
    integer :: ncerr
    character(len=ESMF_MAXSTR) :: attName
    type(ESMF_TypeKind_Flag)   :: typekind

    integer :: varival
    real(ESMF_KIND_R4) :: varr4val
    real(ESMF_KIND_R8) :: varr8val
    character(len=ESMF_MAXSTR) :: varcval
!
    call ESMF_AttributeGet(grid, convention="NetCDF", purpose="FV3", &
                           attnestflag=ESMF_ATTNEST_OFF, Count=attcount, &
                           rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=361, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)

!write(0,*)'grid attcount = ', attcount
    do i=1,attCount

      call ESMF_AttributeGet(grid, convention="NetCDF", purpose="FV3", &
                             attnestflag=ESMF_ATTNEST_OFF, attributeIndex=i, name=attName, &
                             typekind=typekind, itemCount=n, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=368, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
!write(0,*)'grid att = ',i,trim(attName), ' itemCount = ' , n

      if (index(trim(attName), trim(prefix)//":")==1) then
         ind = len(trim(prefix)//":")

         if (typekind==ESMF_TYPEKIND_I4) then
            call ESMF_AttributeGet(grid, convention="NetCDF", purpose="FV3", &
                                   name=trim(attName), value=varival, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=376, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
            ncerr = nf90_put_att(ncid, varid, trim(attName(ind+1:len(attName))), varival); if (ncerr /= nf90_noerr) write(0,*) "line ", 377, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)

         else if (typekind==ESMF_TYPEKIND_R4) then
            call ESMF_AttributeGet(grid, convention="NetCDF", purpose="FV3", &
                                   name=trim(attName), value=varr4val, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=381, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
            ncerr = nf90_put_att(ncid, varid, trim(attName(ind+1:len(attName))), varr4val); if (ncerr /= nf90_noerr) write(0,*) "line ", 382, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)

         else if (typekind==ESMF_TYPEKIND_R8) then
            call ESMF_AttributeGet(grid, convention="NetCDF", purpose="FV3", &
                                   name=trim(attName), value=varr8val, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=386, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
            ncerr = nf90_put_att(ncid, varid, trim(attName(ind+1:len(attName))), varr8val); if (ncerr /= nf90_noerr) write(0,*) "line ", 387, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)

         else if (typekind==ESMF_TYPEKIND_CHARACTER) then
            call ESMF_AttributeGet(grid, convention="NetCDF", purpose="FV3", &
                                   name=trim(attName), value=varcval, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=391, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
            ncerr = nf90_put_att(ncid, varid, trim(attName(ind+1:len(attName))), trim(varcval)); if (ncerr /= nf90_noerr) write(0,*) "line ", 392, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)

         end if

      end if

    end do

  end subroutine get_grid_attr

  subroutine add_dim(ncid, dim_name, dimid, grid, rc)
    integer, intent(in)             :: ncid
    character(len=*), intent(in)    :: dim_name
    integer, intent(inout) :: dimid
    type(ESMF_Grid), intent(in)     :: grid
    integer, intent(out)            :: rc

! local variable
    integer :: i, attcount, n, dim_varid
    integer :: ncerr
    character(len=ESMF_MAXSTR) :: attName
    type(ESMF_TypeKind_Flag)   :: typekind

    integer, allocatable  :: valueListI(:)
    real(ESMF_KIND_R4), allocatable  :: valueListR4(:)
    real(ESMF_KIND_R8), allocatable  :: valueListR8(:)
    character(len=ESMF_MAXSTR), allocatable  :: valueListC(:)
!
    call ESMF_AttributeGet(grid, convention="NetCDF", purpose="FV3", &
                           attnestflag=ESMF_ATTNEST_OFF, name=dim_name, &
                           typekind=typekind, itemCount=n, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=422, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)

    if ( trim(dim_name) == "time" ) then
    ncerr = nf90_def_dim(ncid, trim(dim_name), NF90_UNLIMITED, dimid); if (ncerr /= nf90_noerr) write(0,*) "line ", 425, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    else
    ncerr = nf90_def_dim(ncid, trim(dim_name), n, dimid); if (ncerr /= nf90_noerr) write(0,*) "line ", 427, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
    end if
    ncerr = nf90_def_var(ncid, dim_name, NF90_DOUBLE, dimids=(/dimid/), varid=dim_varid); if (ncerr /= nf90_noerr) write(0,*) "line ", 429, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)

    if (typekind==ESMF_TYPEKIND_R8) then
       allocate(valueListR8(n))
       call ESMF_AttributeGet(grid, convention="NetCDF", purpose="FV3", &
                              name=trim(dim_name), valueList=valueListR8, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=434, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
       ncerr = nf90_enddef(ncid=ncid); if (ncerr /= nf90_noerr) write(0,*) "line ", 435, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
       ncerr = nf90_put_var(ncid, dim_varid, values=valueListR8 ); if (ncerr /= nf90_noerr) write(0,*) "line ", 436, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
       ncerr = nf90_redef(ncid=ncid); if (ncerr /= nf90_noerr) write(0,*) "line ", 437, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
       deallocate(valueListR8)
!    else if (typekind==ESMF_TYPEKIND_R4) then
!       allocate(valueListR4(n))
!       call ESMF_AttributeGet(grid, convention="NetCDF", purpose="FV3", &
!                              name=trim(dim_name), valueList=valueListR4, rc=rc); if (ESMF_LogFoundError(rc, msg="Breaking out of subroutine", line=442, file="module_write_netcdf.F90")) call ESMF_Finalize(endflag=ESMF_END_ABORT)
!       ncerr = nf90_enddef(ncid=ncid); if (ncerr /= nf90_noerr) write(0,*) "line ", 443, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
!       ncerr = nf90_put_var(ncid, dim_varid, values=valueListR4 ); if (ncerr /= nf90_noerr) write(0,*) "line ", 444, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
!       ncerr = nf90_redef(ncid=ncid); if (ncerr /= nf90_noerr) write(0,*) "line ", 445, trim(nf90_strerror(ncerr));     if (ncerr /= nf90_noerr) call ESMF_Finalize(endflag=ESMF_END_ABORT)
!       deallocate(valueListR4)
!    else
!       write(0,*)'Error in module_write_netcdf.F90(add_dim) unknown typekind for ',trim(dim_name)
!       call ESMF_Finalize(endflag=ESMF_END_ABORT)
    end if

    call get_grid_attr(grid, dim_name, ncid, dim_varid, rc)

  end subroutine add_dim
!
!----------------------------------------------------------------------------------------
  subroutine nccheck(status)
    use netcdf
    implicit none
    integer, intent (in) :: status

    if (status /= nf90_noerr) then
      write(0,*) status, trim(nf90_strerror(status))
      stop "stopped"
    end if
  end subroutine nccheck

end module module_write_netcdf
