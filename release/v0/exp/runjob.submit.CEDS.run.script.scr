#!/bin/bash -x
#SBATCH --job-name=SAMP715
#SBATCH --time=02:30:00
#SBATCH --exclusive
#SBATCH --partition=ivy
#SBATCH --ntasks=198
#SBATCH --account=star
## need to set this path to where you want the job output to go

#SBATCH --output=/ships19/models2/lenzen/fv3/myjob.C192.V9.1.198.CONTROL.CEDS.450.2019071512
# set up environment variables to match the GEFS operational run
source /home/lenzen/EMC_FV3/v91/EMC_FV3GFS-GSDCHEM/release/v0/scripts/config.base.emc.dyn.fv3.esrl
source /home/lenzen/EMC_FV3/v91/EMC_FV3GFS-GSDCHEM/release/v0/scripts/config.fcst.fv3.esrl
export cdmbgwd="0.2,2.5"
export nstf_name="2,0,0,0,0"
# AJL set last day to run for this experiment
export CDATEENDRUN=2019100112
# for sample make shorter
export CDATEENDRUN=2019071712
export NTASKS=198
export NTASKS_EXE=198
# ajl new one need
export NTASKS_FV3=$NTASKS
export restart_interval=0
export CDUMP=gfs
#ajl end new one
 echo NTASKS $NTASKS $SLURM_NTASKS
export CASE=C192                 #resolution, C96, C384 or C768
export CASECTL=C192
export print_freq=0
# dont have RAQMS o3vmr returned to replace the ozone in physics
export RAQMSO3MR=NO
export CDATE=2019071512
export CDATE0=$CDATE
export CDATEEND=2019071612
# ajl turn of GSI assimilation for now
export DOGSI=off
if [ ${DOGSI} = on ] ; then
  export GSIVAR="AOD"
  export GSIPROC=1
  export GSIDATAPATH=/ships19/aqda/lenzen/VIIRS.NC/
  export GSINAME=viirs.aod.CDATE.nc
  export TROPOMIQUALLIMIT=.7499
  export DHRGSI=3
fi
echo SLURM_JOB_NODELIST $SLURM_JOB_NODELIST


set -x
# AJL set first date to run
# the Initial data files need to be premade from RAQMS chemical species and GFS atm files
# se $BASE_DATA and $IC_DIRB below
# Alternative to use a file from a previous run from the IC_DIR file
export CDATEBEG=2019071512

ulimit -s unlimited
export PTYPE=intel
export MODE=64bit           			       # dycore precision:   32bit, 64bit
export HRSAVE=6
export localhost=s4
echo $HOSTNAME
export FHMAX=6                                       #maximum forecast hours

#------------------------------------------------------------------
#------------------------------------------------------------------
# Running NEMS FV3GFS on Theia
#------------------------------------------------------------------
#notes:
# this job card is for C96 case. If you are running
# C384 or C768 cases, please make the following change:
#
#   for C384, change line 8 and line 33 to:
#      #PBS -l nodes=96:ppn=12      
#      export CASE=C384            
#
#   for C768, change line 8 and line 33 to:
#      #PBS -l nodes=192:ppn=12
#      export CASE=C768            
#
#------------------------------------------------------------------


#export machine=s4-cardinal              #WCOSS_C, theia, etc
export machine=s4-submit              #WCOSS_C, theia, etc
export PSLOT=O3VMR-PHYSICS
export FV3GFSVER=FV3GFS.9.1.2019
export EXPNAME=O3.CONTROL.CEDS.run
export AODFRACTION=YES

export BASE_DATA=/ships19/aqda/lenzen/FV3GFS_V1_RELEASE ;# data directory
export base_data_disk=/ships19/aqda/lenzen/VIIRS.NC/
#export NWPROD=$BASE_DATA
export FIX_DIR=$BASE_DATA/fix
#export FIX_FV3=$BASE_DATA/fix/fix_fv3                 #model fixed fields
#export IC_DIRB=$BASE_DATA/ICs.TRACERS.p10.new                        #forecast initial conditions 
export IC_DIRB=$BASE_DATA/ICs.TRACERS.p10                        #forecast initial conditions 
export LEVS=65
# AJL set it to not use OMP

export nth_f=1                                         # number of threads 

# temporary running directory
# you will need to point to disk space you have permissions to use

export BASE_OUT=/ships19/models2/$LOGNAME/$FV3GFSVER/$EXPNAME/$CASE/

export SCRATCH_OUT=/scratch/users/$LOGNAME/$FV3GFSVER/$EXPNAME/$CASE/
mkdir -p $BASE_OUT
mkdir -p $SCRATCH_OUT
if [ ${DOGSI} = on ] ; then
export PATHSCRATCH=$SCRATCH_OUT/GSISCRATCH/
/bin/rm -f $PATHSCRATCH/input* cdate.inc*
else
export scratch_out=$SCRATCH_OUT/OUTSCRATCH/
mkdir -p $scratch_out
fi
export BASE_PATH=$BASE_OUT
export IC_DIR=$BASE_PATH/IC_DIR/                        #forecast initial conditions 
mkdir -p $IC_DIR
echo CDATE $CDATE CDATEBEG $CDATEBEG
if (( CDATE == CDATEBEG )) 
  then
  mkdir -p $IC_DIR/${CASE}_${CDATEBEG}
  rsync -ltvD $IC_DIRB/${CASE}_${CDATEBEG}/* $IC_DIR/${CASE}_${CDATEBEG}/
fi
#export BASE_OUT=/scratch/users/$LOGNAME/$FV3GFSVER/$EXPNAME/$CASE/
export AODLUT=/home/lenzen/Projects/INTEX/AOD_lut/

#if [ -d $DATA ]; then rm -rf $DATA ; fi

# directory to save output
export ROTDIR=$SCRATCH_OUT/GFS_DIR/
mkdir -p $ROTDIR
mkdir -p $BASE_OUT/OUTDIR $BASE_OUT/RUNDIR $BASE_OUT/TRACER 
#mkdir -p $BASE_OUT/REGRID.0.5/$CDATE/ $BASE_OUT/OUTREGRID/$CDATE/

# NEMS FV3GFS forecast executable directory
FV3DIR=${1:-`pwd`/../../..}
export FV3DIR_RELEASE=${1:-`pwd`/..}
if [ ${DOGSI} = on ] ; then
  export GSIDRIVE=$FV3DIR_RELEASE/ush/runremapgsi.C192.VIIRS.AOD.sh
  export gsi_path=$BASE_OUT/GSIDIR/$CDATE/
  export gsi_scratch=$SCRATCH_OUT/GSISCRATCH/$CDATE/
  export GSI_DIR=/home/lenzen/GSI/GSI.PRODGSI.16b.GOCART.CRTM/sorc/gsi.fd/
# use one from 85 percent nox experment
#export BERRROR_EXP=$GSI_DIR/fix/Big_Endian/gsi.trace.r4.FIREX-AQ.o3.no2.co.ch2o.ch4.bothpos.berror_stats.4xtime.o3phys.91day.361.fv3gfs
  export BERRROR_EXP=$GSI_DIR/fix/Big_Endian/gsi.trace.r4.FIREX-AQ.aerosols.ugpkg.berror_stats.4xtime.o3phys.91day.361.fv3gfs
  mkdir -p $gsi_scratch
  mkdir -p $gsi_path
  $GSIDRIVE >& $gsi_scratch/outrunremap.viirs.aod.dogsiloop &
fi
export FCSTEXECDIR=$FV3DIR/NEMS/exe
echo FCSTEXECDIR $FCSTEXECDIR
echo  FV3DIR $FV3DIR

export FHOUT=6                                        #forecast output frequency in hours
export NFHMAX_HF=24                                   # max lenght of forecast
#export atm_coupling_interval_sec=1800
#---------------------------------------------------------
#---------------------------------------------------------
#  C96)  export DELTIM=1800; export layout_x=6; export layout_y=8;  export NODES=12; 
case $CASE in
  C96)  export DELTIM=900; export layout_x=4; export layout_y=4;  export NODES=$SLURM_JOB_NODES; 
        export master_grid=1deg;   export REMAP_TASKS=20 ;;
  C192) export DELTIM=450 ; export layout_x=$JXX; export layout_y=$JYY;  export NODES=$SLURM_JOB_NODES;
        export master_grid=0p5deg; export REMAP_TASKS=96 ;;
  C384) export DELTIM=450 ; export layout_x=12; export layout_y=16;  export NODES=96;
        export master_grid=0p5deg; export REMAP_TASKS=96 ;;
  C768) export DELTIM=225 ; export layout_x=16; export layout_y=24; export NODES=192;
        export master_grid=0p25deg; export REMAP_TASKS=384 ;;
  *)    echo "grid $CASE not supported, exit"
        exit ;;
esac
export domains_stack_size=40000000
export quilting=.true.
export PARM_FV3DIAG=$FV3DIR_RELEASE/parm/parm_fv3diag
#export DIAG_TABLE=$FV3DIR_RELEASE/parm/chm_diag_table
export SEND=YES
# ajl leave logic after to this script
export DIAG_TABLE=
echo BEFORE IAER $IAER
  export FORECASTSH=$FV3DIR_RELEASE/scripts/exglobal_fcst_nemsfv3gfs.current.ceds.sh
if [ ${DOGSI} = on ] ; then
    export GSIREMAPSH=$FV3DIR_RELEASE/exp/runremapgsi.C192.VIIRS.AOD.sh
fi

#---determine task configuration
#export npe_node_f=32                                   # number of pes per node 
#export task_per_node=$((npe_node_f/nth_f))
#export tasks=$((NODES*task_per_node))                  # number of tasks 
export tasks=$NTASKS
export NTASKS_FV3=$NTASKS
export NTHREADS_REMAP=$nth_f


export TYPE=nh         				       # hydrostatic option: nh, hydro
export HYPT=off           			       # hyperthreading:     on, off  
export COMP="prod"        			       # compiling mode:     debug, repro, prod
if [ ${HYPT} = on ]
then
   export hyperthread=".true."
   export j_opt="-j 2"
else
   export hyperthread=".false."
   export j_opt="-j 1"
fi
export FCSTEXEC=NEMS.x

cp $FV3DIR/NEMS/src/conf/module-setup.sh.inc module-setup.sh
cp $FV3DIR/NEMS/src/conf/modules.nems modules.fv3
source ./module-setup.sh >/dev/null 2>&1
module use $( pwd -P )
module load modules.fv3
# ajl put in short cut for now will fix later
module purge >/dev/null 2>&1
source $FV3DIR/NEMS/src/conf/source.modules.nems >/dev/null 2>&1
module list

export mpiexec=`which mpirun`
export mpiexec=`which srun`
#export FCST_LAUNCHER="$mpiexec -prepend-rank -np $PBS_NP"
export FCST_LAUNCHER="$mpiexec -s -l -n $NTASKS_EXE"
export APRUN_FV3="timeout 20m $mpiexec -s -l -n $NTASKS_EXE"
echo APRUN_FV3 $APRUN_FV3

echo "Model started:  " `date`
ulimit -a
export MPI_TYPE_DEPTH=20
export OMP_STACKSIZE=912M
export OMP_NUM_THREADS=$nth_f
export ESMF_RUNTIME_COMPLIANCECHECK=OFF:depth=4
#export FIELD_TABLE=$FV3DIR/parm/chm_field_table
#export FIELD_TABLE=$FV3DIR/parm/chm_field_table.tracers.full.V1.cod25
export FIELD_TABLE=$FV3DIR/parm/chm_field_table.tracers.full.gfdl
export restart_interval=0
export CDUMP=gfs
cat $FIELD_TABLE
#--------------------------------------------------------------------------
# start of while loop with restart every 6 hours
export CDATEBEG=$CDATE
export new_date=/home/lenzen/UTILS/da_advance_time.exe
CDATENEW=$($new_date $CDATE 6h)
echo CDATENEW $CDATENEW
export BASE_PATH=$BASE_OUT
export INIT_PATH=$BASE_OUT/INIT_DIR
mkdir -p $INIT_PATH
echo ajl begin $CDATE $CDATEEND
while (( CDATE < CDATEEND ))
  do
  export INIT_DIR=$INIT_PATH/$CDATE/
  export DATATRACE=$BASE_OUT/TRACER/$CDATE/
  export DATA=${SCRATCH_OUT}/RUNDIR/${CDATE}     
  export YYYYMMDD=`echo $CDATE | cut -c1-8`
  export YYYY=`echo $CDATE | cut -c1-4`
  export YYYYMM=`echo $CDATE | cut -c1-6`
  export HH=`echo $CDATE | cut -c9-10`
 if (( YYYYMMDD <= 20190714 ))
  then
    if (( YYYY == 2019 ))
    then
      export GBBEPxDIR=/ships19/aqda/lenzen/GBBEPx.in.FV3C384Grid/${YYYYMMDD}/
    else
      export GBBEPxDIR=/ships19/aqda/lenzen/GBBEPx.in.FV3C384Grid/${YYYY}/${YYYYMMDD}/
    fi  
  else
    if (( YYYYMMDD <=  20190931 ))
    then
      export GBBEPxDIR=/ships19/aqda/lenzen/GBBEPx.in.FV3C384Grid/FRPMEAN.AVE.NONZERO/${YYYY}/${YYYYMMDD}/
    else
      export GBBEPxDIR=/ships19/aqda/lenzen/GBBEPx.in.FV3C384Grid/FRPMEAN.AVE.NONZERO/${YYYY}/${YYYYMM}//${YYYYMMDD}/
    fi
  fi 
  echo GBBEPxDIR $GBBEPxDIR
  mkdir -p $BASE_OUT/REGRID.0.5/$CDATE/ $BASE_OUT/OUTREGRID/$CDATE/
  export DATAREGRID=$BASE_OUT/REGRID.0.5/$CDATE/
  export DATAOUTREGRID=$BASE_OUT/OUTREGRID/$CDATE/
  export emi_outname=$BASE_OUT/TRACER/$CDATE/
if [ ${DOGSI} = on ] ; then
    export gsi_path=$BASE_OUT/GSIDIR/$CDATE/
    export gsi_scratch=$SCRATCH_OUT/GSISCRATCH/$CDATE/
    mkdir -p $gsi_scratch
    mkdir -p $gsi_path
fi
#  /bin/rm -rf $emi_outname
  mkdir -p $emi_outname

# --execute the forecast
  $FORECASTSH >& $BASE_OUT/outfv3run.$CDATE
  export ERRROR=$?
  echo ERRROR $ERRROR
  if [ $ERRROR != 0 ]; then
    echo "forecast failed, exit"
#    CDATENEW=$($new_date $CDATE 6h) 
#    if [ ! -s RUNDONE.$CDATENEW ] ; then
#      echo RUNDONE.$CDATENEW not found
#      echo CDATE $CDATE CDATENEW $CDATENEW
#      exit
#    else
      #echo had error code but RUNDONE.$CDATENEW is there so continue
     exit
#    fi
  fi

  echo "fcst job is done"

#-------------------------------------------------------------------------
#--convert 6-tile output to global arrary in netCDF format
ymd=`echo $CDATE |cut -c 1-8`
cyc=`echo $CDATE |cut -c 9-10`
export DATA=$ROTDIR/gfs.$ymd/$cyc
export IPD4=YES
#export REMAPSH=$FV3DIR_RELEASE/ush/fv3gfs_remap.sh            #remap 6-tile output to global array in netcdf
export REMAPEXE=$FV3DIR_RELEASE/exec/fregrid_parallel
export FIXDYNEXE=$FV3DIR_RELEASE/exec/fixdyn
#export REMAP_LAUNCHER="mpirun -prepend-rank -np $REMAP_TASKS"
export REMAP_LAUNCHER="srun -prepend-rank -n $REMAP_TASKS"

cp $FV3DIR_RELEASE/modulefiles/fv3gfs/fre-nctools.${machine} module.fre-nctools
module load module.fre-nctools
module list
# AJL this will make .5 degree lat lon files from the 6 tile files in the TRACER DIR
# AJL optional if you wnat these or not
#$REMAPSH
#export REMAP05=$FV3DIR_RELEASE/ush/fv3gfs_remap.tracer.dynam.CONTROL.sh
export REMAP05=$FV3DIR_RELEASE/ush/fv3gfs_remap.5degll.sh
export INC=6
sbatch --export=ALL -n 1 --share -t 10 $REMAP05
# increment CDATE 6 hrs
CDATENEW=$($new_date $CDATE 6h)
echo new CDATENEW $CDATENEW
mkdir -p $IC_DIR/${CASE}_${CDATENEW}
# need to read fv3_trace for GFS_DIR for current date
# need to get met data for CDATENEW and combine
# need to store new data set in INIT_DATA directory and copy first time period into there
#export INIT_DATA=$IC_DIR/${CDATE}_${CDATENEW}/
export INIT_DATA=$IC_DIR/${CASE}_${CDATENEW}/
export DATATRACE=$BASE_OUT/TRACER/$CDATE/
export RESPATH=$ROTDIR/gfs.${YYYYMMDD}/${HH}/RESTART/
mkdir -p ${BASE_OUT}/OUTREMAP
echo CDATE $CDATE CDATE0 $CDATE0 CDATENEW $CDATENEW

# AJL make new IC (initial condition) files for next run or cycle
export INC=1
export CMAX=6
export rc=
for (( i=1 ; i <= $CMAX ; i += $INC)); do
 export CTILE=$i
 echo $CTILE addchemtomet.$CASE.x &
/home/lenzen/UTILS/addchemtomet.$CASE.x $CDATENEW $CDATE0 >& ${BASE_OUT}/OUTREMAP/outaddchem.$CDATE.$CTILE &
export rc=`echo $rc $!`
done
echo done with addchemtomet $rc
wait $rc
# try
export CDATE0=$CDATE
export CDATE=$CDATENEW
echo ajl bottom on while loop $CDATE $CDATEEND

done
if (( CDATE >= CDATEENDRUN ))  
then
 exit 1
fi
# ajl this allows to loop to do more days till hit end date
export NEXTDAYRUN=$FV3DIR_RELEASE/exp/rundate.reloop.C192.CEDS.run.script.scr
#if [ ${DOGSI} = on ] ; then
#mkdir -p /scratch/users/${LOGNAME}/GSISCRATCH.gocart.aod.fraction
#fi
$NEXTDAYRUN >& ${scratch_out}/outrundaynextceds.$CDATE
exit 0

